syntax = "proto3";
package mythos.network.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

option go_package = "mythos/v1/x/network/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the grpc server
service Msg {
    option (cosmos.msg.v1.service) = true;

    // Ping
    rpc GrpcRequest(MsgGrpcRequest) returns (MsgGrpcRequestResponse);

    // Ping
    rpc Ping(MsgPing) returns (MsgPingResponse);

    // MakeProposal
    rpc MakeProposal(MsgMakeProposal) returns (MsgMakeProposalResponse);

    // IsProposer // TODO this should be a query
    rpc IsProposer(MsgIsProposer) returns (MsgIsProposerResponse);

    // SetCurrentNode // TODO
    rpc SetCurrentNode(MsgSetCurrentNode) returns (MsgSetCurrentNodeResponse);

    // GetCurrentNode // TODO
    rpc GetCurrentNode(MsgGetCurrentNode) returns (MsgGetCurrentNodeResponse);

    // SetValidators // TODO remove
    rpc SetValidators(MsgSetValidators) returns (MsgSetValidatorsResponse);

    // GetValidators // TODO remove
    rpc GetValidators(MsgGetValidators) returns (MsgGetValidatorsResponse);
}

message MsgGrpcRequest {
    string address = 1;
	bytes data = 2;
    string encoding = 3; // evm, json, protobuf // ?
}

message MsgGrpcRequestResponse {
	bytes data = 1;
}

// MsgPing
message MsgPing {
    string data = 1;
}

// MsgPingResponse
message MsgPingResponse {
    string data = 1;
}

// MsgMakeProposal
message MsgMakeProposal {
    string data = 1;
}

// MsgMakeProposalResponse
message MsgMakeProposalResponse {
    string data = 1;
}

// MsgSetValidators
message MsgSetValidators {}

// MsgSetValidatorsResponse
message MsgSetValidatorsResponse {}

// MsgGetValidators
message MsgGetValidators {}

// MsgGetValidatorsResponse
message MsgGetValidatorsResponse {
    repeated string validators = 1;
}

// MsgIsProposer
message MsgIsProposer {}

// MsgIsProposerResponse is the response type for the Query/IsProposer RPC method.
message MsgIsProposerResponse {
  // params defines the parameters of the module.
  bool is_proposer = 1;
}

// MsgSetCurrentNode
message MsgSetCurrentNode {}

// MsgSetCurrentNodeResponse
message MsgSetCurrentNodeResponse {}

// MsgGetCurrentNode
message MsgGetCurrentNode {}

// MsgGetCurrentNodeResponse
message MsgGetCurrentNodeResponse {
    string current_node = 1;
}
