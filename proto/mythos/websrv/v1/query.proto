syntax = "proto3";
package mythos.websrv.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "mythos/websrv/v1/params.proto";

option go_package = "mythos/v1/x/websrv/types";
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;

// Query defines the gRPC querier service.
service Query {
  // HttpGet makes a get request to the webserver
  rpc HttpGet(QueryHttpRequestGet)
      returns (QueryHttpResponseGet) {
    option (google.api.http).get = "/websrv/v1/get/{http_request}";
  }
  // ContractByRoute gets the contract controlling a given route
  rpc ContractByRoute(QueryContractByRouteRequest)
      returns (QueryContractByRouteResponse) {
    option (google.api.http).get = "/websrv/v1/route/{path}";
  }
  // RouteByContract gets the route controlled by a given contract
  rpc RouteByContract(QueryRouteByContractRequest)
      returns (QueryRouteByContractResponse) {
    option (google.api.http).get = "/websrv/v1/contract/{contract_address}";
  }
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/websrv/v1/params";
  }
  // GetAllClients gets all the registered client apps for the oauth service
  rpc GetAllOauthClients(QueryGetAllOauthClientsRequest)
      returns (QueryGetAllOauthClientsResponse) {
    option (google.api.http).get = "/websrv/v1/oauth/clients";
  }
  // GetOauthClient gets the registered oauth client by client id
  rpc GetOauthClient(QueryGetOauthClientRequest)
      returns (QueryGetOauthClientResponse) {
    option (google.api.http).get = "/websrv/v1/oauth/client/{client_id}";
  }
  // GetOauthClientsByOwner gets all the registered oauth client by an owner address
  rpc GetOauthClientsByOwner(QueryGetOauthClientsByOwnerRequest)
      returns (QueryGetOauthClientsByOwnerResponse) {
    option (google.api.http).get = "/websrv/v1/oauth/clients/{owner}";
  }
}

// QueryContractByRouteRequest is the request type for the
// Query/ContractByRoute RPC method.
message QueryContractByRouteRequest {
  string path = 1;
}

// QueryContractByRouteResponse is the response type for the
// Query/ContractByRoute RPC method.
message QueryContractByRouteResponse {
  string contract_address = 1;
}

// QueryRouteByContractRequest is the request type for the
// Query/RouteByContract RPC method.
message QueryRouteByContractRequest {
  string contract_address = 1;
}

// QueryRouteByContractResponse is the response type for the
// Query/RouteByContract RPC method.
message QueryRouteByContractResponse {
  string path = 1;
}

// QueryHttpGetRequest is the request type for the
// Query/HttpGet RPC method.
message QueryHttpRequestGet {
  bytes http_request = 1;
}

// QueryHttpResponseGet is the response type for the
// Query/HttpGet RPC method.
message QueryHttpResponseGet {
  // HttpResponse data = 1;
  bytes data = 1;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message OauthClientInfo {
  uint64 client_id = 1;
  string owner = 2;
  string domain = 3;
  bool public = 4;
}

// QueryGetAllOauthClientsRequest is the request type for the
// Query/GetAllOauthClients RPC method.
message QueryGetAllOauthClientsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryGetAllOauthClientsResponse is the response type for the
// Query/GetAllOauthClients RPC method.
message QueryGetAllOauthClientsResponse {
  repeated OauthClientInfo clients = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryGetOauthClientRequest is the request type for the
// Query/GetOauthClient RPC method.
message QueryGetOauthClientRequest {
  uint64 client_id = 1;
}

// QueryGetOauthClientResponse is the response type for the
// Query/GetOauthClient RPC method.
message QueryGetOauthClientResponse {
  OauthClientInfo client = 1;
}


// QueryGetAllOauthClientsRequest is the request type for the
// Query/GetOauthClientsByOwner RPC method.
message QueryGetOauthClientsByOwnerRequest {
  // bech32 address
  string owner = 1;
}

// QueryGetAllOauthClientsResponse is the response type for the
// Query/GetOauthClientsByOwner RPC method.
message QueryGetOauthClientsByOwnerResponse {
  repeated uint64 client_ids = 1;
}

