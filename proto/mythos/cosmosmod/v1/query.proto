syntax = "proto3";
package mythos.cosmosmod.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "amino/amino.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "cosmos/staking/v1beta1/query.proto";
import "cosmos/query/v1/query.proto";

option go_package = "mythos/v1/x/cosmosmod/types";
option (gogoproto.goproto_getters_all) = false;

// Query defines the gRPC querier service.
service Query {
    // staking

    // Validators queries all validators that match the given status.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    rpc Validators(cosmos.staking.v1beta1.QueryValidatorsRequest) returns (cosmos.staking.v1beta1.QueryValidatorsResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/validators";
    }

    // Validator queries validator info for given validator address.
    rpc Validator(cosmos.staking.v1beta1.QueryValidatorRequest) returns (cosmos.staking.v1beta1.QueryValidatorResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/validators/{validator_addr}";
    }

    // ValidatorDelegations queries delegate info for given validator.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    rpc ValidatorDelegations(cosmos.staking.v1beta1.QueryValidatorDelegationsRequest) returns (cosmos.staking.v1beta1.QueryValidatorDelegationsResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations";
    }

    // ValidatorUnbondingDelegations queries unbonding delegations of a validator.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    rpc ValidatorUnbondingDelegations(cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest)
        returns (cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/validators/"
                                                    "{validator_addr}/unbonding_delegations";
    }

    // Delegation queries delegate info for given validator delegator pair.
    rpc Delegation(cosmos.staking.v1beta1.QueryDelegationRequest) returns (cosmos.staking.v1beta1.QueryDelegationResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/"
                                                    "{delegator_addr}";
    }

    // UnbondingDelegation queries unbonding info for given validator delegator
    // pair.
    rpc UnbondingDelegation(cosmos.staking.v1beta1.QueryUnbondingDelegationRequest) returns (cosmos.staking.v1beta1.QueryUnbondingDelegationResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/"
                                                    "{delegator_addr}/unbonding_delegation";
    }

    // DelegatorDelegations queries all delegations of a given delegator address.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    rpc DelegatorDelegations(cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest) returns (cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/delegations/{delegator_addr}";
    }

    // DelegatorUnbondingDelegations queries all unbonding delegations of a given
    // delegator address.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    rpc DelegatorUnbondingDelegations(cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest)
        returns (cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/delegators/"
                                                    "{delegator_addr}/unbonding_delegations";
    }

    // Redelegations queries redelegations of given address.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    rpc Redelegations(cosmos.staking.v1beta1.QueryRedelegationsRequest) returns (cosmos.staking.v1beta1.QueryRedelegationsResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations";
    }

    // DelegatorValidators queries all validators info for given delegator
    // address.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    rpc DelegatorValidators(cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest) returns (cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators";
    }

    // DelegatorValidator queries validator info for given delegator validator
    // pair.
    rpc DelegatorValidator(cosmos.staking.v1beta1.QueryDelegatorValidatorRequest) returns (cosmos.staking.v1beta1.QueryDelegatorValidatorResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/"
                                                    "{validator_addr}";
    }

    // HistoricalInfo queries the historical info for given height.
    rpc HistoricalInfo(cosmos.staking.v1beta1.QueryHistoricalInfoRequest) returns (cosmos.staking.v1beta1.QueryHistoricalInfoResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/historical_info/{height}";
    }

    // Pool queries the pool info.
    rpc Pool(cosmos.staking.v1beta1.QueryPoolRequest) returns (cosmos.staking.v1beta1.QueryPoolResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/pool";
    }

    // Parameters queries the staking parameters.
    rpc Params(cosmos.staking.v1beta1.QueryParamsRequest) returns (cosmos.staking.v1beta1.QueryParamsResponse) {
        option (cosmos.query.v1.module_query_safe) = true;
        option (google.api.http).get               = "/cosmos/staking/v1beta1/params";
    }
}
