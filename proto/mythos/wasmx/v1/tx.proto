syntax = "proto3";
package mythos.wasmx.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "mythos/wasmx/v1/contract.proto";

option go_package = "mythos/v1/x/wasmx/types";

// Msg defines the wasm Msg service.
service Msg {
    // StoreCode to submit Wasm code to the system
    rpc StoreCode(MsgStoreCode) returns (MsgStoreCodeResponse);
    // DeployCode stores and instantiates
    rpc DeployCode(MsgDeployCode) returns (MsgDeployCodeResponse);
    //  InstantiateContract creates a new smart contract instance for the given
    //  code id.
    rpc InstantiateContract(MsgInstantiateContract)
        returns (MsgInstantiateContractResponse);
    //  InstantiateContract2 creates a new smart contract instance for the given
    //  code id with a predictable address
    rpc InstantiateContract2(MsgInstantiateContract2)
        returns (MsgInstantiateContract2Response);
    // Execute submits the given message data to a smart contract
    rpc ExecuteContract(MsgExecuteContract) returns (MsgExecuteContractResponse);
    // CompileContract submits a smart contract to be precompiled
    rpc CompileContract(MsgCompileContract) returns (MsgCompileContractResponse);
    // ExecuteEth to submit Wasm code to the system
    rpc ExecuteEth(MsgExecuteEth) returns (MsgExecuteEthResponse);

    // TODO Remove
    // ExecuteWithOrigin submits the given message data to a smart contract
    rpc ExecuteWithOriginContract(MsgExecuteWithOriginContract) returns (MsgExecuteContractResponse);
    // ExecuteDelegate submits the given message data to a smart contract
    rpc ExecuteDelegateContract(MsgExecuteDelegateContract) returns (MsgExecuteDelegateContractResponse);
}

// MsgStoreCode submit Wasm code to the system
message MsgStoreCode {
    // Sender is the that actor that signed the messages
    string sender = 1;
    // WASMByteCode can be raw or gzip compressed
    // can be interpreted bytecode
    // constructor + runtime
    bytes byte_code = 2;
    // deps can be hex-formatted contract addresses (32 bytes) for interpreter contracts
    // and/or versioned interface labels
    repeated string deps = 3;
    CodeMetadata metadata = 4 [(gogoproto.nullable) = false];
}

// MsgStoreCodeResponse returns store result data.
message MsgStoreCodeResponse {
    // CodeID is the reference to the stored WASM code
    uint64 code_id = 1;
    // Checksum is the sha256 hash of the stored code
    bytes checksum = 2;
}

// MsgStoreCode submit Wasm code to the system
message MsgDeployCode {
    // Sender is the that actor that signed the messages
    string sender = 1;
    // WASMByteCode can be raw or gzip compressed
    // can be interpreted bytecode
    // constructor + runtime
    bytes byte_code = 2;
    // deps can be hex-formatted contract addresses (32 bytes) for interpreter contracts
    // and/or versioned interface labels
    repeated string deps = 3;
    CodeMetadata metadata = 4 [(gogoproto.nullable) = false];
    // instantiation:
    // Msg json encoded message to be passed to the contract on instantiation
    bytes msg = 5 [ (gogoproto.casttype) = "RawContractMessage" ];
    // Funds coins that are transferred to the contract on instantiation
    repeated cosmos.base.v1beta1.Coin funds = 6 [
        (gogoproto.nullable) = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
    ];
    string label = 7;
}

// MsgDeployCodeResponse returns store result data.
message MsgDeployCodeResponse {
    // CodeID is the reference to the stored WASM code
    uint64 code_id = 1;
    // Checksum is the sha256 hash of the stored code
    bytes checksum = 2;
    string address = 3;
}

// MsgInstantiateContract create a new smart contract instance for the given
// code id.
message MsgInstantiateContract {
    // Sender is the that actor that signed the messages
    string sender = 1;
    // CodeID is the reference to the stored WASM code
    uint64 code_id = 2;
    // Msg json encoded message to be passed to the contract on instantiation
    bytes msg = 3 [ (gogoproto.casttype) = "RawContractMessage" ];
    // Funds coins that are transferred to the contract on instantiation
    repeated cosmos.base.v1beta1.Coin funds = 4 [
        (gogoproto.nullable) = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
    ];
    string label = 5;
}

// MsgInstantiateContract2 create a new smart contract instance for the given
// code id with a predicable address.
message MsgInstantiateContract2 {
    // Sender is the that actor that signed the messages
    string sender = 1;
    // Admin is an optional address that can execute migrations
    uint64 code_id = 2;
    // Msg json encoded message to be passed to the contract on instantiation
    bytes msg = 3 [ (gogoproto.casttype) = "RawContractMessage" ];
    // Funds coins that are transferred to the contract on instantiation
    repeated cosmos.base.v1beta1.Coin funds = 4 [
        (gogoproto.nullable) = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
    ];
    string label = 5;
    // Salt is an arbitrary value provided by the sender. Size can be 1 to 64.
    bytes salt = 6;
    // FixMsg include the msg value into the hash for the predictable address.
    // Default is false
    bool fix_msg = 7;
}

// MsgInstantiateContractResponse return instantiation result data
message MsgInstantiateContractResponse {
    // Address is the bech32 address of the new contract instance.
    string address = 1;
    // Data contains bytes to returned from the contract
    bytes data = 2;
}

// MsgInstantiateContract2Response return instantiation result data
message MsgInstantiateContract2Response {
    // Address is the bech32 address of the new contract instance.
    string address = 1;
    // Data contains bytes to returned from the contract
    bytes data = 2;
}

// MsgExecuteContract submits the given message data to a smart contract
message MsgExecuteContract {
    // Sender is the that actor that signed the messages
    string sender = 1;
    // Contract is the address of the smart contract
    string contract = 2;
    // Msg json encoded message to be passed to the contract
    bytes msg = 3 [ (gogoproto.casttype) = "RawContractMessage" ];
    // Funds coins that are transferred to the contract on execution
    repeated cosmos.base.v1beta1.Coin funds = 4 [
        (gogoproto.nullable) = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
    ];
    // Array of either hex-encoded contract addresses or contract labels
    // on which the execution of this message depends on
    repeated string dependencies = 5;
}

// MsgExecuteContractResponse returns execution result data.
message MsgExecuteContractResponse {
    // Data contains bytes to returned from the contract
    bytes data = 1;
}

// MsgExecuteEth submits an Ethereum-like RLP-encoded transaction
message MsgExecuteEth {
    // data is RLP-encoded transaction data of the Ethereum transaction
    // we use Any for its caching feature
    // google.protobuf.Any data = 1;
    bytes data = 1;
    // from is a bech32 address decoded from the transaction signature
    string sender = 2;
}

// MsgExecuteEthResponse returns execution result data.
message MsgExecuteEthResponse {
    // Data contains bytes to returned from the contract
    bytes data = 1;
}

// ExtensionOptionEthereumTx is an extension option for ethereum transactions
message ExtensionOptionEthereumTx {
    option (gogoproto.goproto_getters) = false;
}

// MsgExecuteWithOriginContract forwards a message data from a smart contract
// to another smart contract
message MsgExecuteWithOriginContract {
    // Origin is the actor that originally signed the message
    string origin = 1;
    // Sender is the the smart contract that sent the messages
    string sender = 2;
    // Contract is the address of the smart contract that receives the message
    string contract = 3;
    // Msg json encoded message to be passed to the contract
    bytes msg = 4 [ (gogoproto.casttype) = "RawContractMessage" ];
    // Funds coins that are transferred to the contract on execution
    repeated cosmos.base.v1beta1.Coin funds = 5 [
        (gogoproto.nullable) = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
    ];
}

// MsgExecuteDelegateContract submits the given message data to a smart contract
message MsgExecuteDelegateContract {
    // Origin is the actor that originally signed the message
    string origin = 1;
    // Sender is the storage contract, equivalent to the address that triggers the message (signer)
    string sender = 2;
    // Caller is the address that will be used as sender
    string caller = 3;
    // CodeContract is the address of the smart contract whose binary is used
    string code_contract = 4;
    // StorageContract is the address of the smart contract whose storage is used
    string storage_contract = 5;
    // Msg json encoded message to be passed to the contract
    bytes msg = 6 [ (gogoproto.casttype) = "RawContractMessage" ];
    // Funds coins that are transferred to the contract on execution
    repeated cosmos.base.v1beta1.Coin funds = 7 [
        (gogoproto.nullable) = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
    ];
}

// MsgExecuteDelegateContractResponse returns execution result data.
message MsgExecuteDelegateContractResponse {
    // Data contains bytes to returned from the contract
    bytes data = 1;
}

message MsgCompileContract {
    // Sender is the that actor that signed the messages
    string sender = 1;
    // Contract is the address of the smart contract
    uint64 codeId = 2;
}

message MsgCompileContractResponse {}
