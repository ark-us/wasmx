// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/network/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryMultiChainRequest is the request type for the
// Query/QueryMultiChain RPC method
type QueryMultiChainRequest struct {
	MultiChainId string             `protobuf:"bytes,1,opt,name=multi_chain_id,json=multiChainId,proto3" json:"multi_chain_id,omitempty"`
	QueryData    RawContractMessage `protobuf:"bytes,2,opt,name=query_data,json=queryData,proto3,casttype=RawContractMessage" json:"query_data,omitempty"`
}

func (m *QueryMultiChainRequest) Reset()         { *m = QueryMultiChainRequest{} }
func (m *QueryMultiChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMultiChainRequest) ProtoMessage()    {}
func (*QueryMultiChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6a247dd5f5b796, []int{0}
}
func (m *QueryMultiChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiChainRequest.Merge(m, src)
}
func (m *QueryMultiChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiChainRequest proto.InternalMessageInfo

func (m *QueryMultiChainRequest) GetMultiChainId() string {
	if m != nil {
		return m.MultiChainId
	}
	return ""
}

func (m *QueryMultiChainRequest) GetQueryData() RawContractMessage {
	if m != nil {
		return m.QueryData
	}
	return nil
}

// QueryMultiChainResponse is the response type for the
type QueryMultiChainResponse struct {
	// Data contains the json data returned from the smart contract
	Data RawContractMessage `protobuf:"bytes,1,opt,name=data,proto3,casttype=RawContractMessage" json:"data,omitempty"`
}

func (m *QueryMultiChainResponse) Reset()         { *m = QueryMultiChainResponse{} }
func (m *QueryMultiChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMultiChainResponse) ProtoMessage()    {}
func (*QueryMultiChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6a247dd5f5b796, []int{1}
}
func (m *QueryMultiChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiChainResponse.Merge(m, src)
}
func (m *QueryMultiChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiChainResponse proto.InternalMessageInfo

// QueryContractCallRequest is the request type for the
// Query/ContractCall RPC method
type QueryContractCallRequest struct {
	MultiChainId string `protobuf:"bytes,1,opt,name=multi_chain_id,json=multiChainId,proto3" json:"multi_chain_id,omitempty"`
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Address is the address of the smart contract
	Address   string             `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	QueryData RawContractMessage `protobuf:"bytes,4,opt,name=query_data,json=queryData,proto3,casttype=RawContractMessage" json:"query_data,omitempty"`
	// Funds coins that are transferred to the contract on execution
	Funds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=funds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"funds"`
	// Array of either hex-encoded contract addresses or contract labels
	// on which the execution of this message depends on
	Dependencies []string `protobuf:"bytes,6,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (m *QueryContractCallRequest) Reset()         { *m = QueryContractCallRequest{} }
func (m *QueryContractCallRequest) String() string { return proto.CompactTextString(m) }
func (*QueryContractCallRequest) ProtoMessage()    {}
func (*QueryContractCallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6a247dd5f5b796, []int{2}
}
func (m *QueryContractCallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractCallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractCallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractCallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractCallRequest.Merge(m, src)
}
func (m *QueryContractCallRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractCallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractCallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractCallRequest proto.InternalMessageInfo

// QueryContractCallResponse is the response type for the
// Query/ContractCall RPC method
type QueryContractCallResponse struct {
	// Data contains the json data returned from the smart contract
	Data RawContractMessage `protobuf:"bytes,1,opt,name=data,proto3,casttype=RawContractMessage" json:"data,omitempty"`
}

func (m *QueryContractCallResponse) Reset()         { *m = QueryContractCallResponse{} }
func (m *QueryContractCallResponse) String() string { return proto.CompactTextString(m) }
func (*QueryContractCallResponse) ProtoMessage()    {}
func (*QueryContractCallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6a247dd5f5b796, []int{3}
}
func (m *QueryContractCallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractCallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractCallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractCallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractCallResponse.Merge(m, src)
}
func (m *QueryContractCallResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractCallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractCallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractCallResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryMultiChainRequest)(nil), "mythos.network.v1.QueryMultiChainRequest")
	proto.RegisterType((*QueryMultiChainResponse)(nil), "mythos.network.v1.QueryMultiChainResponse")
	proto.RegisterType((*QueryContractCallRequest)(nil), "mythos.network.v1.QueryContractCallRequest")
	proto.RegisterType((*QueryContractCallResponse)(nil), "mythos.network.v1.QueryContractCallResponse")
}

func init() { proto.RegisterFile("mythos/network/v1/query.proto", fileDescriptor_3b6a247dd5f5b796) }

var fileDescriptor_3b6a247dd5f5b796 = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x3f, 0x6f, 0xd3, 0x40,
	0x1c, 0xb5, 0xd3, 0x3f, 0xd0, 0x23, 0x02, 0x71, 0x42, 0xc5, 0x89, 0xc0, 0x89, 0x2c, 0x86, 0x50,
	0xc0, 0xd7, 0x14, 0xc1, 0x00, 0x13, 0x0d, 0x08, 0x75, 0xe8, 0x80, 0x47, 0x96, 0xea, 0x62, 0x5f,
	0x1d, 0xab, 0xf6, 0x9d, 0xeb, 0x3b, 0xa7, 0x44, 0x51, 0x84, 0xc4, 0xc4, 0x88, 0xc4, 0x17, 0xc8,
	0x88, 0x98, 0x18, 0xf8, 0x10, 0x19, 0x2b, 0xb1, 0x30, 0x15, 0x9a, 0x30, 0xf0, 0x19, 0x98, 0x90,
	0xcf, 0x97, 0x90, 0x36, 0xb4, 0x4a, 0x27, 0xfb, 0xee, 0xbd, 0x7b, 0x7a, 0xef, 0xde, 0xfd, 0xc0,
	0xed, 0xa8, 0x23, 0x5a, 0x8c, 0x23, 0x4a, 0xc4, 0x01, 0x4b, 0xf6, 0x50, 0xbb, 0x8e, 0xf6, 0x53,
	0x92, 0x74, 0xec, 0x38, 0x61, 0x82, 0xc1, 0xeb, 0x39, 0x6c, 0x2b, 0xd8, 0x6e, 0xd7, 0xcb, 0x37,
	0x7c, 0xe6, 0x33, 0x89, 0xa2, 0xec, 0x2f, 0x27, 0x96, 0x4b, 0x3e, 0x63, 0x7e, 0x48, 0x90, 0x5c,
	0x35, 0xd3, 0x5d, 0x84, 0xa9, 0xd2, 0x28, 0xdf, 0x52, 0x10, 0x8e, 0x03, 0x84, 0x29, 0x65, 0x02,
	0x8b, 0x80, 0x51, 0xae, 0x50, 0xd3, 0x65, 0x3c, 0x62, 0x1c, 0x35, 0x31, 0x27, 0xa8, 0x5d, 0x6f,
	0x12, 0x81, 0xeb, 0xc8, 0x65, 0x01, 0x55, 0xf8, 0xda, 0x34, 0x2e, 0xad, 0x4d, 0x58, 0x31, 0xf6,
	0x03, 0x2a, 0xc5, 0xc6, 0x5a, 0xb3, 0x61, 0xdc, 0x94, 0x0b, 0x16, 0xe5, 0xb8, 0xf5, 0x16, 0xac,
	0xbe, 0xca, 0x14, 0xb6, 0xd3, 0x50, 0x04, 0x8d, 0x16, 0x0e, 0xa8, 0x43, 0xf6, 0x53, 0xc2, 0x05,
	0xbc, 0x03, 0xae, 0x46, 0xd9, 0xe6, 0x8e, 0x9b, 0xed, 0xee, 0x04, 0x9e, 0xa1, 0x57, 0xf5, 0xda,
	0x8a, 0x53, 0x8c, 0x26, 0xd4, 0x2d, 0x0f, 0x3e, 0x02, 0x40, 0x3a, 0xd8, 0xf1, 0xb0, 0xc0, 0x46,
	0xa1, 0xaa, 0xd7, 0x8a, 0x9b, 0xab, 0x7f, 0x8e, 0x2a, 0xd0, 0xc1, 0x07, 0x0d, 0x46, 0x45, 0x82,
	0x5d, 0xb1, 0x4d, 0x38, 0xc7, 0x3e, 0x71, 0x56, 0x24, 0xf3, 0x39, 0x16, 0xf8, 0xc9, 0xe5, 0xf7,
	0xfd, 0x8a, 0xfe, 0xbb, 0x5f, 0xd1, 0xac, 0x17, 0xe0, 0xe6, 0x8c, 0x01, 0x1e, 0x33, 0xca, 0x09,
	0x5c, 0x03, 0x8b, 0x52, 0x55, 0x3f, 0x57, 0x55, 0x72, 0xac, 0x2f, 0x05, 0x60, 0x48, 0x9d, 0x31,
	0xdc, 0xc0, 0x61, 0x78, 0xb1, 0x28, 0xab, 0x60, 0x99, 0x13, 0xea, 0x91, 0x44, 0xc6, 0x58, 0x71,
	0xd4, 0x0a, 0x1a, 0xe0, 0x12, 0xf6, 0xbc, 0x84, 0x70, 0x6e, 0x2c, 0x48, 0x60, 0xbc, 0x3c, 0x15,
	0x7e, 0x71, 0xce, 0xf0, 0x10, 0x83, 0xa5, 0xdd, 0x94, 0x7a, 0xdc, 0x58, 0xaa, 0x2e, 0xd4, 0xae,
	0x6c, 0x94, 0xec, 0xbc, 0x4f, 0x3b, 0xeb, 0xd3, 0x56, 0x4d, 0xda, 0x0d, 0x16, 0xd0, 0xcd, 0xf5,
	0xc1, 0x51, 0x45, 0xfb, 0xfc, 0xa3, 0x52, 0xf3, 0x03, 0xd1, 0x4a, 0x9b, 0xb6, 0xcb, 0x22, 0xa4,
	0xca, 0xcf, 0x3f, 0x0f, 0xb8, 0xb7, 0x87, 0x44, 0x27, 0x26, 0x5c, 0x1e, 0xe0, 0x4e, 0xae, 0x0c,
	0x2d, 0x50, 0xf4, 0x48, 0x9c, 0xf9, 0xa7, 0x6e, 0x40, 0xb8, 0xb1, 0x5c, 0x5d, 0xc8, 0xf2, 0x4e,
	0xef, 0x59, 0x2f, 0x41, 0xe9, 0x3f, 0x37, 0x76, 0xf1, 0xbb, 0xdf, 0x38, 0x2e, 0x80, 0x25, 0xa9,
	0x04, 0xbf, 0xea, 0xa0, 0x38, 0x2d, 0x07, 0xef, 0xd9, 0x33, 0xd3, 0x62, 0x9f, 0x55, 0x53, 0xf9,
	0xfe, 0x7c, 0xe4, 0xdc, 0xa1, 0xb5, 0xf5, 0xee, 0xdb, 0xaf, 0x8f, 0x85, 0x06, 0x7c, 0x36, 0xfd,
	0xb6, 0xbb, 0x27, 0x7b, 0xee, 0x21, 0x57, 0x1d, 0x45, 0x5d, 0x55, 0x5a, 0x0f, 0xb9, 0x38, 0x0c,
	0x51, 0xf7, 0x5f, 0x71, 0x3d, 0xd8, 0xd7, 0xc1, 0xb5, 0x53, 0x8f, 0x10, 0xde, 0x3d, 0xcb, 0xcc,
	0xcc, 0xa4, 0x94, 0xd7, 0xe6, 0xa1, 0x2a, 0xd7, 0x8f, 0xa5, 0xeb, 0x75, 0x68, 0x9f, 0xeb, 0x3a,
	0xb3, 0x75, 0xc2, 0xe2, 0xe6, 0xd3, 0xc1, 0xb1, 0xa9, 0x7d, 0x1a, 0x9a, 0xda, 0x60, 0x68, 0xea,
	0x87, 0x43, 0x53, 0xff, 0x39, 0x34, 0xf5, 0x0f, 0x23, 0x53, 0x3b, 0x1c, 0x99, 0xda, 0xf7, 0x91,
	0xa9, 0xbd, 0x2e, 0xa9, 0x49, 0x6f, 0xd7, 0xd1, 0x9b, 0x89, 0xb8, 0x7c, 0x1a, 0xcd, 0x65, 0x39,
	0xeb, 0x0f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xe2, 0x3c, 0x26, 0xda, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ContractCall
	ContractCall(ctx context.Context, in *QueryContractCallRequest, opts ...grpc.CallOption) (*QueryContractCallResponse, error)
	QueryMultiChain(ctx context.Context, in *QueryMultiChainRequest, opts ...grpc.CallOption) (*QueryMultiChainResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ContractCall(ctx context.Context, in *QueryContractCallRequest, opts ...grpc.CallOption) (*QueryContractCallResponse, error) {
	out := new(QueryContractCallResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Query/ContractCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryMultiChain(ctx context.Context, in *QueryMultiChainRequest, opts ...grpc.CallOption) (*QueryMultiChainResponse, error) {
	out := new(QueryMultiChainResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Query/QueryMultiChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ContractCall
	ContractCall(context.Context, *QueryContractCallRequest) (*QueryContractCallResponse, error)
	QueryMultiChain(context.Context, *QueryMultiChainRequest) (*QueryMultiChainResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ContractCall(ctx context.Context, req *QueryContractCallRequest) (*QueryContractCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCall not implemented")
}
func (*UnimplementedQueryServer) QueryMultiChain(ctx context.Context, req *QueryMultiChainRequest) (*QueryMultiChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMultiChain not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ContractCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryContractCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Query/ContractCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractCall(ctx, req.(*QueryContractCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryMultiChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryMultiChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Query/QueryMultiChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryMultiChain(ctx, req.(*QueryMultiChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mythos.network.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContractCall",
			Handler:    _Query_ContractCall_Handler,
		},
		{
			MethodName: "QueryMultiChain",
			Handler:    _Query_QueryMultiChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mythos/network/v1/query.proto",
}

func (m *QueryMultiChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryData) > 0 {
		i -= len(m.QueryData)
		copy(dAtA[i:], m.QueryData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MultiChainId) > 0 {
		i -= len(m.MultiChainId)
		copy(dAtA[i:], m.MultiChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MultiChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultiChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractCallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractCallRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractCallRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dependencies) > 0 {
		for iNdEx := len(m.Dependencies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Dependencies[iNdEx])
			copy(dAtA[i:], m.Dependencies[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Dependencies[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Funds) > 0 {
		for iNdEx := len(m.Funds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.QueryData) > 0 {
		i -= len(m.QueryData)
		copy(dAtA[i:], m.QueryData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MultiChainId) > 0 {
		i -= len(m.MultiChainId)
		copy(dAtA[i:], m.MultiChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MultiChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractCallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractCallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractCallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMultiChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MultiChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QueryData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMultiChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryContractCallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MultiChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QueryData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Funds) > 0 {
		for _, e := range m.Funds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Dependencies) > 0 {
		for _, s := range m.Dependencies {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryContractCallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMultiChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = append(m.QueryData[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryData == nil {
				m.QueryData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractCallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = append(m.QueryData[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryData == nil {
				m.QueryData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = append(m.Funds, types.Coin{})
			if err := m.Funds[len(m.Funds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependencies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dependencies = append(m.Dependencies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractCallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractCallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractCallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
