// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/websrv/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryContractByRouteRequest is the request type for the
// Query/ContractByRoute RPC method.
type QueryContractByRouteRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *QueryContractByRouteRequest) Reset()         { *m = QueryContractByRouteRequest{} }
func (m *QueryContractByRouteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryContractByRouteRequest) ProtoMessage()    {}
func (*QueryContractByRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{0}
}
func (m *QueryContractByRouteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractByRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractByRouteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractByRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractByRouteRequest.Merge(m, src)
}
func (m *QueryContractByRouteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractByRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractByRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractByRouteRequest proto.InternalMessageInfo

// QueryContractByRouteResponse is the response type for the
// Query/ContractByRoute RPC method.
type QueryContractByRouteResponse struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryContractByRouteResponse) Reset()         { *m = QueryContractByRouteResponse{} }
func (m *QueryContractByRouteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryContractByRouteResponse) ProtoMessage()    {}
func (*QueryContractByRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{1}
}
func (m *QueryContractByRouteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractByRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractByRouteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractByRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractByRouteResponse.Merge(m, src)
}
func (m *QueryContractByRouteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractByRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractByRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractByRouteResponse proto.InternalMessageInfo

// QueryRouteByContractRequest is the request type for the
// Query/RouteByContract RPC method.
type QueryRouteByContractRequest struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryRouteByContractRequest) Reset()         { *m = QueryRouteByContractRequest{} }
func (m *QueryRouteByContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRouteByContractRequest) ProtoMessage()    {}
func (*QueryRouteByContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{2}
}
func (m *QueryRouteByContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRouteByContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRouteByContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRouteByContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRouteByContractRequest.Merge(m, src)
}
func (m *QueryRouteByContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRouteByContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRouteByContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRouteByContractRequest proto.InternalMessageInfo

// QueryRouteByContractResponse is the response type for the
// Query/RouteByContract RPC method.
type QueryRouteByContractResponse struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *QueryRouteByContractResponse) Reset()         { *m = QueryRouteByContractResponse{} }
func (m *QueryRouteByContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRouteByContractResponse) ProtoMessage()    {}
func (*QueryRouteByContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{3}
}
func (m *QueryRouteByContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRouteByContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRouteByContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRouteByContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRouteByContractResponse.Merge(m, src)
}
func (m *QueryRouteByContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRouteByContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRouteByContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRouteByContractResponse proto.InternalMessageInfo

// QueryHttpGetRequest is the request type for the
// Query/HttpGet RPC method.
type QueryHttpRequestGet struct {
	HttpRequest []byte `protobuf:"bytes,1,opt,name=http_request,json=httpRequest,proto3" json:"http_request,omitempty"`
}

func (m *QueryHttpRequestGet) Reset()         { *m = QueryHttpRequestGet{} }
func (m *QueryHttpRequestGet) String() string { return proto.CompactTextString(m) }
func (*QueryHttpRequestGet) ProtoMessage()    {}
func (*QueryHttpRequestGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{4}
}
func (m *QueryHttpRequestGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHttpRequestGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHttpRequestGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHttpRequestGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHttpRequestGet.Merge(m, src)
}
func (m *QueryHttpRequestGet) XXX_Size() int {
	return m.Size()
}
func (m *QueryHttpRequestGet) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHttpRequestGet.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHttpRequestGet proto.InternalMessageInfo

// QueryHttpResponseGet is the response type for the
// Query/HttpGet RPC method.
type QueryHttpResponseGet struct {
	// HttpResponse data = 1;
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryHttpResponseGet) Reset()         { *m = QueryHttpResponseGet{} }
func (m *QueryHttpResponseGet) String() string { return proto.CompactTextString(m) }
func (*QueryHttpResponseGet) ProtoMessage()    {}
func (*QueryHttpResponseGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{5}
}
func (m *QueryHttpResponseGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHttpResponseGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHttpResponseGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHttpResponseGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHttpResponseGet.Merge(m, src)
}
func (m *QueryHttpResponseGet) XXX_Size() int {
	return m.Size()
}
func (m *QueryHttpResponseGet) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHttpResponseGet.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHttpResponseGet proto.InternalMessageInfo

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{6}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{7}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

type OauthClientInfo struct {
	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Owner    string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Domain   string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Public   bool   `protobuf:"varint,4,opt,name=public,proto3" json:"public,omitempty"`
}

func (m *OauthClientInfo) Reset()         { *m = OauthClientInfo{} }
func (m *OauthClientInfo) String() string { return proto.CompactTextString(m) }
func (*OauthClientInfo) ProtoMessage()    {}
func (*OauthClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{8}
}
func (m *OauthClientInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OauthClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OauthClientInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OauthClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OauthClientInfo.Merge(m, src)
}
func (m *OauthClientInfo) XXX_Size() int {
	return m.Size()
}
func (m *OauthClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OauthClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OauthClientInfo proto.InternalMessageInfo

// QueryGetAllOauthClientsRequest is the request type for the
// Query/GetAllOauthClients RPC method.
type QueryGetAllOauthClientsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllOauthClientsRequest) Reset()         { *m = QueryGetAllOauthClientsRequest{} }
func (m *QueryGetAllOauthClientsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllOauthClientsRequest) ProtoMessage()    {}
func (*QueryGetAllOauthClientsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{9}
}
func (m *QueryGetAllOauthClientsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllOauthClientsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllOauthClientsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllOauthClientsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllOauthClientsRequest.Merge(m, src)
}
func (m *QueryGetAllOauthClientsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllOauthClientsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllOauthClientsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllOauthClientsRequest proto.InternalMessageInfo

// QueryGetAllOauthClientsResponse is the response type for the
// Query/GetAllOauthClients RPC method.
type QueryGetAllOauthClientsResponse struct {
	Clients []OauthClientInfo `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllOauthClientsResponse) Reset()         { *m = QueryGetAllOauthClientsResponse{} }
func (m *QueryGetAllOauthClientsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllOauthClientsResponse) ProtoMessage()    {}
func (*QueryGetAllOauthClientsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{10}
}
func (m *QueryGetAllOauthClientsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllOauthClientsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllOauthClientsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllOauthClientsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllOauthClientsResponse.Merge(m, src)
}
func (m *QueryGetAllOauthClientsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllOauthClientsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllOauthClientsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllOauthClientsResponse proto.InternalMessageInfo

// QueryGetOauthClientRequest is the request type for the
// Query/GetOauthClient RPC method.
type QueryGetOauthClientRequest struct {
	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *QueryGetOauthClientRequest) Reset()         { *m = QueryGetOauthClientRequest{} }
func (m *QueryGetOauthClientRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOauthClientRequest) ProtoMessage()    {}
func (*QueryGetOauthClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{11}
}
func (m *QueryGetOauthClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOauthClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOauthClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOauthClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOauthClientRequest.Merge(m, src)
}
func (m *QueryGetOauthClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOauthClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOauthClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOauthClientRequest proto.InternalMessageInfo

// QueryGetOauthClientResponse is the response type for the
// Query/GetOauthClient RPC method.
type QueryGetOauthClientResponse struct {
	Client *OauthClientInfo `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
}

func (m *QueryGetOauthClientResponse) Reset()         { *m = QueryGetOauthClientResponse{} }
func (m *QueryGetOauthClientResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOauthClientResponse) ProtoMessage()    {}
func (*QueryGetOauthClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{12}
}
func (m *QueryGetOauthClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOauthClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOauthClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOauthClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOauthClientResponse.Merge(m, src)
}
func (m *QueryGetOauthClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOauthClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOauthClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOauthClientResponse proto.InternalMessageInfo

// QueryGetAllOauthClientsRequest is the request type for the
// Query/GetOauthClientsByOwner RPC method.
type QueryGetOauthClientsByOwnerRequest struct {
	// bech32 address
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetOauthClientsByOwnerRequest) Reset()         { *m = QueryGetOauthClientsByOwnerRequest{} }
func (m *QueryGetOauthClientsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOauthClientsByOwnerRequest) ProtoMessage()    {}
func (*QueryGetOauthClientsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{13}
}
func (m *QueryGetOauthClientsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOauthClientsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOauthClientsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOauthClientsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOauthClientsByOwnerRequest.Merge(m, src)
}
func (m *QueryGetOauthClientsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOauthClientsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOauthClientsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOauthClientsByOwnerRequest proto.InternalMessageInfo

// QueryGetAllOauthClientsResponse is the response type for the
// Query/GetOauthClientsByOwner RPC method.
type QueryGetOauthClientsByOwnerResponse struct {
	ClientIds []uint64 `protobuf:"varint,1,rep,packed,name=client_ids,json=clientIds,proto3" json:"client_ids,omitempty"`
}

func (m *QueryGetOauthClientsByOwnerResponse) Reset()         { *m = QueryGetOauthClientsByOwnerResponse{} }
func (m *QueryGetOauthClientsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOauthClientsByOwnerResponse) ProtoMessage()    {}
func (*QueryGetOauthClientsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2358041d6cf0ec36, []int{14}
}
func (m *QueryGetOauthClientsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOauthClientsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOauthClientsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOauthClientsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOauthClientsByOwnerResponse.Merge(m, src)
}
func (m *QueryGetOauthClientsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOauthClientsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOauthClientsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOauthClientsByOwnerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryContractByRouteRequest)(nil), "mythos.websrv.v1.QueryContractByRouteRequest")
	proto.RegisterType((*QueryContractByRouteResponse)(nil), "mythos.websrv.v1.QueryContractByRouteResponse")
	proto.RegisterType((*QueryRouteByContractRequest)(nil), "mythos.websrv.v1.QueryRouteByContractRequest")
	proto.RegisterType((*QueryRouteByContractResponse)(nil), "mythos.websrv.v1.QueryRouteByContractResponse")
	proto.RegisterType((*QueryHttpRequestGet)(nil), "mythos.websrv.v1.QueryHttpRequestGet")
	proto.RegisterType((*QueryHttpResponseGet)(nil), "mythos.websrv.v1.QueryHttpResponseGet")
	proto.RegisterType((*QueryParamsRequest)(nil), "mythos.websrv.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mythos.websrv.v1.QueryParamsResponse")
	proto.RegisterType((*OauthClientInfo)(nil), "mythos.websrv.v1.OauthClientInfo")
	proto.RegisterType((*QueryGetAllOauthClientsRequest)(nil), "mythos.websrv.v1.QueryGetAllOauthClientsRequest")
	proto.RegisterType((*QueryGetAllOauthClientsResponse)(nil), "mythos.websrv.v1.QueryGetAllOauthClientsResponse")
	proto.RegisterType((*QueryGetOauthClientRequest)(nil), "mythos.websrv.v1.QueryGetOauthClientRequest")
	proto.RegisterType((*QueryGetOauthClientResponse)(nil), "mythos.websrv.v1.QueryGetOauthClientResponse")
	proto.RegisterType((*QueryGetOauthClientsByOwnerRequest)(nil), "mythos.websrv.v1.QueryGetOauthClientsByOwnerRequest")
	proto.RegisterType((*QueryGetOauthClientsByOwnerResponse)(nil), "mythos.websrv.v1.QueryGetOauthClientsByOwnerResponse")
}

func init() { proto.RegisterFile("mythos/websrv/v1/query.proto", fileDescriptor_2358041d6cf0ec36) }

var fileDescriptor_2358041d6cf0ec36 = []byte{
	// 876 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xf6, 0x64, 0xbd, 0xde, 0xa4, 0xb2, 0xc2, 0x4b, 0xaf, 0xb5, 0x78, 0x67, 0x93, 0xb1, 0xb7,
	0x17, 0x07, 0xb3, 0xb0, 0xd3, 0xd8, 0xfc, 0x88, 0xe4, 0x16, 0x07, 0x91, 0xe4, 0x80, 0x12, 0xe6,
	0x84, 0xb8, 0x44, 0x6d, 0xbb, 0xb1, 0x2d, 0xd9, 0xd3, 0x93, 0x99, 0xb6, 0x83, 0x65, 0x59, 0x48,
	0x3c, 0x01, 0x88, 0x1b, 0x48, 0x88, 0x23, 0x17, 0xc4, 0x6b, 0xe4, 0x18, 0x89, 0x0b, 0x27, 0x04,
	0x0e, 0x0f, 0xb2, 0x9a, 0xee, 0x1e, 0x67, 0xfc, 0x33, 0xf9, 0xb9, 0x4d, 0x57, 0xd7, 0x57, 0xf5,
	0x55, 0x75, 0xd5, 0x67, 0xc3, 0x46, 0x6f, 0x28, 0xda, 0x3c, 0x20, 0x67, 0xac, 0x1e, 0xf8, 0x03,
	0x32, 0xa8, 0x90, 0xd3, 0x3e, 0xf3, 0x87, 0xb6, 0xe7, 0x73, 0xc1, 0xd1, 0x23, 0x75, 0x6b, 0xab,
	0x5b, 0x7b, 0x50, 0x31, 0x73, 0x2d, 0xde, 0xe2, 0xf2, 0x92, 0x84, 0x5f, 0xca, 0xcf, 0xdc, 0x68,
	0x71, 0xde, 0xea, 0x32, 0x42, 0xbd, 0x0e, 0xa1, 0xae, 0xcb, 0x05, 0x15, 0x1d, 0xee, 0x06, 0xfa,
	0xf6, 0x65, 0x83, 0x07, 0x3d, 0x1e, 0x90, 0x3a, 0x0d, 0x98, 0x0a, 0x4f, 0x06, 0x95, 0x3a, 0x13,
	0xb4, 0x42, 0x3c, 0xda, 0xea, 0xb8, 0xd2, 0x59, 0xfb, 0x6e, 0x2e, 0xf0, 0xf1, 0xa8, 0x4f, 0x7b,
	0x3a, 0x14, 0xae, 0xc0, 0xb3, 0x2f, 0xc3, 0x00, 0x7b, 0xdc, 0x15, 0x3e, 0x6d, 0x88, 0xda, 0xd0,
	0xe1, 0x7d, 0xc1, 0x1c, 0x76, 0xda, 0x67, 0x81, 0x40, 0x08, 0xd2, 0x1e, 0x15, 0xed, 0xbc, 0x51,
	0x34, 0xca, 0x6b, 0x8e, 0xfc, 0xc6, 0x87, 0xb0, 0xb1, 0x1c, 0x12, 0x78, 0xdc, 0x0d, 0x18, 0x7a,
	0x17, 0x1e, 0x35, 0xf4, 0xd5, 0x09, 0x6d, 0x36, 0x7d, 0x16, 0x04, 0x1a, 0x9f, 0x8d, 0xec, 0xbb,
	0xca, 0x8c, 0x0f, 0x74, 0x76, 0x19, 0xa0, 0x36, 0x8d, 0x18, 0x65, 0xbf, 0x43, 0xa4, 0xaa, 0x26,
	0xb5, 0x10, 0x49, 0x93, 0x5a, 0x56, 0xc8, 0xa7, 0xf0, 0x58, 0x62, 0x0e, 0x84, 0xf0, 0x74, 0xca,
	0x7d, 0x26, 0xd0, 0x73, 0x78, 0xd8, 0x16, 0xc2, 0x3b, 0xf1, 0x95, 0x49, 0x42, 0x1e, 0x3a, 0xeb,
	0xed, 0x2b, 0x2f, 0xfc, 0x12, 0x72, 0x31, 0xa4, 0x4a, 0x11, 0x42, 0x11, 0xa4, 0x9b, 0x54, 0x50,
	0x0d, 0x91, 0xdf, 0x38, 0x07, 0x48, 0xfa, 0x1e, 0xcb, 0xb6, 0x47, 0x11, 0xbe, 0xd0, 0xb9, 0x23,
	0xab, 0xa6, 0xf9, 0x09, 0x64, 0xd4, 0xf3, 0xc8, 0x10, 0xeb, 0xd5, 0xbc, 0x3d, 0x3f, 0x30, 0xb6,
	0x42, 0xd4, 0xd2, 0xe7, 0xff, 0x14, 0x52, 0x8e, 0xf6, 0xc6, 0x02, 0xb2, 0x47, 0xb4, 0x2f, 0xda,
	0x7b, 0xdd, 0x0e, 0x73, 0xc5, 0xa1, 0xfb, 0x0d, 0x47, 0xcf, 0x60, 0xad, 0x21, 0x4f, 0x27, 0x9d,
	0xa6, 0x8c, 0x96, 0x76, 0x56, 0x95, 0xe1, 0xb0, 0x89, 0x72, 0x70, 0x9f, 0x9f, 0xb9, 0xcc, 0xcf,
	0xaf, 0xc8, 0x7e, 0xa8, 0x03, 0x7a, 0x02, 0x99, 0x26, 0xef, 0xd1, 0x8e, 0x9b, 0xbf, 0x27, 0xcd,
	0xfa, 0x14, 0xda, 0xbd, 0x7e, 0xbd, 0xdb, 0x69, 0xe4, 0xd3, 0x45, 0xa3, 0xbc, 0xea, 0xe8, 0x13,
	0x6e, 0x83, 0x25, 0x8b, 0xd8, 0x67, 0x62, 0xb7, 0xdb, 0x8d, 0x11, 0x88, 0xca, 0x44, 0x9f, 0x03,
	0x5c, 0x4d, 0xa4, 0xae, 0x69, 0xcb, 0x56, 0xe3, 0x6b, 0x87, 0xe3, 0x6b, 0xab, 0xed, 0xd0, 0xe3,
	0x6b, 0x1f, 0xd3, 0x56, 0x34, 0x7b, 0x4e, 0x0c, 0x89, 0xff, 0x30, 0xa0, 0x90, 0x98, 0x4a, 0xf7,
	0x6e, 0x17, 0x1e, 0xa8, 0xfa, 0xc2, 0xe6, 0xdd, 0x2b, 0xaf, 0x57, 0x9f, 0x2f, 0x36, 0x6f, 0xae,
	0x49, 0xba, 0x8b, 0x11, 0x0e, 0xed, 0xcf, 0xd0, 0x5d, 0x91, 0x74, 0xdf, 0xb9, 0x91, 0xae, 0xca,
	0x3f, 0xc3, 0x77, 0x1b, 0xcc, 0x88, 0x6e, 0x2c, 0x65, 0xd4, 0x95, 0xeb, 0x9e, 0x06, 0x7f, 0xa5,
	0x77, 0x62, 0x1e, 0xaa, 0xab, 0xdc, 0x86, 0x8c, 0x72, 0xd5, 0xdd, 0xbc, 0xb9, 0x48, 0x47, 0x03,
	0xf0, 0x0e, 0xe0, 0x25, 0x91, 0x83, 0xda, 0xf0, 0x28, 0x7c, 0xfd, 0x88, 0xdc, 0x74, 0x34, 0x8c,
	0xd8, 0x68, 0xe0, 0xcf, 0xe0, 0xc5, 0xb5, 0x58, 0xcd, 0x6e, 0x13, 0x60, 0x5a, 0x99, 0x7a, 0x86,
	0xb4, 0xb3, 0x16, 0x95, 0x16, 0x54, 0x7f, 0x5d, 0x85, 0xfb, 0x32, 0x0c, 0xfa, 0x0e, 0x1e, 0x84,
	0xcb, 0x13, 0x2e, 0x4d, 0x69, 0xb1, 0x82, 0x25, 0x6b, 0x69, 0x6e, 0x5d, 0xeb, 0x36, 0xdd, 0x41,
	0x5c, 0xfa, 0xfe, 0xaf, 0xff, 0x7f, 0x5a, 0x29, 0xa0, 0xcd, 0x98, 0xe4, 0xb5, 0x98, 0x20, 0xa3,
	0xf8, 0x52, 0x8f, 0xd1, 0x8f, 0x06, 0x64, 0xe7, 0x14, 0x0c, 0xbd, 0x4a, 0x48, 0xb1, 0x5c, 0x1c,
	0x4d, 0xfb, 0xb6, 0xee, 0x8a, 0x1c, 0x2e, 0x48, 0x66, 0x4f, 0xd1, 0x5b, 0x31, 0x66, 0x7e, 0xe8,
	0x41, 0x46, 0xa1, 0x1e, 0x8d, 0xd1, 0x6f, 0x06, 0x64, 0xe7, 0x04, 0x2c, 0x91, 0xd3, 0x72, 0xc9,
	0x4c, 0xe4, 0x94, 0xa0, 0x8b, 0xd8, 0x96, 0x9c, 0xca, 0x68, 0x2b, 0xc6, 0x29, 0xd2, 0x56, 0x32,
	0x9a, 0x57, 0xdf, 0x31, 0xf2, 0x20, 0xa3, 0x04, 0x08, 0xbd, 0x9d, 0x90, 0x69, 0x46, 0xe7, 0xcc,
	0xd2, 0x0d, 0x5e, 0x9a, 0xc6, 0x53, 0x49, 0xe3, 0x31, 0x7a, 0x73, 0xe1, 0x77, 0x0a, 0xfd, 0x62,
	0x00, 0x5a, 0xdc, 0x7a, 0xf4, 0x41, 0x42, 0xe0, 0x44, 0x2d, 0x32, 0x2b, 0x77, 0x40, 0x68, 0x5a,
	0x45, 0x49, 0xcb, 0x44, 0xf9, 0x18, 0x2d, 0x1e, 0x3a, 0x92, 0x48, 0x31, 0x7e, 0x36, 0xe0, 0x8d,
	0xd9, 0x9d, 0x40, 0xef, 0x27, 0xe7, 0x59, 0xd4, 0x02, 0xf3, 0xd5, 0x2d, 0xbd, 0x35, 0xa3, 0xf7,
	0x24, 0xa3, 0x12, 0x7a, 0x91, 0xc0, 0x88, 0x8c, 0xa6, 0xfb, 0x37, 0x46, 0x7f, 0x1a, 0xf0, 0x64,
	0xf9, 0xc2, 0xa2, 0x8f, 0x6e, 0x95, 0x76, 0x4e, 0x1b, 0xcc, 0x8f, 0xef, 0x88, 0xd2, 0xa4, 0xcb,
	0x92, 0x34, 0x46, 0xc5, 0xa4, 0x36, 0x92, 0x91, 0x54, 0x99, 0x71, 0x6d, 0xe7, 0xfc, 0x3f, 0x2b,
	0xf5, 0xfb, 0xc4, 0x4a, 0x9d, 0x4f, 0x2c, 0xe3, 0x62, 0x62, 0x19, 0xff, 0x4e, 0x2c, 0xe3, 0x87,
	0x4b, 0x2b, 0x75, 0x71, 0x69, 0xa5, 0xfe, 0xbe, 0xb4, 0x52, 0x5f, 0xe7, 0xf5, 0xff, 0x99, 0x41,
	0x85, 0x7c, 0x1b, 0x85, 0x13, 0x43, 0x8f, 0x05, 0xf5, 0x8c, 0xfc, 0x47, 0xf3, 0xe1, 0xeb, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x88, 0x9b, 0xd1, 0xfc, 0x82, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// HttpGet makes a get request to the webserver
	HttpGet(ctx context.Context, in *QueryHttpRequestGet, opts ...grpc.CallOption) (*QueryHttpResponseGet, error)
	// ContractByRoute gets the contract controlling a given route
	ContractByRoute(ctx context.Context, in *QueryContractByRouteRequest, opts ...grpc.CallOption) (*QueryContractByRouteResponse, error)
	// RouteByContract gets the route controlled by a given contract
	RouteByContract(ctx context.Context, in *QueryRouteByContractRequest, opts ...grpc.CallOption) (*QueryRouteByContractResponse, error)
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// GetAllClients gets all the registered client apps for the oauth service
	GetAllOauthClients(ctx context.Context, in *QueryGetAllOauthClientsRequest, opts ...grpc.CallOption) (*QueryGetAllOauthClientsResponse, error)
	// GetOauthClient gets the registered oauth client by client id
	GetOauthClient(ctx context.Context, in *QueryGetOauthClientRequest, opts ...grpc.CallOption) (*QueryGetOauthClientResponse, error)
	// GetOauthClientsByOwner gets all the registered oauth client by an owner address
	GetOauthClientsByOwner(ctx context.Context, in *QueryGetOauthClientsByOwnerRequest, opts ...grpc.CallOption) (*QueryGetOauthClientsByOwnerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) HttpGet(ctx context.Context, in *QueryHttpRequestGet, opts ...grpc.CallOption) (*QueryHttpResponseGet, error) {
	out := new(QueryHttpResponseGet)
	err := c.cc.Invoke(ctx, "/mythos.websrv.v1.Query/HttpGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractByRoute(ctx context.Context, in *QueryContractByRouteRequest, opts ...grpc.CallOption) (*QueryContractByRouteResponse, error) {
	out := new(QueryContractByRouteResponse)
	err := c.cc.Invoke(ctx, "/mythos.websrv.v1.Query/ContractByRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RouteByContract(ctx context.Context, in *QueryRouteByContractRequest, opts ...grpc.CallOption) (*QueryRouteByContractResponse, error) {
	out := new(QueryRouteByContractResponse)
	err := c.cc.Invoke(ctx, "/mythos.websrv.v1.Query/RouteByContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mythos.websrv.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllOauthClients(ctx context.Context, in *QueryGetAllOauthClientsRequest, opts ...grpc.CallOption) (*QueryGetAllOauthClientsResponse, error) {
	out := new(QueryGetAllOauthClientsResponse)
	err := c.cc.Invoke(ctx, "/mythos.websrv.v1.Query/GetAllOauthClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOauthClient(ctx context.Context, in *QueryGetOauthClientRequest, opts ...grpc.CallOption) (*QueryGetOauthClientResponse, error) {
	out := new(QueryGetOauthClientResponse)
	err := c.cc.Invoke(ctx, "/mythos.websrv.v1.Query/GetOauthClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOauthClientsByOwner(ctx context.Context, in *QueryGetOauthClientsByOwnerRequest, opts ...grpc.CallOption) (*QueryGetOauthClientsByOwnerResponse, error) {
	out := new(QueryGetOauthClientsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/mythos.websrv.v1.Query/GetOauthClientsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// HttpGet makes a get request to the webserver
	HttpGet(context.Context, *QueryHttpRequestGet) (*QueryHttpResponseGet, error)
	// ContractByRoute gets the contract controlling a given route
	ContractByRoute(context.Context, *QueryContractByRouteRequest) (*QueryContractByRouteResponse, error)
	// RouteByContract gets the route controlled by a given contract
	RouteByContract(context.Context, *QueryRouteByContractRequest) (*QueryRouteByContractResponse, error)
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// GetAllClients gets all the registered client apps for the oauth service
	GetAllOauthClients(context.Context, *QueryGetAllOauthClientsRequest) (*QueryGetAllOauthClientsResponse, error)
	// GetOauthClient gets the registered oauth client by client id
	GetOauthClient(context.Context, *QueryGetOauthClientRequest) (*QueryGetOauthClientResponse, error)
	// GetOauthClientsByOwner gets all the registered oauth client by an owner address
	GetOauthClientsByOwner(context.Context, *QueryGetOauthClientsByOwnerRequest) (*QueryGetOauthClientsByOwnerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) HttpGet(ctx context.Context, req *QueryHttpRequestGet) (*QueryHttpResponseGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpGet not implemented")
}
func (*UnimplementedQueryServer) ContractByRoute(ctx context.Context, req *QueryContractByRouteRequest) (*QueryContractByRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractByRoute not implemented")
}
func (*UnimplementedQueryServer) RouteByContract(ctx context.Context, req *QueryRouteByContractRequest) (*QueryRouteByContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteByContract not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetAllOauthClients(ctx context.Context, req *QueryGetAllOauthClientsRequest) (*QueryGetAllOauthClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOauthClients not implemented")
}
func (*UnimplementedQueryServer) GetOauthClient(ctx context.Context, req *QueryGetOauthClientRequest) (*QueryGetOauthClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthClient not implemented")
}
func (*UnimplementedQueryServer) GetOauthClientsByOwner(ctx context.Context, req *QueryGetOauthClientsByOwnerRequest) (*QueryGetOauthClientsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthClientsByOwner not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_HttpGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHttpRequestGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HttpGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.websrv.v1.Query/HttpGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HttpGet(ctx, req.(*QueryHttpRequestGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractByRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryContractByRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractByRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.websrv.v1.Query/ContractByRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractByRoute(ctx, req.(*QueryContractByRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RouteByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRouteByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RouteByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.websrv.v1.Query/RouteByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RouteByContract(ctx, req.(*QueryRouteByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.websrv.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllOauthClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllOauthClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllOauthClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.websrv.v1.Query/GetAllOauthClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllOauthClients(ctx, req.(*QueryGetAllOauthClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOauthClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOauthClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOauthClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.websrv.v1.Query/GetOauthClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOauthClient(ctx, req.(*QueryGetOauthClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOauthClientsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOauthClientsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOauthClientsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.websrv.v1.Query/GetOauthClientsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOauthClientsByOwner(ctx, req.(*QueryGetOauthClientsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mythos.websrv.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HttpGet",
			Handler:    _Query_HttpGet_Handler,
		},
		{
			MethodName: "ContractByRoute",
			Handler:    _Query_ContractByRoute_Handler,
		},
		{
			MethodName: "RouteByContract",
			Handler:    _Query_RouteByContract_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetAllOauthClients",
			Handler:    _Query_GetAllOauthClients_Handler,
		},
		{
			MethodName: "GetOauthClient",
			Handler:    _Query_GetOauthClient_Handler,
		},
		{
			MethodName: "GetOauthClientsByOwner",
			Handler:    _Query_GetOauthClientsByOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mythos/websrv/v1/query.proto",
}

func (m *QueryContractByRouteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractByRouteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractByRouteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractByRouteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractByRouteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractByRouteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRouteByContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRouteByContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRouteByContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRouteByContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRouteByContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRouteByContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHttpRequestGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHttpRequestGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHttpRequestGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HttpRequest) > 0 {
		i -= len(m.HttpRequest)
		copy(dAtA[i:], m.HttpRequest)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.HttpRequest)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHttpResponseGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHttpResponseGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHttpResponseGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OauthClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OauthClientInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OauthClientInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Public {
		i--
		if m.Public {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClientId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ClientId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllOauthClientsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllOauthClientsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllOauthClientsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllOauthClientsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllOauthClientsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllOauthClientsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Clients) > 0 {
		for iNdEx := len(m.Clients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOauthClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOauthClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOauthClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ClientId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOauthClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOauthClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOauthClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOauthClientsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOauthClientsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOauthClientsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOauthClientsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOauthClientsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOauthClientsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientIds) > 0 {
		dAtA6 := make([]byte, len(m.ClientIds)*10)
		var j5 int
		for _, num := range m.ClientIds {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintQuery(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryContractByRouteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryContractByRouteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRouteByContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRouteByContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHttpRequestGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HttpRequest)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHttpResponseGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *OauthClientInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientId != 0 {
		n += 1 + sovQuery(uint64(m.ClientId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Public {
		n += 2
	}
	return n
}

func (m *QueryGetAllOauthClientsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllOauthClientsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOauthClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientId != 0 {
		n += 1 + sovQuery(uint64(m.ClientId))
	}
	return n
}

func (m *QueryGetOauthClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOauthClientsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOauthClientsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClientIds) > 0 {
		l = 0
		for _, e := range m.ClientIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryContractByRouteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractByRouteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractByRouteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractByRouteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractByRouteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractByRouteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRouteByContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRouteByContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRouteByContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRouteByContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRouteByContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRouteByContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHttpRequestGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHttpRequestGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHttpRequestGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRequest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpRequest = append(m.HttpRequest[:0], dAtA[iNdEx:postIndex]...)
			if m.HttpRequest == nil {
				m.HttpRequest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHttpResponseGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHttpResponseGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHttpResponseGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OauthClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OauthClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OauthClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Public = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllOauthClientsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllOauthClientsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllOauthClientsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllOauthClientsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllOauthClientsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllOauthClientsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, OauthClientInfo{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOauthClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOauthClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOauthClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOauthClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOauthClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOauthClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &OauthClientInfo{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOauthClientsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOauthClientsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOauthClientsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOauthClientsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOauthClientsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOauthClientsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ClientIds = append(m.ClientIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ClientIds) == 0 {
					m.ClientIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ClientIds = append(m.ClientIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
