// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/cosmosmod/v1/bank_genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BankGenesisState defines the bank module's genesis state.
type BankGenesisState struct {
	// params defines all the parameters of the module.
	Params types.Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// balances is an array containing the balances of all the accounts.
	Balances []types.Balance `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances"`
	// supply represents the total supply. If it is left empty, then supply will be calculated based on the provided
	// balances. Otherwise, it will be used to validate that the sum of the balances equals this amount.
	Supply github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=supply,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"supply"`
	// denom_metadata defines the metadata of the different coins.
	DenomInfo []DenomDeploymentInfo `protobuf:"bytes,4,rep,name=denom_info,json=denomInfo,proto3" json:"denom_info"`
	// send_enabled defines the denoms where send is enabled or disabled.
	//
	// Since: cosmos-sdk 0.47
	SendEnabled []types.SendEnabled `protobuf:"bytes,5,rep,name=send_enabled,json=sendEnabled,proto3" json:"send_enabled"`
}

func (m *BankGenesisState) Reset()         { *m = BankGenesisState{} }
func (m *BankGenesisState) String() string { return proto.CompactTextString(m) }
func (*BankGenesisState) ProtoMessage()    {}
func (*BankGenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf32c2ffabd4c1a7, []int{0}
}
func (m *BankGenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BankGenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BankGenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BankGenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankGenesisState.Merge(m, src)
}
func (m *BankGenesisState) XXX_Size() int {
	return m.Size()
}
func (m *BankGenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_BankGenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_BankGenesisState proto.InternalMessageInfo

func (m *BankGenesisState) GetParams() types.Params {
	if m != nil {
		return m.Params
	}
	return types.Params{}
}

func (m *BankGenesisState) GetBalances() []types.Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *BankGenesisState) GetSupply() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Supply
	}
	return nil
}

func (m *BankGenesisState) GetDenomInfo() []DenomDeploymentInfo {
	if m != nil {
		return m.DenomInfo
	}
	return nil
}

func (m *BankGenesisState) GetSendEnabled() []types.SendEnabled {
	if m != nil {
		return m.SendEnabled
	}
	return nil
}

// Metadata represents a struct that describes
// a basic token.
type DenomDeploymentInfo struct {
	Metadata  types.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
	CodeId    uint64         `protobuf:"varint,2,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	Admins    []string       `protobuf:"bytes,3,rep,name=admins,proto3" json:"admins,omitempty"`
	Minters   []string       `protobuf:"bytes,4,rep,name=minters,proto3" json:"minters,omitempty"`
	Contract  string         `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract,omitempty"`
	BaseDenom string         `protobuf:"bytes,6,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
}

func (m *DenomDeploymentInfo) Reset()         { *m = DenomDeploymentInfo{} }
func (m *DenomDeploymentInfo) String() string { return proto.CompactTextString(m) }
func (*DenomDeploymentInfo) ProtoMessage()    {}
func (*DenomDeploymentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf32c2ffabd4c1a7, []int{1}
}
func (m *DenomDeploymentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomDeploymentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomDeploymentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomDeploymentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomDeploymentInfo.Merge(m, src)
}
func (m *DenomDeploymentInfo) XXX_Size() int {
	return m.Size()
}
func (m *DenomDeploymentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomDeploymentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DenomDeploymentInfo proto.InternalMessageInfo

func (m *DenomDeploymentInfo) GetMetadata() types.Metadata {
	if m != nil {
		return m.Metadata
	}
	return types.Metadata{}
}

func (m *DenomDeploymentInfo) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

func (m *DenomDeploymentInfo) GetAdmins() []string {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *DenomDeploymentInfo) GetMinters() []string {
	if m != nil {
		return m.Minters
	}
	return nil
}

func (m *DenomDeploymentInfo) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *DenomDeploymentInfo) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*BankGenesisState)(nil), "mythos.cosmosmod.v1.BankGenesisState")
	proto.RegisterType((*DenomDeploymentInfo)(nil), "mythos.cosmosmod.v1.DenomDeploymentInfo")
}

func init() {
	proto.RegisterFile("mythos/cosmosmod/v1/bank_genesis.proto", fileDescriptor_bf32c2ffabd4c1a7)
}

var fileDescriptor_bf32c2ffabd4c1a7 = []byte{
	// 574 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xcd, 0x6e, 0xd4, 0x3c,
	0x14, 0x9d, 0xf4, 0x27, 0x6d, 0x3c, 0x5d, 0x7c, 0x9f, 0x5b, 0x41, 0x5a, 0x68, 0x3a, 0x74, 0x81,
	0xa2, 0x4a, 0x4d, 0x34, 0x03, 0x6b, 0x24, 0xd2, 0x01, 0x54, 0x09, 0x10, 0xca, 0xec, 0xd8, 0x44,
	0x4e, 0xec, 0xa6, 0xd1, 0x24, 0x76, 0x14, 0xbb, 0x43, 0xf3, 0x16, 0xac, 0x79, 0x02, 0xc4, 0xaa,
	0x0b, 0xc4, 0x33, 0x74, 0x59, 0xb1, 0x62, 0x05, 0x68, 0x66, 0xd1, 0x87, 0x60, 0x83, 0xec, 0xb8,
	0xd3, 0xa9, 0x88, 0x14, 0x25, 0xb9, 0xf7, 0x9e, 0x73, 0xae, 0x7d, 0xae, 0x0d, 0x1e, 0x17, 0xb5,
	0x38, 0x65, 0xdc, 0x4f, 0x18, 0x2f, 0xe4, 0x83, 0xfd, 0x49, 0xdf, 0x8f, 0x11, 0x1d, 0x47, 0x29,
	0xa1, 0x84, 0x67, 0xdc, 0x2b, 0x2b, 0x26, 0x18, 0xdc, 0x6c, 0x70, 0xde, 0x1c, 0xe7, 0x4d, 0xfa,
	0x3b, 0x5b, 0x29, 0x4b, 0x99, 0xaa, 0xfb, 0xf2, 0xaf, 0x81, 0xee, 0xfc, 0x8f, 0x8a, 0x8c, 0x32,
	0x5f, 0xbd, 0x75, 0x6a, 0xbb, 0xa1, 0x45, 0x0d, 0xb6, 0x09, 0x74, 0xc9, 0x69, 0x22, 0x3f, 0x46,
	0x9c, 0xf8, 0x93, 0x7e, 0x4c, 0x04, 0xea, 0xfb, 0x09, 0xcb, 0xe8, 0x3f, 0x75, 0x3a, 0x9e, 0xd7,
	0x65, 0xa0, 0xeb, 0x8f, 0xda, 0xea, 0x77, 0xd6, 0xbe, 0xff, 0x6d, 0x19, 0xfc, 0x17, 0x20, 0x3a,
	0x7e, 0xd5, 0x64, 0x47, 0x02, 0x09, 0x02, 0x9f, 0x01, 0xb3, 0x44, 0x15, 0x2a, 0xb8, 0x6d, 0xf4,
	0x0c, 0xb7, 0x3b, 0x78, 0xa0, 0xb7, 0xe6, 0x29, 0x6d, 0x2d, 0xe4, 0xbd, 0x53, 0x90, 0xc0, 0xba,
	0xfc, 0xb9, 0xd7, 0xf9, 0x7c, 0x7d, 0x71, 0x60, 0x84, 0x9a, 0x05, 0x8f, 0xc0, 0x7a, 0x8c, 0x72,
	0x44, 0x13, 0xc2, 0xed, 0xa5, 0xde, 0xb2, 0xdb, 0x1d, 0x3c, 0x6c, 0x55, 0x08, 0x1a, 0xd0, 0xa2,
	0xc4, 0x9c, 0x08, 0x6b, 0x60, 0xf2, 0xb3, 0xb2, 0xcc, 0x6b, 0x7b, 0x59, 0x49, 0x6c, 0xdf, 0x4a,
	0x70, 0x32, 0x97, 0x38, 0x62, 0x19, 0x0d, 0x5e, 0x4a, 0xfe, 0x97, 0x5f, 0x7b, 0x6e, 0x9a, 0x89,
	0xd3, 0xb3, 0xd8, 0x4b, 0x58, 0xa1, 0x8d, 0xd4, 0x9f, 0x43, 0x8e, 0xc7, 0xbe, 0xa8, 0x4b, 0xc2,
	0x15, 0x81, 0x7f, 0xba, 0xbe, 0x38, 0xd8, 0xc8, 0x49, 0x8a, 0x92, 0x3a, 0x92, 0x7e, 0x72, 0xbd,
	0xfe, 0xa6, 0x21, 0x0c, 0x01, 0xc0, 0x84, 0xb2, 0x22, 0xca, 0xe8, 0x09, 0xb3, 0x57, 0x54, 0x7b,
	0xd7, 0x6b, 0x99, 0xb2, 0x37, 0x94, 0xb0, 0x21, 0x29, 0x73, 0x56, 0x17, 0x84, 0x8a, 0x63, 0x7a,
	0xc2, 0x16, 0x77, 0x63, 0x29, 0x19, 0x99, 0x85, 0x6f, 0xc1, 0x06, 0x27, 0x14, 0x47, 0x84, 0xa2,
	0x38, 0x27, 0xd8, 0x5e, 0x55, 0xaa, 0xbd, 0x56, 0x5f, 0x46, 0x84, 0xe2, 0x17, 0x0d, 0x6e, 0x51,
	0xad, 0xcb, 0x6f, 0xf3, 0xfb, 0x7f, 0x0c, 0xb0, 0xd9, 0xd2, 0x1d, 0x0e, 0xc1, 0x7a, 0x41, 0x04,
	0xc2, 0x48, 0x20, 0x3d, 0xbd, 0xdd, 0xd6, 0x1e, 0x6f, 0x34, 0xe8, 0x8e, 0xf9, 0x37, 0x4c, 0x78,
	0x1f, 0xac, 0x25, 0x0c, 0x93, 0x28, 0xc3, 0xf6, 0x52, 0xcf, 0x70, 0x57, 0x42, 0x53, 0x86, 0xc7,
	0x18, 0xde, 0x03, 0x26, 0xc2, 0x45, 0x46, 0xb9, 0x9a, 0x8a, 0x15, 0xea, 0x08, 0xda, 0x60, 0xad,
	0xc8, 0xa8, 0x20, 0x15, 0x57, 0x7e, 0x59, 0xe1, 0x4d, 0x08, 0x9f, 0x82, 0xf5, 0x84, 0x51, 0x51,
	0xa1, 0x44, 0xd8, 0xab, 0x3d, 0xc3, 0xb5, 0x02, 0xfb, 0xfb, 0xd7, 0xc3, 0x2d, 0xbd, 0xa6, 0xe7,
	0x18, 0x57, 0x84, 0xf3, 0x91, 0xa8, 0x32, 0x9a, 0x86, 0x73, 0x24, 0xdc, 0x05, 0x40, 0xce, 0x39,
	0x52, 0x06, 0xda, 0xa6, 0xe4, 0x85, 0x96, 0xcc, 0xa8, 0x3d, 0x07, 0xaf, 0x2f, 0xa7, 0x8e, 0x71,
	0x35, 0x75, 0x8c, 0xdf, 0x53, 0xc7, 0xf8, 0x38, 0x73, 0x3a, 0x57, 0x33, 0xa7, 0xf3, 0x63, 0xe6,
	0x74, 0xde, 0x0f, 0x16, 0xce, 0x40, 0xce, 0x2a, 0x82, 0x11, 0x45, 0x49, 0x56, 0x71, 0x41, 0x90,
	0xff, 0x01, 0xf1, 0xe2, 0xdc, 0x3f, 0x5f, 0xb8, 0xd0, 0xea, 0x4c, 0xc4, 0xa6, 0xba, 0x0b, 0x4f,
	0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x73, 0x47, 0xd1, 0xf1, 0x03, 0x00, 0x00,
}

func (m *BankGenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BankGenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BankGenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SendEnabled) > 0 {
		for iNdEx := len(m.SendEnabled) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SendEnabled[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBankGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DenomInfo) > 0 {
		for iNdEx := len(m.DenomInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DenomInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBankGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Supply) > 0 {
		for iNdEx := len(m.Supply) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Supply[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBankGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBankGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBankGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DenomDeploymentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomDeploymentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomDeploymentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintBankGenesis(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintBankGenesis(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Minters) > 0 {
		for iNdEx := len(m.Minters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Minters[iNdEx])
			copy(dAtA[i:], m.Minters[iNdEx])
			i = encodeVarintBankGenesis(dAtA, i, uint64(len(m.Minters[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Admins[iNdEx])
			copy(dAtA[i:], m.Admins[iNdEx])
			i = encodeVarintBankGenesis(dAtA, i, uint64(len(m.Admins[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CodeId != 0 {
		i = encodeVarintBankGenesis(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBankGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintBankGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovBankGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BankGenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovBankGenesis(uint64(l))
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovBankGenesis(uint64(l))
		}
	}
	if len(m.Supply) > 0 {
		for _, e := range m.Supply {
			l = e.Size()
			n += 1 + l + sovBankGenesis(uint64(l))
		}
	}
	if len(m.DenomInfo) > 0 {
		for _, e := range m.DenomInfo {
			l = e.Size()
			n += 1 + l + sovBankGenesis(uint64(l))
		}
	}
	if len(m.SendEnabled) > 0 {
		for _, e := range m.SendEnabled {
			l = e.Size()
			n += 1 + l + sovBankGenesis(uint64(l))
		}
	}
	return n
}

func (m *DenomDeploymentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovBankGenesis(uint64(l))
	if m.CodeId != 0 {
		n += 1 + sovBankGenesis(uint64(m.CodeId))
	}
	if len(m.Admins) > 0 {
		for _, s := range m.Admins {
			l = len(s)
			n += 1 + l + sovBankGenesis(uint64(l))
		}
	}
	if len(m.Minters) > 0 {
		for _, s := range m.Minters {
			l = len(s)
			n += 1 + l + sovBankGenesis(uint64(l))
		}
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovBankGenesis(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovBankGenesis(uint64(l))
	}
	return n
}

func sovBankGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBankGenesis(x uint64) (n int) {
	return sovBankGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BankGenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBankGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BankGenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BankGenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBankGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBankGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBankGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBankGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, types.Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBankGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBankGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supply = append(m.Supply, types1.Coin{})
			if err := m.Supply[len(m.Supply)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBankGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBankGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomInfo = append(m.DenomInfo, DenomDeploymentInfo{})
			if err := m.DenomInfo[len(m.DenomInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBankGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBankGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendEnabled = append(m.SendEnabled, types.SendEnabled{})
			if err := m.SendEnabled[len(m.SendEnabled)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBankGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBankGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomDeploymentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBankGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomDeploymentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomDeploymentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBankGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBankGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBankGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBankGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBankGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBankGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minters = append(m.Minters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBankGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBankGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBankGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBankGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBankGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBankGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBankGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBankGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBankGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBankGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBankGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBankGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBankGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBankGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBankGenesis = fmt.Errorf("proto: unexpected end of group")
)
