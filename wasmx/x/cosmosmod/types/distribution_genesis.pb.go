// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/cosmosmod/v1/distribution_genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types "github.com/cosmos/cosmos-sdk/x/distribution/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DistributionGenesisState defines the distribution module's genesis state.
type DistributionGenesisState struct {
	// params defines all the parameters of the module.
	Params types.Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// fee_pool defines the fee pool at genesis.
	FeePool types.FeePool `protobuf:"bytes,2,opt,name=fee_pool,json=feePool,proto3" json:"fee_pool"`
	// fee_pool defines the delegator withdraw infos at genesis.
	DelegatorWithdrawInfos []types.DelegatorWithdrawInfo `protobuf:"bytes,3,rep,name=delegator_withdraw_infos,json=delegatorWithdrawInfos,proto3" json:"delegator_withdraw_infos"`
	// fee_pool defines the previous proposer at genesis.
	PreviousProposer string `protobuf:"bytes,4,opt,name=previous_proposer,json=previousProposer,proto3" json:"previous_proposer,omitempty"`
	// fee_pool defines the outstanding rewards of all validators at genesis.
	OutstandingRewards []types.ValidatorOutstandingRewardsRecord `protobuf:"bytes,5,rep,name=outstanding_rewards,json=outstandingRewards,proto3" json:"outstanding_rewards"`
	// fee_pool defines the accumulated commissions of all validators at genesis.
	ValidatorAccumulatedCommissions []types.ValidatorAccumulatedCommissionRecord `protobuf:"bytes,6,rep,name=validator_accumulated_commissions,json=validatorAccumulatedCommissions,proto3" json:"validator_accumulated_commissions"`
	// fee_pool defines the historical rewards of all validators at genesis.
	ValidatorHistoricalRewards []types.ValidatorHistoricalRewardsRecord `protobuf:"bytes,7,rep,name=validator_historical_rewards,json=validatorHistoricalRewards,proto3" json:"validator_historical_rewards"`
	// fee_pool defines the current rewards of all validators at genesis.
	ValidatorCurrentRewards []types.ValidatorCurrentRewardsRecord `protobuf:"bytes,8,rep,name=validator_current_rewards,json=validatorCurrentRewards,proto3" json:"validator_current_rewards"`
	// fee_pool defines the delegator starting infos at genesis.
	DelegatorStartingInfos []types.DelegatorStartingInfoRecord `protobuf:"bytes,9,rep,name=delegator_starting_infos,json=delegatorStartingInfos,proto3" json:"delegator_starting_infos"`
	// fee_pool defines the validator slash events at genesis.
	ValidatorSlashEvents []types.ValidatorSlashEventRecord `protobuf:"bytes,10,rep,name=validator_slash_events,json=validatorSlashEvents,proto3" json:"validator_slash_events"`
	BaseDenom            string                            `protobuf:"bytes,11,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	RewardsDenom         string                            `protobuf:"bytes,12,opt,name=rewards_denom,json=rewardsDenom,proto3" json:"rewards_denom,omitempty"`
}

func (m *DistributionGenesisState) Reset()         { *m = DistributionGenesisState{} }
func (m *DistributionGenesisState) String() string { return proto.CompactTextString(m) }
func (*DistributionGenesisState) ProtoMessage()    {}
func (*DistributionGenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_93cc1512ae45c982, []int{0}
}
func (m *DistributionGenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionGenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionGenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionGenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionGenesisState.Merge(m, src)
}
func (m *DistributionGenesisState) XXX_Size() int {
	return m.Size()
}
func (m *DistributionGenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionGenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionGenesisState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DistributionGenesisState)(nil), "mythos.cosmosmod.v1.DistributionGenesisState")
}

func init() {
	proto.RegisterFile("mythos/cosmosmod/v1/distribution_genesis.proto", fileDescriptor_93cc1512ae45c982)
}

var fileDescriptor_93cc1512ae45c982 = []byte{
	// 691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xcf, 0x6b, 0x13, 0x4d,
	0x18, 0xc7, 0xb3, 0x6f, 0xdf, 0xb7, 0x6d, 0xa6, 0x7d, 0xe1, 0xed, 0xb4, 0xf4, 0xdd, 0x16, 0x4d,
	0xaa, 0xf5, 0x50, 0x05, 0xb3, 0x24, 0x82, 0x48, 0x41, 0xa1, 0x3f, 0xfd, 0x81, 0x60, 0x49, 0x40,
	0xc1, 0xcb, 0x32, 0xd9, 0x99, 0x24, 0x03, 0xbb, 0x33, 0x61, 0x9e, 0xd9, 0x4d, 0x2b, 0x78, 0xf0,
	0x26, 0x9e, 0x3c, 0x7a, 0xec, 0xd1, 0xa3, 0x07, 0xff, 0x88, 0x1e, 0x8b, 0x27, 0x0f, 0x22, 0xd2,
	0x1e, 0xf4, 0xcf, 0x90, 0x9d, 0x9d, 0x26, 0x5b, 0xd3, 0x86, 0x40, 0x08, 0xd9, 0x67, 0x3e, 0xdf,
	0xef, 0xf3, 0x9d, 0xd9, 0x27, 0xbb, 0xa8, 0x12, 0x1d, 0xe8, 0x8e, 0x04, 0x2f, 0x90, 0x10, 0xa5,
	0x1f, 0xea, 0x25, 0x55, 0x8f, 0x72, 0xd0, 0x8a, 0x37, 0x63, 0xcd, 0xa5, 0xf0, 0xdb, 0x4c, 0x30,
	0xe0, 0x50, 0xe9, 0x2a, 0xa9, 0x25, 0x9e, 0xcf, 0xf8, 0x4a, 0x9f, 0xaf, 0x24, 0xd5, 0xe5, 0x85,
	0xb6, 0x6c, 0x4b, 0xb3, 0xee, 0xa5, 0xbf, 0x32, 0x74, 0x79, 0x8e, 0x44, 0x5c, 0x48, 0xcf, 0x7c,
	0xdb, 0xd2, 0x52, 0x26, 0xf3, 0x33, 0x36, 0xbb, 0xb0, 0x4b, 0xa5, 0xec, 0xca, 0x6b, 0x12, 0x60,
	0x5e, 0x52, 0x6d, 0x32, 0x4d, 0xaa, 0x5e, 0x20, 0xb9, 0xb0, 0xeb, 0xb6, 0xe3, 0xb9, 0x6c, 0x7d,
	0x2e, 0x5f, 0xb4, 0xfc, 0xcd, 0x51, 0xfc, 0xb9, 0x3d, 0x5d, 0xff, 0x56, 0x44, 0xee, 0x76, 0x0e,
	0x7b, 0x98, 0xad, 0x36, 0x34, 0xd1, 0x0c, 0xef, 0xa2, 0xc9, 0x2e, 0x51, 0x24, 0x02, 0xd7, 0x59,
	0x71, 0xd6, 0x66, 0x6a, 0xab, 0x36, 0x48, 0xe5, 0x5c, 0x4f, 0x6b, 0x5c, 0xd9, 0x33, 0xe8, 0x66,
	0xf1, 0xe8, 0x7b, 0xb9, 0xf0, 0xf1, 0xe7, 0xa7, 0x5b, 0x4e, 0xdd, 0xaa, 0xf1, 0x13, 0x34, 0xdd,
	0x62, 0xcc, 0xef, 0x4a, 0x19, 0xba, 0x7f, 0x19, 0xa7, 0x1b, 0x23, 0x9d, 0x76, 0x19, 0xdb, 0x93,
	0x32, 0xcc, 0x5b, 0x4d, 0xb5, 0xb2, 0x1a, 0xee, 0x21, 0x97, 0xb2, 0x90, 0xb5, 0x89, 0x96, 0xca,
	0xef, 0x71, 0xdd, 0xa1, 0x8a, 0xf4, 0x7c, 0x2e, 0x5a, 0x12, 0xdc, 0x89, 0x95, 0x89, 0xb5, 0x99,
	0x5a, 0x6d, 0xa4, 0xf7, 0xf6, 0x99, 0xf8, 0x85, 0xd5, 0x3e, 0x16, 0x2d, 0x99, 0xef, 0xb4, 0x48,
	0x2f, 0x22, 0x00, 0xef, 0xa0, 0xb9, 0xae, 0x62, 0x09, 0x97, 0xb1, 0xb9, 0x87, 0x5d, 0x09, 0x4c,
	0xb9, 0x7f, 0xaf, 0x38, 0x6b, 0xc5, 0x4d, 0xf7, 0xcb, 0xe7, 0xdb, 0x0b, 0xb6, 0xe9, 0x06, 0xa5,
	0x8a, 0x01, 0x34, 0xb4, 0xe2, 0xa2, 0x5d, 0xff, 0xef, 0x4c, 0xb2, 0x67, 0x15, 0xf8, 0x15, 0x9a,
	0x97, 0xb1, 0x06, 0x4d, 0x04, 0xe5, 0xa2, 0xed, 0x2b, 0xd6, 0x23, 0x8a, 0x82, 0xfb, 0x8f, 0x89,
	0xfe, 0x60, 0x64, 0xf4, 0xe7, 0x24, 0xe4, 0x34, 0x0d, 0xf6, 0x6c, 0x60, 0x50, 0xcf, 0xf4, 0x75,
	0x16, 0x48, 0x45, 0xf3, 0xdb, 0xc0, 0x72, 0x08, 0xc2, 0x1f, 0x1c, 0x74, 0x2d, 0x39, 0x33, 0xf1,
	0x49, 0x10, 0xc4, 0x51, 0x1c, 0x12, 0xcd, 0xa8, 0x1f, 0xc8, 0x28, 0xe2, 0x00, 0x5c, 0x0a, 0x70,
	0x27, 0x4d, 0x94, 0x8d, 0xf1, 0xa2, 0x6c, 0x0c, 0x4c, 0xb6, 0xfa, 0x1e, 0xc3, 0x69, 0xca, 0xc9,
	0x48, 0x01, 0xe0, 0x77, 0x0e, 0xba, 0x32, 0x88, 0xd6, 0xe1, 0xa0, 0xa5, 0xe2, 0x01, 0x09, 0xfb,
	0x07, 0x34, 0x65, 0x52, 0xdd, 0x1f, 0x2f, 0xd5, 0xa3, 0xbe, 0xfe, 0xd2, 0xf3, 0x59, 0x4e, 0x2e,
	0x85, 0xf1, 0x1b, 0x07, 0x2d, 0x0d, 0xc2, 0x04, 0xb1, 0x52, 0x4c, 0xe8, 0x7e, 0x92, 0x69, 0x93,
	0x64, 0x7d, 0xbc, 0x24, 0x5b, 0x99, 0xf8, 0xd2, 0x18, 0xff, 0x27, 0x17, 0x93, 0xf8, 0x75, 0x7e,
	0xce, 0x41, 0x13, 0xa5, 0xd3, 0x71, 0xc9, 0xe6, 0xbc, 0x68, 0x12, 0xdc, 0x1b, 0x6f, 0xce, 0x1b,
	0x56, 0x9b, 0x4e, 0xf1, 0x70, 0xff, 0xc1, 0xb4, 0xe7, 0x39, 0xc0, 0x3d, 0xb4, 0x38, 0x38, 0x01,
	0x08, 0x09, 0x74, 0x7c, 0x96, 0x30, 0xa1, 0xc1, 0x45, 0xa6, 0xf9, 0xdd, 0xf1, 0xb6, 0xdf, 0x48,
	0x95, 0x3b, 0x89, 0xd9, 0xd7, 0x9f, 0xad, 0x17, 0x92, 0x61, 0x0a, 0xf0, 0x55, 0x84, 0xd2, 0xc7,
	0xa0, 0x4f, 0x99, 0x90, 0x91, 0x3b, 0x93, 0xfe, 0xbf, 0xea, 0xc5, 0xb4, 0xb2, 0x9d, 0x16, 0xf0,
	0x2a, 0xfa, 0xd7, 0xde, 0x07, 0x4b, 0xcc, 0x1a, 0x62, 0xd6, 0x16, 0x0d, 0xb4, 0x3e, 0xfd, 0xf6,
	0xb0, 0x5c, 0xf8, 0x75, 0x58, 0x2e, 0x6c, 0x3e, 0x3d, 0x3a, 0x29, 0x39, 0xc7, 0x27, 0x25, 0xe7,
	0xc7, 0x49, 0xc9, 0x79, 0x7f, 0x5a, 0x2a, 0x1c, 0x9f, 0x96, 0x0a, 0x5f, 0x4f, 0x4b, 0x85, 0x97,
	0xb5, 0x36, 0xd7, 0x9d, 0xb8, 0x59, 0x09, 0x64, 0xe4, 0x85, 0x52, 0x31, 0x4a, 0x04, 0x09, 0xb8,
	0x02, 0xcd, 0x88, 0xd7, 0x23, 0x10, 0xed, 0x7b, 0xfb, 0xb9, 0x17, 0x83, 0x3e, 0xe8, 0x32, 0x68,
	0x4e, 0x9a, 0x67, 0xe6, 0x9d, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x60, 0xfe, 0x8f, 0xa7, 0x39,
	0x06, 0x00, 0x00,
}

func (m *DistributionGenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionGenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionGenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardsDenom) > 0 {
		i -= len(m.RewardsDenom)
		copy(dAtA[i:], m.RewardsDenom)
		i = encodeVarintDistributionGenesis(dAtA, i, uint64(len(m.RewardsDenom)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintDistributionGenesis(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ValidatorSlashEvents) > 0 {
		for iNdEx := len(m.ValidatorSlashEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorSlashEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDistributionGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.DelegatorStartingInfos) > 0 {
		for iNdEx := len(m.DelegatorStartingInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegatorStartingInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDistributionGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ValidatorCurrentRewards) > 0 {
		for iNdEx := len(m.ValidatorCurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorCurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDistributionGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ValidatorHistoricalRewards) > 0 {
		for iNdEx := len(m.ValidatorHistoricalRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorHistoricalRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDistributionGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ValidatorAccumulatedCommissions) > 0 {
		for iNdEx := len(m.ValidatorAccumulatedCommissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorAccumulatedCommissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDistributionGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OutstandingRewards) > 0 {
		for iNdEx := len(m.OutstandingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutstandingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDistributionGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PreviousProposer) > 0 {
		i -= len(m.PreviousProposer)
		copy(dAtA[i:], m.PreviousProposer)
		i = encodeVarintDistributionGenesis(dAtA, i, uint64(len(m.PreviousProposer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DelegatorWithdrawInfos) > 0 {
		for iNdEx := len(m.DelegatorWithdrawInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegatorWithdrawInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDistributionGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.FeePool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDistributionGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDistributionGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDistributionGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovDistributionGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DistributionGenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovDistributionGenesis(uint64(l))
	l = m.FeePool.Size()
	n += 1 + l + sovDistributionGenesis(uint64(l))
	if len(m.DelegatorWithdrawInfos) > 0 {
		for _, e := range m.DelegatorWithdrawInfos {
			l = e.Size()
			n += 1 + l + sovDistributionGenesis(uint64(l))
		}
	}
	l = len(m.PreviousProposer)
	if l > 0 {
		n += 1 + l + sovDistributionGenesis(uint64(l))
	}
	if len(m.OutstandingRewards) > 0 {
		for _, e := range m.OutstandingRewards {
			l = e.Size()
			n += 1 + l + sovDistributionGenesis(uint64(l))
		}
	}
	if len(m.ValidatorAccumulatedCommissions) > 0 {
		for _, e := range m.ValidatorAccumulatedCommissions {
			l = e.Size()
			n += 1 + l + sovDistributionGenesis(uint64(l))
		}
	}
	if len(m.ValidatorHistoricalRewards) > 0 {
		for _, e := range m.ValidatorHistoricalRewards {
			l = e.Size()
			n += 1 + l + sovDistributionGenesis(uint64(l))
		}
	}
	if len(m.ValidatorCurrentRewards) > 0 {
		for _, e := range m.ValidatorCurrentRewards {
			l = e.Size()
			n += 1 + l + sovDistributionGenesis(uint64(l))
		}
	}
	if len(m.DelegatorStartingInfos) > 0 {
		for _, e := range m.DelegatorStartingInfos {
			l = e.Size()
			n += 1 + l + sovDistributionGenesis(uint64(l))
		}
	}
	if len(m.ValidatorSlashEvents) > 0 {
		for _, e := range m.ValidatorSlashEvents {
			l = e.Size()
			n += 1 + l + sovDistributionGenesis(uint64(l))
		}
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovDistributionGenesis(uint64(l))
	}
	l = len(m.RewardsDenom)
	if l > 0 {
		n += 1 + l + sovDistributionGenesis(uint64(l))
	}
	return n
}

func sovDistributionGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDistributionGenesis(x uint64) (n int) {
	return sovDistributionGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DistributionGenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributionGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionGenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionGenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorWithdrawInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorWithdrawInfos = append(m.DelegatorWithdrawInfos, types.DelegatorWithdrawInfo{})
			if err := m.DelegatorWithdrawInfos[len(m.DelegatorWithdrawInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousProposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousProposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutstandingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutstandingRewards = append(m.OutstandingRewards, types.ValidatorOutstandingRewardsRecord{})
			if err := m.OutstandingRewards[len(m.OutstandingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAccumulatedCommissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAccumulatedCommissions = append(m.ValidatorAccumulatedCommissions, types.ValidatorAccumulatedCommissionRecord{})
			if err := m.ValidatorAccumulatedCommissions[len(m.ValidatorAccumulatedCommissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorHistoricalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorHistoricalRewards = append(m.ValidatorHistoricalRewards, types.ValidatorHistoricalRewardsRecord{})
			if err := m.ValidatorHistoricalRewards[len(m.ValidatorHistoricalRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorCurrentRewards = append(m.ValidatorCurrentRewards, types.ValidatorCurrentRewardsRecord{})
			if err := m.ValidatorCurrentRewards[len(m.ValidatorCurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorStartingInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorStartingInfos = append(m.DelegatorStartingInfos, types.DelegatorStartingInfoRecord{})
			if err := m.DelegatorStartingInfos[len(m.DelegatorStartingInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSlashEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSlashEvents = append(m.ValidatorSlashEvents, types.ValidatorSlashEventRecord{})
			if err := m.ValidatorSlashEvents[len(m.ValidatorSlashEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistributionGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributionGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDistributionGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDistributionGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistributionGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDistributionGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDistributionGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDistributionGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDistributionGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDistributionGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDistributionGenesis = fmt.Errorf("proto: unexpected end of group")
)
