(def! json-parse (fn* (dictstr)
  (eval (read-string dictstr))
))
(def! replace-all (fn* (sourcestr oldstr newstr)
  (apply str
    (map (fn* (s) (if (= s oldstr) newstr s)) (seq sourcestr))
  )
))

(def! numberchars "0123456789e-+.")
;; (def! strchars "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+.!?@")
(def! ischar? (fn* (v listofchars)
    (if (= listofchars "")
        false
        (if (= v (first listofchars)) true
            (ischar? v (rest listofchars))
        )
    )
))

(def! take-while (fn* (valstr charcomparefn acc)
    (if (= valstr "")
        ["" ""]
        (if (charcomparefn (first valstr) acc)
            (let* (
                    result (take-while (rest valstr) charcomparefn "")
                )
                [(str acc (first valstr) (first result)) (nth result 1)]
            )
            [acc valstr]
        )
    )
))

(def! parse-number (fn* (s) (let* (
        pair (take-while s (fn* (c acc) (ischar? c numberchars)))
    )
    [(read-string (first pair)) (nth pair 1)]
)))

(def! parse-string (fn* (s) (let* (
    pair (take-while s (fn* (c acc)
        (if (= c "\"")
            ;; if quote, return false unless it was escaped
            (if (= "\\" (nth acc (- (count acc) 1))) true false)
            true
        )
    ))
)
    [(first pair) (rest (nth pair 1))] ;; skip the last quote
)))

(def! interpose (fn* (listv sep acc) (let* (
    len (count listv)
)
    (if (= len 0)
        acc
        (str
            acc
            (first listv)
            (if (> len 1) (interpose (rest listv) sep sep) "")
        )
    )
)))

(def! encode-array (fn* (v)
    (str "[" (interpose (map json-stringify v) "," "") "]")))

(def! encode-object (fn* (m) (let* (
    pairs (map (fn* (k) (str (pr-str k) ":" (json-stringify (get m k)))) (keys m))
    content (interpose pairs "," "" )
)
    (str "{" content "}")
)))

(def! encode-u256 (fn* (v)
    (pr-str (u256.to_hex v))
))

(def! encode-buffer (fn* (v)
    (pr-str (buffer.to_hex v))
))

(def! json-stringify-mal (fn* (malobj) (do
    (cond
      (string? malobj) (pr-str malobj)
      (vector? malobj) (encode-array malobj)
      (map? malobj) (encode-object malobj)
      (u256? malobj) (encode-u256 malobj)
      (buffer? malobj) (encode-buffer malobj)
      true (pr-str malobj))
)))
