syntax = "proto3";
package mythos.wasmx.v1;

import "gogoproto/gogo.proto";

option go_package = "github.com/loredanacirstea/wasmx/v1/x/wasmx/types";

// ContractStorage
message ContractStorage {
    // hex-encode key
    bytes key = 1 [ (gogoproto.casttype) =
                        "github.com/cometbft/cometbft/libs/bytes.HexBytes" ];
    // raw value
    bytes value = 2;
}

// Metadata for each codeId
message CodeMetadata {
    option (gogoproto.equal) = true;

    string name = 1 [(gogoproto.nullable) = true];
    // category paths e.g. "/dapps/history"
    repeated string categ = 2;
    string icon = 3 [(gogoproto.nullable) = true];
    // off-chain identifier
    string author = 4 [(gogoproto.nullable) = true];
    string site = 5 [(gogoproto.nullable) = true];
    string abi = 6 [(gogoproto.nullable) = true];
    string json_schema = 7 [(gogoproto.nullable) = true];
    CodeOrigin origin = 8;
}

// CodeInfo is data for the uploaded contract WASM code
message CodeInfo {
    option (gogoproto.equal) = true;

    // CodeHash is the unique identifier created by hashing the
    // wasm or interpreted code
    bytes code_hash = 1;
    // Creator address who initially stored the code
    string creator = 2;
    // deps can be hex-formatted contract addresses (32 bytes)
    // or versioned interface labels
    repeated string deps = 3;
    // Pinned contract
    bool pinned = 4;
    CodeMetadata metadata = 5 [(gogoproto.nullable) = false];
    // for code that has a different runtime, like EVM
    bytes interpreted_bytecode_deployment = 6;
    bytes interpreted_bytecode_runtime = 7;
    bytes runtime_hash = 8;
}

message CodeOrigin {
    option (gogoproto.equal) = true;

    // unique chain ID
    string chain_id = 1;
    // hex-encoded address
    string address = 2;
}

enum ContractStorageType {
    // transaction execution effects; this must be the DEFAULT storage
    CoreConsensus = 0;
    // blocks, transactions - meta chain data
    MetaConsensus = 1;
    // node-specific storage that must NOT be used in deterministic operations
    SingleConsensus = 2;
    Memory = 3;
    Transient = 4;
}

// ContractInfo stores a WASM contract instance
message ContractInfo {
    option (gogoproto.equal) = true;
    // CodeID is the reference to the stored Wasm code
    uint64 code_id = 1;
    // Creator address who initially instantiated the contract
    string creator = 2;
    // Label is optional metadata to be stored with a contract instance.
    string label = 3;
    // Each contract can set its storage type
    ContractStorageType storage_type = 4;
    // Initialization message
    bytes init_message = 5 [ (gogoproto.casttype) = "RawContractMessage" ];
    // factory/deployer address
    string provenance = 6;
    string ibc_port_id = 7;
    // TODO either tx hash or
    // AbsoluteTxPosition created = 8;
}

// AbsoluteTxPosition is a unique transaction position that allows for global
// ordering of transactions.
message AbsoluteTxPosition {
    // BlockHeight is the block the contract was created at
    uint64 block_height = 1;
    // TxIndex is a monotonic counter within the block (actual transaction index,
    // or gas consumed)
    uint64 tx_index = 2;
}
