syntax = "proto3";
package mythos.wasmx.v1;

import "gogoproto/gogo.proto";
import "mythos/wasmx/v1/params.proto";
import "mythos/wasmx/v1/contract.proto";

option go_package = "mythos/v1/x/wasmx/types";

// GenesisState defines the wasmx module's genesis state.
message GenesisState {
  Params params = 1 [(gogoproto.nullable) = false];

  // bootstrap address
  string bootstrap_account_address = 2;
  repeated SystemContract system_contracts = 3 [(gogoproto.nullable) = false];

  repeated Code codes = 4
      [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "codes,omitempty" ];
  repeated Contract contracts = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "contracts,omitempty"
  ];
  repeated Sequence sequences = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "sequences,omitempty"
  ];
  // not recommended
  // initiate pinned/AOT compiled contracts from a provided folder
  // instead of compiling the contracts from wasm
  string compiled_folder_path = 7;
}

message SystemContract {
  string address = 1;
  string label = 2;
  ContractStorageType storage_type = 3;
  bytes init_message = 4 [ (gogoproto.casttype) = "RawContractMessage" ];
  bool pinned = 5;
  bool native = 6;
  string role = 7;
  // deps can be hex-formatted contract addresses (32 bytes)
  // or versioned interface labels
  repeated string deps = 8;
  CodeMetadata metadata = 9 [(gogoproto.nullable) = false];
  repeated ContractStorage contract_state = 10 [ (gogoproto.nullable) = false ];
}

// Code - for importing and exporting code data
message Code {
  uint64 code_id = 1;
  CodeInfo code_info = 2 [ (gogoproto.nullable) = false ];
  bytes code_bytes = 3;
}

// Contract struct encompasses ContractAddress, ContractInfo, and ContractState
message Contract {
  string contract_address = 1;
  ContractInfo contract_info = 2 [ (gogoproto.nullable) = false ];
  repeated ContractStorage contract_state = 3 [ (gogoproto.nullable) = false ];
}

// Sequence key and value of an id generation counter
message Sequence {
  bytes id_key = 1;
  uint64 value = 2;
}

