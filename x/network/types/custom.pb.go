// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/network/v1/custom.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// type MsgExecuteAtomicTxRequest struct {
// 	// protobuf encoded transactions
// 	Txs           [][]byte `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
// 	LeaderChainId string   `protobuf:"bytes,2,opt,name=leader_chain_id,json=leaderChainId,proto3" json:"leader_chain_id,omitempty"`
// 	Sender        []byte   `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
// }

// func (m *MsgExecuteAtomicTxRequest) Reset()         { *m = MsgExecuteAtomicTxRequest{} }
// func (m *MsgExecuteAtomicTxRequest) String() string { return proto.CompactTextString(m) }
// func (*MsgExecuteAtomicTxRequest) ProtoMessage()    {}
// func (*MsgExecuteAtomicTxRequest) Descriptor() ([]byte, []int) {
// 	return fileDescriptor_e2a1e68a92a4ca28, []int{0}
// }
func (m *MsgExecuteAtomicTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteAtomicTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteAtomicTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteAtomicTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteAtomicTxRequest.Merge(m, src)
}
func (m *MsgExecuteAtomicTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteAtomicTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteAtomicTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteAtomicTxRequest proto.InternalMessageInfo

// func (m *MsgExecuteAtomicTxRequest) GetTxs() [][]byte {
// 	if m != nil {
// 		return m.Txs
// 	}
// 	return nil
// }

// func (m *MsgExecuteAtomicTxRequest) GetLeaderChainId() string {
// 	if m != nil {
// 		return m.LeaderChainId
// 	}
// 	return ""
// }

// func (m *MsgExecuteAtomicTxRequest) GetSender() []byte {
// 	if m != nil {
// 		return m.Sender
// 	}
// 	return nil
// }

// type QueryAtomicMultiChainRequest struct {
// 	// protobuf encoded queries
// 	QueryData     [][]byte `protobuf:"bytes,1,rep,name=query_data,json=queryData,proto3" json:"query_data,omitempty"`
// 	LeaderChainId string   `protobuf:"bytes,2,opt,name=leader_chain_id,json=leaderChainId,proto3" json:"leader_chain_id,omitempty"`
// 	Sender        []byte   `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
// }

// func (m *QueryAtomicMultiChainRequest) Reset()         { *m = QueryAtomicMultiChainRequest{} }
// func (m *QueryAtomicMultiChainRequest) String() string { return proto.CompactTextString(m) }
// func (*QueryAtomicMultiChainRequest) ProtoMessage()    {}
// func (*QueryAtomicMultiChainRequest) Descriptor() ([]byte, []int) {
// 	return fileDescriptor_e2a1e68a92a4ca28, []int{1}
// }
func (m *QueryAtomicMultiChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAtomicMultiChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAtomicMultiChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAtomicMultiChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAtomicMultiChainRequest.Merge(m, src)
}
func (m *QueryAtomicMultiChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAtomicMultiChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAtomicMultiChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAtomicMultiChainRequest proto.InternalMessageInfo

// func (m *QueryAtomicMultiChainRequest) GetQueryData() [][]byte {
// 	if m != nil {
// 		return m.QueryData
// 	}
// 	return nil
// }

// func (m *QueryAtomicMultiChainRequest) GetLeaderChainId() string {
// 	if m != nil {
// 		return m.LeaderChainId
// 	}
// 	return ""
// }

// func (m *QueryAtomicMultiChainRequest) GetSender() []byte {
// 	if m != nil {
// 		return m.Sender
// 	}
// 	return nil
// }

func init() {
	proto.RegisterType((*MsgExecuteAtomicTxRequest)(nil), "mythos.network.v1.MsgExecuteAtomicTxRequest")
	proto.RegisterType((*QueryAtomicMultiChainRequest)(nil), "mythos.network.v1.QueryAtomicMultiChainRequest")
}

func init() { proto.RegisterFile("mythos/network/v1/custom.proto", fileDescriptor_e2a1e68a92a4ca28) }

var fileDescriptor_e2a1e68a92a4ca28 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcb, 0xad, 0x2c, 0xc9,
	0xc8, 0x2f, 0xd6, 0xcf, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x2f, 0x33, 0xd4, 0x4f, 0x2e,
	0x2d, 0x2e, 0xc9, 0xcf, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x84, 0xc8, 0xeb, 0x41,
	0xe5, 0xf5, 0xca, 0x0c, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0xb2, 0xfa, 0x20, 0x16, 0x44,
	0xa1, 0x94, 0x64, 0x72, 0x7e, 0x71, 0x6e, 0x7e, 0x71, 0x3c, 0x44, 0x02, 0xc2, 0x81, 0x4a, 0x09,
	0x26, 0xe6, 0x66, 0xe6, 0xe5, 0xeb, 0x83, 0x49, 0x88, 0x90, 0xd2, 0x5c, 0x46, 0x2e, 0x49, 0xdf,
	0xe2, 0x74, 0xd7, 0x8a, 0xd4, 0xe4, 0xd2, 0x92, 0x54, 0xc7, 0x92, 0xfc, 0xdc, 0xcc, 0xe4, 0x90,
	0x8a, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x01, 0x2e, 0xe6, 0x92, 0x8a, 0x62, 0x09,
	0x46, 0x05, 0x66, 0x0d, 0x9e, 0x20, 0x10, 0x53, 0x48, 0x8d, 0x8b, 0x3f, 0x27, 0x35, 0x31, 0x25,
	0xb5, 0x28, 0x3e, 0x39, 0x23, 0x31, 0x33, 0x2f, 0x3e, 0x33, 0x45, 0x82, 0x49, 0x81, 0x51, 0x83,
	0x33, 0x88, 0x17, 0x22, 0xec, 0x0c, 0x12, 0xf5, 0x4c, 0x11, 0x12, 0xe3, 0x62, 0x2b, 0x4e, 0xcd,
	0x4b, 0x49, 0x2d, 0x92, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0xf2, 0xac, 0xf4, 0x3a, 0x16,
	0xc8, 0x33, 0xbe, 0x58, 0x20, 0xcf, 0xd0, 0xf5, 0x7c, 0x83, 0x96, 0x22, 0xcc, 0xb3, 0x38, 0x5d,
	0xa0, 0xd4, 0xce, 0xc8, 0x25, 0x13, 0x58, 0x9a, 0x5a, 0x54, 0x09, 0x91, 0xf0, 0x2d, 0xcd, 0x29,
	0xc9, 0x04, 0xdb, 0x01, 0x73, 0xa2, 0x2c, 0x17, 0x57, 0x21, 0x48, 0x3e, 0x3e, 0x25, 0xb1, 0x24,
	0x11, 0xea, 0x52, 0x4e, 0xb0, 0x88, 0x4b, 0x62, 0x49, 0x22, 0xc5, 0xee, 0xe5, 0x80, 0xb9, 0xd7,
	0xc9, 0xfc, 0xc4, 0x43, 0x39, 0x86, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0,
	0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88,
	0x92, 0x84, 0x46, 0x5f, 0x99, 0xa1, 0x7e, 0x05, 0x3c, 0x0e, 0x4b, 0x2a, 0x0b, 0x52, 0x8b, 0x93,
	0xd8, 0xc0, 0x21, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x0a, 0x01, 0x2e, 0xe2, 0x01,
	0x00, 0x00,
}

func (m *MsgExecuteAtomicTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteAtomicTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteAtomicTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintCustom(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LeaderChainId) > 0 {
		i -= len(m.LeaderChainId)
		copy(dAtA[i:], m.LeaderChainId)
		i = encodeVarintCustom(dAtA, i, uint64(len(m.LeaderChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txs[iNdEx])
			copy(dAtA[i:], m.Txs[iNdEx])
			i = encodeVarintCustom(dAtA, i, uint64(len(m.Txs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAtomicMultiChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAtomicMultiChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAtomicMultiChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintCustom(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LeaderChainId) > 0 {
		i -= len(m.LeaderChainId)
		copy(dAtA[i:], m.LeaderChainId)
		i = encodeVarintCustom(dAtA, i, uint64(len(m.LeaderChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.QueryData) > 0 {
		for iNdEx := len(m.QueryData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QueryData[iNdEx])
			copy(dAtA[i:], m.QueryData[iNdEx])
			i = encodeVarintCustom(dAtA, i, uint64(len(m.QueryData[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCustom(dAtA []byte, offset int, v uint64) int {
	offset -= sovCustom(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgExecuteAtomicTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovCustom(uint64(l))
		}
	}
	l = len(m.LeaderChainId)
	if l > 0 {
		n += 1 + l + sovCustom(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCustom(uint64(l))
	}
	return n
}

func (m *QueryAtomicMultiChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QueryData) > 0 {
		for _, b := range m.QueryData {
			l = len(b)
			n += 1 + l + sovCustom(uint64(l))
		}
	}
	l = len(m.LeaderChainId)
	if l > 0 {
		n += 1 + l + sovCustom(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCustom(uint64(l))
	}
	return n
}

func sovCustom(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCustom(x uint64) (n int) {
	return sovCustom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgExecuteAtomicTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteAtomicTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteAtomicTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCustom
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCustom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCustom
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCustom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCustom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAtomicMultiChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAtomicMultiChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAtomicMultiChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCustom
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCustom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = append(m.QueryData, make([]byte, postIndex-iNdEx))
			copy(m.QueryData[len(m.QueryData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCustom
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCustom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCustom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCustom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCustom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCustom
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCustom
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCustom
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCustom        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCustom          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCustom = fmt.Errorf("proto: unexpected end of group")
)
