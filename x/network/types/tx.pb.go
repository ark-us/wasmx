// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/network/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgGrpcSendRequest struct {
	// this will always be the network module
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Encoding string `protobuf:"bytes,4,opt,name=encoding,proto3" json:"encoding,omitempty"`
}

func (m *MsgGrpcSendRequest) Reset()         { *m = MsgGrpcSendRequest{} }
func (m *MsgGrpcSendRequest) String() string { return proto.CompactTextString(m) }
func (*MsgGrpcSendRequest) ProtoMessage()    {}
func (*MsgGrpcSendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{0}
}
func (m *MsgGrpcSendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGrpcSendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGrpcSendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGrpcSendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGrpcSendRequest.Merge(m, src)
}
func (m *MsgGrpcSendRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgGrpcSendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGrpcSendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGrpcSendRequest proto.InternalMessageInfo

type MsgGrpcSendRequestResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgGrpcSendRequestResponse) Reset()         { *m = MsgGrpcSendRequestResponse{} }
func (m *MsgGrpcSendRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGrpcSendRequestResponse) ProtoMessage()    {}
func (*MsgGrpcSendRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{1}
}
func (m *MsgGrpcSendRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGrpcSendRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGrpcSendRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGrpcSendRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGrpcSendRequestResponse.Merge(m, src)
}
func (m *MsgGrpcSendRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGrpcSendRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGrpcSendRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGrpcSendRequestResponse proto.InternalMessageInfo

type MsgGrpcReceiveRequest struct {
	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Encoding string `protobuf:"bytes,2,opt,name=encoding,proto3" json:"encoding,omitempty"`
}

func (m *MsgGrpcReceiveRequest) Reset()         { *m = MsgGrpcReceiveRequest{} }
func (m *MsgGrpcReceiveRequest) String() string { return proto.CompactTextString(m) }
func (*MsgGrpcReceiveRequest) ProtoMessage()    {}
func (*MsgGrpcReceiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{2}
}
func (m *MsgGrpcReceiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGrpcReceiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGrpcReceiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGrpcReceiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGrpcReceiveRequest.Merge(m, src)
}
func (m *MsgGrpcReceiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgGrpcReceiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGrpcReceiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGrpcReceiveRequest proto.InternalMessageInfo

type MsgGrpcReceiveRequestResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgGrpcReceiveRequestResponse) Reset()         { *m = MsgGrpcReceiveRequestResponse{} }
func (m *MsgGrpcReceiveRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGrpcReceiveRequestResponse) ProtoMessage()    {}
func (*MsgGrpcReceiveRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{3}
}
func (m *MsgGrpcReceiveRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGrpcReceiveRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGrpcReceiveRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGrpcReceiveRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGrpcReceiveRequestResponse.Merge(m, src)
}
func (m *MsgGrpcReceiveRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGrpcReceiveRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGrpcReceiveRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGrpcReceiveRequestResponse proto.InternalMessageInfo

// MsgStartIntervalRequest
type MsgStartIntervalRequest struct {
	// this will always be the wasmx module // TODO authority
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// contract address
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Delay   int64  `protobuf:"varint,3,opt,name=delay,proto3" json:"delay,omitempty"`
	Repeat  int32  `protobuf:"varint,4,opt,name=repeat,proto3" json:"repeat,omitempty"`
	Args    []byte `protobuf:"bytes,5,opt,name=args,proto3" json:"args,omitempty"`
}

func (m *MsgStartIntervalRequest) Reset()         { *m = MsgStartIntervalRequest{} }
func (m *MsgStartIntervalRequest) String() string { return proto.CompactTextString(m) }
func (*MsgStartIntervalRequest) ProtoMessage()    {}
func (*MsgStartIntervalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{4}
}
func (m *MsgStartIntervalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartIntervalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartIntervalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartIntervalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartIntervalRequest.Merge(m, src)
}
func (m *MsgStartIntervalRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartIntervalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartIntervalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartIntervalRequest proto.InternalMessageInfo

// MsgStartIntervalResponse
type MsgStartIntervalResponse struct {
	IntervalId int32 `protobuf:"varint,1,opt,name=intervalId,proto3" json:"intervalId,omitempty"`
}

func (m *MsgStartIntervalResponse) Reset()         { *m = MsgStartIntervalResponse{} }
func (m *MsgStartIntervalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartIntervalResponse) ProtoMessage()    {}
func (*MsgStartIntervalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{5}
}
func (m *MsgStartIntervalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartIntervalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartIntervalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartIntervalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartIntervalResponse.Merge(m, src)
}
func (m *MsgStartIntervalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartIntervalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartIntervalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartIntervalResponse proto.InternalMessageInfo

// MsgPing
type MsgPing struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgPing) Reset()         { *m = MsgPing{} }
func (m *MsgPing) String() string { return proto.CompactTextString(m) }
func (*MsgPing) ProtoMessage()    {}
func (*MsgPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{6}
}
func (m *MsgPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPing.Merge(m, src)
}
func (m *MsgPing) XXX_Size() int {
	return m.Size()
}
func (m *MsgPing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPing proto.InternalMessageInfo

// MsgPingResponse
type MsgPingResponse struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgPingResponse) Reset()         { *m = MsgPingResponse{} }
func (m *MsgPingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPingResponse) ProtoMessage()    {}
func (*MsgPingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{7}
}
func (m *MsgPingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPingResponse.Merge(m, src)
}
func (m *MsgPingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPingResponse proto.InternalMessageInfo

// MsgSetup
type MsgSetup struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgSetup) Reset()         { *m = MsgSetup{} }
func (m *MsgSetup) String() string { return proto.CompactTextString(m) }
func (*MsgSetup) ProtoMessage()    {}
func (*MsgSetup) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{8}
}
func (m *MsgSetup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetup.Merge(m, src)
}
func (m *MsgSetup) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetup) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetup.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetup proto.InternalMessageInfo

// MsgSetupResponse
type MsgSetupResponse struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgSetupResponse) Reset()         { *m = MsgSetupResponse{} }
func (m *MsgSetupResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetupResponse) ProtoMessage()    {}
func (*MsgSetupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{9}
}
func (m *MsgSetupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetupResponse.Merge(m, src)
}
func (m *MsgSetupResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetupResponse proto.InternalMessageInfo

// MsgMakeProposal
type MsgMakeProposal struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgMakeProposal) Reset()         { *m = MsgMakeProposal{} }
func (m *MsgMakeProposal) String() string { return proto.CompactTextString(m) }
func (*MsgMakeProposal) ProtoMessage()    {}
func (*MsgMakeProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{10}
}
func (m *MsgMakeProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMakeProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMakeProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMakeProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMakeProposal.Merge(m, src)
}
func (m *MsgMakeProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgMakeProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMakeProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMakeProposal proto.InternalMessageInfo

// MsgMakeProposalResponse
type MsgMakeProposalResponse struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgMakeProposalResponse) Reset()         { *m = MsgMakeProposalResponse{} }
func (m *MsgMakeProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMakeProposalResponse) ProtoMessage()    {}
func (*MsgMakeProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{11}
}
func (m *MsgMakeProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMakeProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMakeProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMakeProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMakeProposalResponse.Merge(m, src)
}
func (m *MsgMakeProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMakeProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMakeProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMakeProposalResponse proto.InternalMessageInfo

// MsgSetValidators
type MsgSetValidators struct {
}

func (m *MsgSetValidators) Reset()         { *m = MsgSetValidators{} }
func (m *MsgSetValidators) String() string { return proto.CompactTextString(m) }
func (*MsgSetValidators) ProtoMessage()    {}
func (*MsgSetValidators) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{12}
}
func (m *MsgSetValidators) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetValidators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetValidators.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetValidators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetValidators.Merge(m, src)
}
func (m *MsgSetValidators) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetValidators) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetValidators.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetValidators proto.InternalMessageInfo

// MsgSetValidatorsResponse
type MsgSetValidatorsResponse struct {
}

func (m *MsgSetValidatorsResponse) Reset()         { *m = MsgSetValidatorsResponse{} }
func (m *MsgSetValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetValidatorsResponse) ProtoMessage()    {}
func (*MsgSetValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{13}
}
func (m *MsgSetValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetValidatorsResponse.Merge(m, src)
}
func (m *MsgSetValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetValidatorsResponse proto.InternalMessageInfo

// MsgGetValidators
type MsgGetValidators struct {
}

func (m *MsgGetValidators) Reset()         { *m = MsgGetValidators{} }
func (m *MsgGetValidators) String() string { return proto.CompactTextString(m) }
func (*MsgGetValidators) ProtoMessage()    {}
func (*MsgGetValidators) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{14}
}
func (m *MsgGetValidators) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGetValidators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGetValidators.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGetValidators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGetValidators.Merge(m, src)
}
func (m *MsgGetValidators) XXX_Size() int {
	return m.Size()
}
func (m *MsgGetValidators) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGetValidators.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGetValidators proto.InternalMessageInfo

// MsgGetValidatorsResponse
type MsgGetValidatorsResponse struct {
	Validators []string `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (m *MsgGetValidatorsResponse) Reset()         { *m = MsgGetValidatorsResponse{} }
func (m *MsgGetValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGetValidatorsResponse) ProtoMessage()    {}
func (*MsgGetValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{15}
}
func (m *MsgGetValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGetValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGetValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGetValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGetValidatorsResponse.Merge(m, src)
}
func (m *MsgGetValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGetValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGetValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGetValidatorsResponse proto.InternalMessageInfo

// MsgIsProposer
type MsgIsProposer struct {
}

func (m *MsgIsProposer) Reset()         { *m = MsgIsProposer{} }
func (m *MsgIsProposer) String() string { return proto.CompactTextString(m) }
func (*MsgIsProposer) ProtoMessage()    {}
func (*MsgIsProposer) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{16}
}
func (m *MsgIsProposer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIsProposer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIsProposer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIsProposer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIsProposer.Merge(m, src)
}
func (m *MsgIsProposer) XXX_Size() int {
	return m.Size()
}
func (m *MsgIsProposer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIsProposer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIsProposer proto.InternalMessageInfo

// MsgIsProposerResponse is the response type for the Query/IsProposer RPC method.
type MsgIsProposerResponse struct {
	// params defines the parameters of the module.
	IsProposer bool `protobuf:"varint,1,opt,name=is_proposer,json=isProposer,proto3" json:"is_proposer,omitempty"`
}

func (m *MsgIsProposerResponse) Reset()         { *m = MsgIsProposerResponse{} }
func (m *MsgIsProposerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIsProposerResponse) ProtoMessage()    {}
func (*MsgIsProposerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{17}
}
func (m *MsgIsProposerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIsProposerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIsProposerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIsProposerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIsProposerResponse.Merge(m, src)
}
func (m *MsgIsProposerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIsProposerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIsProposerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIsProposerResponse proto.InternalMessageInfo

// MsgSetCurrentNode
type MsgSetCurrentNode struct {
}

func (m *MsgSetCurrentNode) Reset()         { *m = MsgSetCurrentNode{} }
func (m *MsgSetCurrentNode) String() string { return proto.CompactTextString(m) }
func (*MsgSetCurrentNode) ProtoMessage()    {}
func (*MsgSetCurrentNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{18}
}
func (m *MsgSetCurrentNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetCurrentNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetCurrentNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetCurrentNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetCurrentNode.Merge(m, src)
}
func (m *MsgSetCurrentNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetCurrentNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetCurrentNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetCurrentNode proto.InternalMessageInfo

// MsgSetCurrentNodeResponse
type MsgSetCurrentNodeResponse struct {
}

func (m *MsgSetCurrentNodeResponse) Reset()         { *m = MsgSetCurrentNodeResponse{} }
func (m *MsgSetCurrentNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetCurrentNodeResponse) ProtoMessage()    {}
func (*MsgSetCurrentNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{19}
}
func (m *MsgSetCurrentNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetCurrentNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetCurrentNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetCurrentNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetCurrentNodeResponse.Merge(m, src)
}
func (m *MsgSetCurrentNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetCurrentNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetCurrentNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetCurrentNodeResponse proto.InternalMessageInfo

// MsgGetCurrentNode
type MsgGetCurrentNode struct {
}

func (m *MsgGetCurrentNode) Reset()         { *m = MsgGetCurrentNode{} }
func (m *MsgGetCurrentNode) String() string { return proto.CompactTextString(m) }
func (*MsgGetCurrentNode) ProtoMessage()    {}
func (*MsgGetCurrentNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{20}
}
func (m *MsgGetCurrentNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGetCurrentNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGetCurrentNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGetCurrentNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGetCurrentNode.Merge(m, src)
}
func (m *MsgGetCurrentNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgGetCurrentNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGetCurrentNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGetCurrentNode proto.InternalMessageInfo

// MsgGetCurrentNodeResponse
type MsgGetCurrentNodeResponse struct {
	CurrentNode string `protobuf:"bytes,1,opt,name=current_node,json=currentNode,proto3" json:"current_node,omitempty"`
}

func (m *MsgGetCurrentNodeResponse) Reset()         { *m = MsgGetCurrentNodeResponse{} }
func (m *MsgGetCurrentNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGetCurrentNodeResponse) ProtoMessage()    {}
func (*MsgGetCurrentNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a856802fa4b5f0, []int{21}
}
func (m *MsgGetCurrentNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGetCurrentNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGetCurrentNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGetCurrentNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGetCurrentNodeResponse.Merge(m, src)
}
func (m *MsgGetCurrentNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGetCurrentNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGetCurrentNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGetCurrentNodeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgGrpcSendRequest)(nil), "mythos.network.v1.MsgGrpcSendRequest")
	proto.RegisterType((*MsgGrpcSendRequestResponse)(nil), "mythos.network.v1.MsgGrpcSendRequestResponse")
	proto.RegisterType((*MsgGrpcReceiveRequest)(nil), "mythos.network.v1.MsgGrpcReceiveRequest")
	proto.RegisterType((*MsgGrpcReceiveRequestResponse)(nil), "mythos.network.v1.MsgGrpcReceiveRequestResponse")
	proto.RegisterType((*MsgStartIntervalRequest)(nil), "mythos.network.v1.MsgStartIntervalRequest")
	proto.RegisterType((*MsgStartIntervalResponse)(nil), "mythos.network.v1.MsgStartIntervalResponse")
	proto.RegisterType((*MsgPing)(nil), "mythos.network.v1.MsgPing")
	proto.RegisterType((*MsgPingResponse)(nil), "mythos.network.v1.MsgPingResponse")
	proto.RegisterType((*MsgSetup)(nil), "mythos.network.v1.MsgSetup")
	proto.RegisterType((*MsgSetupResponse)(nil), "mythos.network.v1.MsgSetupResponse")
	proto.RegisterType((*MsgMakeProposal)(nil), "mythos.network.v1.MsgMakeProposal")
	proto.RegisterType((*MsgMakeProposalResponse)(nil), "mythos.network.v1.MsgMakeProposalResponse")
	proto.RegisterType((*MsgSetValidators)(nil), "mythos.network.v1.MsgSetValidators")
	proto.RegisterType((*MsgSetValidatorsResponse)(nil), "mythos.network.v1.MsgSetValidatorsResponse")
	proto.RegisterType((*MsgGetValidators)(nil), "mythos.network.v1.MsgGetValidators")
	proto.RegisterType((*MsgGetValidatorsResponse)(nil), "mythos.network.v1.MsgGetValidatorsResponse")
	proto.RegisterType((*MsgIsProposer)(nil), "mythos.network.v1.MsgIsProposer")
	proto.RegisterType((*MsgIsProposerResponse)(nil), "mythos.network.v1.MsgIsProposerResponse")
	proto.RegisterType((*MsgSetCurrentNode)(nil), "mythos.network.v1.MsgSetCurrentNode")
	proto.RegisterType((*MsgSetCurrentNodeResponse)(nil), "mythos.network.v1.MsgSetCurrentNodeResponse")
	proto.RegisterType((*MsgGetCurrentNode)(nil), "mythos.network.v1.MsgGetCurrentNode")
	proto.RegisterType((*MsgGetCurrentNodeResponse)(nil), "mythos.network.v1.MsgGetCurrentNodeResponse")
}

func init() { proto.RegisterFile("mythos/network/v1/tx.proto", fileDescriptor_a2a856802fa4b5f0) }

var fileDescriptor_a2a856802fa4b5f0 = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x4f, 0xdb, 0x48,
	0x14, 0x8f, 0x09, 0x81, 0xf0, 0x20, 0xcb, 0x32, 0xcb, 0x2e, 0x66, 0x10, 0xde, 0xac, 0x77, 0x59,
	0x45, 0xd9, 0x25, 0xe1, 0xcf, 0xa1, 0x15, 0x87, 0x4a, 0xa5, 0x52, 0xad, 0x1c, 0x52, 0x21, 0x23,
	0x55, 0x55, 0x0f, 0x45, 0x6e, 0x3c, 0x32, 0x16, 0x89, 0xc7, 0xf5, 0x98, 0x14, 0x6e, 0x55, 0x3f,
	0x41, 0xbf, 0x40, 0xbf, 0x03, 0x87, 0x7e, 0x08, 0x4e, 0x15, 0xea, 0xa9, 0xc7, 0x16, 0x0e, 0x7c,
	0x8d, 0xca, 0x33, 0x13, 0x27, 0x26, 0x76, 0xb0, 0x7a, 0x89, 0x3c, 0xef, 0xf7, 0x7b, 0xbf, 0xf7,
	0xde, 0x2f, 0x9e, 0x27, 0x03, 0xee, 0x9d, 0x87, 0xc7, 0x94, 0x35, 0x3d, 0x12, 0xbe, 0xa5, 0xc1,
	0x49, 0xb3, 0xbf, 0xdd, 0x0c, 0xcf, 0x1a, 0x7e, 0x40, 0x43, 0x8a, 0x96, 0x04, 0xd6, 0x90, 0x58,
	0xa3, 0xbf, 0x8d, 0x97, 0x1d, 0xea, 0x50, 0x8e, 0x36, 0xa3, 0x27, 0x41, 0xc4, 0xab, 0x1d, 0xca,
	0x7a, 0x94, 0x1d, 0x09, 0x40, 0x1c, 0x24, 0xb4, 0x22, 0x4e, 0xcd, 0x1e, 0x73, 0x22, 0xed, 0x1e,
	0x73, 0x24, 0xb0, 0x64, 0xf5, 0x5c, 0x8f, 0x36, 0xf9, 0xaf, 0x08, 0xe9, 0x1f, 0x15, 0x40, 0x6d,
	0xe6, 0x18, 0x81, 0xdf, 0x39, 0x24, 0x9e, 0x6d, 0x92, 0x37, 0xa7, 0x84, 0x85, 0x68, 0x0b, 0x66,
	0x18, 0xf1, 0x6c, 0x12, 0xa8, 0x4a, 0x55, 0xa9, 0xcd, 0xed, 0xab, 0x5f, 0x3e, 0x6d, 0x2e, 0xcb,
	0x22, 0x8f, 0x6d, 0x3b, 0x20, 0x8c, 0x1d, 0x86, 0x81, 0xeb, 0x39, 0xa6, 0xe4, 0x21, 0x15, 0x66,
	0x2d, 0x01, 0xa8, 0x53, 0x51, 0x8a, 0x39, 0x38, 0x22, 0x04, 0xd3, 0xb6, 0x15, 0x5a, 0x6a, 0xb1,
	0xaa, 0xd4, 0x16, 0x4c, 0xfe, 0x8c, 0x30, 0x94, 0x89, 0xd7, 0xa1, 0xb6, 0xeb, 0x39, 0xea, 0x34,
	0xa7, 0xc7, 0xe7, 0xbd, 0xf9, 0xf7, 0xb7, 0x17, 0x75, 0x29, 0xab, 0x6f, 0x01, 0x1e, 0x6f, 0xcf,
	0x24, 0xcc, 0xa7, 0x1e, 0x23, 0xb1, 0xb4, 0x32, 0x94, 0xd6, 0x0d, 0xf8, 0x5d, 0x66, 0x98, 0xa4,
	0x43, 0xdc, 0x3e, 0x19, 0xcc, 0x94, 0x42, 0x4e, 0xf4, 0x31, 0x95, 0xec, 0x43, 0xdf, 0x85, 0xf5,
	0x54, 0xa1, 0x89, 0xd5, 0x3f, 0x2b, 0xb0, 0xd2, 0x66, 0xce, 0x61, 0x68, 0x05, 0x61, 0xcb, 0x0b,
	0x49, 0xd0, 0xb7, 0xba, 0x3f, 0x6f, 0xea, 0xce, 0x1d, 0x53, 0x27, 0xa4, 0xc4, 0x76, 0x2f, 0x43,
	0xc9, 0x26, 0x5d, 0xeb, 0x9c, 0xfb, 0x5d, 0x34, 0xc5, 0x01, 0xfd, 0x01, 0x33, 0x01, 0xf1, 0x89,
	0x15, 0x72, 0xbb, 0x4b, 0xa6, 0x3c, 0x45, 0x33, 0x58, 0x81, 0xc3, 0xd4, 0x92, 0x98, 0x21, 0x7a,
	0x4e, 0xfe, 0x01, 0x7b, 0xa0, 0x8e, 0xcf, 0x23, 0x0d, 0xd0, 0x00, 0x5c, 0x19, 0x6b, 0xd9, 0x7c,
	0xa8, 0x92, 0x39, 0x12, 0xd1, 0xd7, 0x61, 0xb6, 0xcd, 0x9c, 0x03, 0xd7, 0x73, 0x12, 0x5e, 0xcd,
	0x49, 0xaf, 0x36, 0x60, 0x51, 0xc2, 0xa9, 0x96, 0x0e, 0x68, 0x1a, 0x94, 0xa3, 0x0e, 0x48, 0x78,
	0xea, 0xa7, 0xe2, 0xff, 0xc2, 0xaf, 0x03, 0x7c, 0xa2, 0x8e, 0x28, 0xd7, 0xb6, 0x4e, 0xc8, 0x41,
	0x40, 0x7d, 0xca, 0xac, 0x6e, 0x2a, 0x6d, 0x93, 0xff, 0x81, 0xa3, 0xb4, 0x89, 0xaa, 0x68, 0x50,
	0xfd, 0xb9, 0xd5, 0x75, 0x6d, 0x2b, 0xa4, 0x01, 0xd3, 0xb1, 0xf0, 0x6c, 0x34, 0x36, 0xd0, 0x90,
	0x7c, 0x23, 0xc1, 0x17, 0x1e, 0x1b, 0x69, 0xfc, 0xc8, 0xe3, 0x7e, 0x1c, 0x55, 0x95, 0x6a, 0xb1,
	0x36, 0x67, 0x8e, 0x44, 0xf4, 0x45, 0xa8, 0xb4, 0x99, 0xd3, 0x62, 0xa2, 0x59, 0x12, 0xe8, 0x0f,
	0xf9, 0xfb, 0x3f, 0x0c, 0xc4, 0x4a, 0x7f, 0xc2, 0xbc, 0xcb, 0xf7, 0x05, 0x0f, 0xf3, 0x21, 0xca,
	0x26, 0xb8, 0xc3, 0xcc, 0xdf, 0x60, 0x49, 0xb4, 0xfd, 0xe4, 0x34, 0x08, 0x88, 0x17, 0x3e, 0xa3,
	0x36, 0xd1, 0xd7, 0x60, 0x75, 0x2c, 0x18, 0x0f, 0x23, 0x32, 0x8c, 0x64, 0xc6, 0x23, 0x9e, 0x61,
	0xa4, 0x66, 0xa0, 0xbf, 0x60, 0xa1, 0x23, 0xc2, 0x47, 0x1e, 0xb5, 0x89, 0xb4, 0x72, 0xbe, 0x33,
	0xa4, 0xee, 0x5c, 0x94, 0xa1, 0xd8, 0x66, 0x0e, 0x72, 0x60, 0xf1, 0xee, 0x5a, 0xda, 0x68, 0x8c,
	0xad, 0xc7, 0xc6, 0xf8, 0x7a, 0xc0, 0x9b, 0xb9, 0x68, 0x71, 0x4f, 0x3e, 0xa0, 0x94, 0x75, 0x51,
	0xcb, 0x16, 0x49, 0x32, 0xf1, 0x56, 0x5e, 0x66, 0x5c, 0xf1, 0x18, 0x2a, 0x89, 0x1b, 0x85, 0xea,
	0xe9, 0x12, 0x69, 0x6b, 0x04, 0xff, 0x97, 0x8b, 0x2b, 0x2b, 0xb5, 0xa0, 0x24, 0x6e, 0xce, 0x5a,
	0x46, 0x56, 0x04, 0xe2, 0xbf, 0x27, 0x80, 0xb1, 0xd4, 0x53, 0x98, 0xe6, 0x57, 0x19, 0xa7, 0x93,
	0x23, 0x0c, 0xeb, 0xd9, 0x58, 0xac, 0xf3, 0x0a, 0x16, 0x12, 0x97, 0x30, 0x23, 0x67, 0x94, 0x83,
	0xeb, 0xf7, 0x73, 0x62, 0xfd, 0x17, 0x00, 0xc3, 0xb7, 0x1f, 0x55, 0xd3, 0x33, 0x87, 0x0c, 0x5c,
	0xbb, 0x8f, 0x11, 0x2b, 0xdb, 0xf0, 0x4b, 0xf2, 0x22, 0xa0, 0x7f, 0x32, 0x8d, 0x1b, 0x61, 0xe1,
	0xff, 0xf3, 0xb0, 0x46, 0xab, 0x18, 0xb9, 0xaa, 0x18, 0xb9, 0xaa, 0x64, 0x5c, 0x44, 0x0b, 0x2a,
	0x89, 0x05, 0x85, 0xb2, 0xdf, 0x81, 0x21, 0x29, 0xf3, 0xdd, 0x4b, 0x5d, 0x5d, 0x16, 0x54, 0x8c,
	0x3c, 0x25, 0x8c, 0x3c, 0x25, 0x52, 0xb7, 0x23, 0x2e, 0xbd, 0xbb, 0xbd, 0xa8, 0x2b, 0xfb, 0x0f,
	0x2e, 0xbf, 0x6b, 0x85, 0xcb, 0x6b, 0x4d, 0xb9, 0xba, 0xd6, 0x94, 0x6f, 0xd7, 0x9a, 0xf2, 0xe1,
	0x46, 0x2b, 0x5c, 0xdd, 0x68, 0x85, 0xaf, 0x37, 0x5a, 0xe1, 0xe5, 0xaa, 0xfc, 0xde, 0xea, 0x6f,
	0x37, 0xcf, 0xe2, 0x8f, 0xae, 0xf0, 0xdc, 0x27, 0xec, 0xf5, 0x0c, 0xff, 0x0a, 0xda, 0xfd, 0x11,
	0x00, 0x00, 0xff, 0xff, 0xe9, 0x58, 0x25, 0xfd, 0x93, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// GrpcSendRequest
	GrpcSendRequest(ctx context.Context, in *MsgGrpcSendRequest, opts ...grpc.CallOption) (*MsgGrpcSendRequestResponse, error)
	// GrpcReceiveRequest
	GrpcReceiveRequest(ctx context.Context, in *MsgGrpcReceiveRequest, opts ...grpc.CallOption) (*MsgGrpcReceiveRequestResponse, error)
	// StartInterval
	StartInterval(ctx context.Context, in *MsgStartIntervalRequest, opts ...grpc.CallOption) (*MsgStartIntervalResponse, error)
	// Setup
	Setup(ctx context.Context, in *MsgSetup, opts ...grpc.CallOption) (*MsgSetupResponse, error)
	// Ping
	Ping(ctx context.Context, in *MsgPing, opts ...grpc.CallOption) (*MsgPingResponse, error)
	// MakeProposal
	MakeProposal(ctx context.Context, in *MsgMakeProposal, opts ...grpc.CallOption) (*MsgMakeProposalResponse, error)
	// IsProposer // TODO this should be a query
	IsProposer(ctx context.Context, in *MsgIsProposer, opts ...grpc.CallOption) (*MsgIsProposerResponse, error)
	// SetCurrentNode // TODO
	SetCurrentNode(ctx context.Context, in *MsgSetCurrentNode, opts ...grpc.CallOption) (*MsgSetCurrentNodeResponse, error)
	// GetCurrentNode // TODO
	GetCurrentNode(ctx context.Context, in *MsgGetCurrentNode, opts ...grpc.CallOption) (*MsgGetCurrentNodeResponse, error)
	// SetValidators // TODO remove
	SetValidators(ctx context.Context, in *MsgSetValidators, opts ...grpc.CallOption) (*MsgSetValidatorsResponse, error)
	// GetValidators // TODO remove
	GetValidators(ctx context.Context, in *MsgGetValidators, opts ...grpc.CallOption) (*MsgGetValidatorsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) GrpcSendRequest(ctx context.Context, in *MsgGrpcSendRequest, opts ...grpc.CallOption) (*MsgGrpcSendRequestResponse, error) {
	out := new(MsgGrpcSendRequestResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Msg/GrpcSendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GrpcReceiveRequest(ctx context.Context, in *MsgGrpcReceiveRequest, opts ...grpc.CallOption) (*MsgGrpcReceiveRequestResponse, error) {
	out := new(MsgGrpcReceiveRequestResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Msg/GrpcReceiveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartInterval(ctx context.Context, in *MsgStartIntervalRequest, opts ...grpc.CallOption) (*MsgStartIntervalResponse, error) {
	out := new(MsgStartIntervalResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Msg/StartInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Setup(ctx context.Context, in *MsgSetup, opts ...grpc.CallOption) (*MsgSetupResponse, error) {
	out := new(MsgSetupResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Msg/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Ping(ctx context.Context, in *MsgPing, opts ...grpc.CallOption) (*MsgPingResponse, error) {
	out := new(MsgPingResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Msg/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MakeProposal(ctx context.Context, in *MsgMakeProposal, opts ...grpc.CallOption) (*MsgMakeProposalResponse, error) {
	out := new(MsgMakeProposalResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Msg/MakeProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IsProposer(ctx context.Context, in *MsgIsProposer, opts ...grpc.CallOption) (*MsgIsProposerResponse, error) {
	out := new(MsgIsProposerResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Msg/IsProposer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetCurrentNode(ctx context.Context, in *MsgSetCurrentNode, opts ...grpc.CallOption) (*MsgSetCurrentNodeResponse, error) {
	out := new(MsgSetCurrentNodeResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Msg/SetCurrentNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GetCurrentNode(ctx context.Context, in *MsgGetCurrentNode, opts ...grpc.CallOption) (*MsgGetCurrentNodeResponse, error) {
	out := new(MsgGetCurrentNodeResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Msg/GetCurrentNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetValidators(ctx context.Context, in *MsgSetValidators, opts ...grpc.CallOption) (*MsgSetValidatorsResponse, error) {
	out := new(MsgSetValidatorsResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Msg/SetValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GetValidators(ctx context.Context, in *MsgGetValidators, opts ...grpc.CallOption) (*MsgGetValidatorsResponse, error) {
	out := new(MsgGetValidatorsResponse)
	err := c.cc.Invoke(ctx, "/mythos.network.v1.Msg/GetValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// GrpcSendRequest
	GrpcSendRequest(context.Context, *MsgGrpcSendRequest) (*MsgGrpcSendRequestResponse, error)
	// GrpcReceiveRequest
	GrpcReceiveRequest(context.Context, *MsgGrpcReceiveRequest) (*MsgGrpcReceiveRequestResponse, error)
	// StartInterval
	StartInterval(context.Context, *MsgStartIntervalRequest) (*MsgStartIntervalResponse, error)
	// Setup
	Setup(context.Context, *MsgSetup) (*MsgSetupResponse, error)
	// Ping
	Ping(context.Context, *MsgPing) (*MsgPingResponse, error)
	// MakeProposal
	MakeProposal(context.Context, *MsgMakeProposal) (*MsgMakeProposalResponse, error)
	// IsProposer // TODO this should be a query
	IsProposer(context.Context, *MsgIsProposer) (*MsgIsProposerResponse, error)
	// SetCurrentNode // TODO
	SetCurrentNode(context.Context, *MsgSetCurrentNode) (*MsgSetCurrentNodeResponse, error)
	// GetCurrentNode // TODO
	GetCurrentNode(context.Context, *MsgGetCurrentNode) (*MsgGetCurrentNodeResponse, error)
	// SetValidators // TODO remove
	SetValidators(context.Context, *MsgSetValidators) (*MsgSetValidatorsResponse, error)
	// GetValidators // TODO remove
	GetValidators(context.Context, *MsgGetValidators) (*MsgGetValidatorsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) GrpcSendRequest(ctx context.Context, req *MsgGrpcSendRequest) (*MsgGrpcSendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcSendRequest not implemented")
}
func (*UnimplementedMsgServer) GrpcReceiveRequest(ctx context.Context, req *MsgGrpcReceiveRequest) (*MsgGrpcReceiveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcReceiveRequest not implemented")
}
func (*UnimplementedMsgServer) StartInterval(ctx context.Context, req *MsgStartIntervalRequest) (*MsgStartIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartInterval not implemented")
}
func (*UnimplementedMsgServer) Setup(ctx context.Context, req *MsgSetup) (*MsgSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (*UnimplementedMsgServer) Ping(ctx context.Context, req *MsgPing) (*MsgPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedMsgServer) MakeProposal(ctx context.Context, req *MsgMakeProposal) (*MsgMakeProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeProposal not implemented")
}
func (*UnimplementedMsgServer) IsProposer(ctx context.Context, req *MsgIsProposer) (*MsgIsProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsProposer not implemented")
}
func (*UnimplementedMsgServer) SetCurrentNode(ctx context.Context, req *MsgSetCurrentNode) (*MsgSetCurrentNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentNode not implemented")
}
func (*UnimplementedMsgServer) GetCurrentNode(ctx context.Context, req *MsgGetCurrentNode) (*MsgGetCurrentNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentNode not implemented")
}
func (*UnimplementedMsgServer) SetValidators(ctx context.Context, req *MsgSetValidators) (*MsgSetValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValidators not implemented")
}
func (*UnimplementedMsgServer) GetValidators(ctx context.Context, req *MsgGetValidators) (*MsgGetValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidators not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_GrpcSendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGrpcSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GrpcSendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Msg/GrpcSendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GrpcSendRequest(ctx, req.(*MsgGrpcSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GrpcReceiveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGrpcReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GrpcReceiveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Msg/GrpcReceiveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GrpcReceiveRequest(ctx, req.(*MsgGrpcReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Msg/StartInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartInterval(ctx, req.(*MsgStartIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Msg/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Setup(ctx, req.(*MsgSetup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Msg/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Ping(ctx, req.(*MsgPing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MakeProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMakeProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MakeProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Msg/MakeProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MakeProposal(ctx, req.(*MsgMakeProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IsProposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIsProposer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IsProposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Msg/IsProposer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IsProposer(ctx, req.(*MsgIsProposer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetCurrentNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetCurrentNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetCurrentNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Msg/SetCurrentNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetCurrentNode(ctx, req.(*MsgSetCurrentNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GetCurrentNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGetCurrentNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GetCurrentNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Msg/GetCurrentNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GetCurrentNode(ctx, req.(*MsgGetCurrentNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetValidators)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Msg/SetValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetValidators(ctx, req.(*MsgSetValidators))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GetValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGetValidators)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GetValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.network.v1.Msg/GetValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GetValidators(ctx, req.(*MsgGetValidators))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mythos.network.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrpcSendRequest",
			Handler:    _Msg_GrpcSendRequest_Handler,
		},
		{
			MethodName: "GrpcReceiveRequest",
			Handler:    _Msg_GrpcReceiveRequest_Handler,
		},
		{
			MethodName: "StartInterval",
			Handler:    _Msg_StartInterval_Handler,
		},
		{
			MethodName: "Setup",
			Handler:    _Msg_Setup_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Msg_Ping_Handler,
		},
		{
			MethodName: "MakeProposal",
			Handler:    _Msg_MakeProposal_Handler,
		},
		{
			MethodName: "IsProposer",
			Handler:    _Msg_IsProposer_Handler,
		},
		{
			MethodName: "SetCurrentNode",
			Handler:    _Msg_SetCurrentNode_Handler,
		},
		{
			MethodName: "GetCurrentNode",
			Handler:    _Msg_GetCurrentNode_Handler,
		},
		{
			MethodName: "SetValidators",
			Handler:    _Msg_SetValidators_Handler,
		},
		{
			MethodName: "GetValidators",
			Handler:    _Msg_GetValidators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mythos/network/v1/tx.proto",
}

func (m *MsgGrpcSendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGrpcSendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGrpcSendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Encoding) > 0 {
		i -= len(m.Encoding)
		copy(dAtA[i:], m.Encoding)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Encoding)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGrpcSendRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGrpcSendRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGrpcSendRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGrpcReceiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGrpcReceiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGrpcReceiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Encoding) > 0 {
		i -= len(m.Encoding)
		copy(dAtA[i:], m.Encoding)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Encoding)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGrpcReceiveRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGrpcReceiveRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGrpcReceiveRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartIntervalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartIntervalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartIntervalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		i -= len(m.Args)
		copy(dAtA[i:], m.Args)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Args)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Repeat != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Repeat))
		i--
		dAtA[i] = 0x20
	}
	if m.Delay != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Delay))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartIntervalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartIntervalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartIntervalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IntervalId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IntervalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMakeProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMakeProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMakeProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMakeProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMakeProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMakeProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetValidators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetValidators) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetValidators) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGetValidators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetValidators) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGetValidators) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGetValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGetValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validators[iNdEx])
			copy(dAtA[i:], m.Validators[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Validators[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgIsProposer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIsProposer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIsProposer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgIsProposerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIsProposerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIsProposerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsProposer {
		i--
		if m.IsProposer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetCurrentNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetCurrentNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetCurrentNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetCurrentNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetCurrentNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetCurrentNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGetCurrentNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetCurrentNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGetCurrentNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGetCurrentNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetCurrentNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGetCurrentNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentNode) > 0 {
		i -= len(m.CurrentNode)
		copy(dAtA[i:], m.CurrentNode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CurrentNode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgGrpcSendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Encoding)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGrpcSendRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGrpcReceiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Encoding)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGrpcReceiveRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStartIntervalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Delay != 0 {
		n += 1 + sovTx(uint64(m.Delay))
	}
	if m.Repeat != 0 {
		n += 1 + sovTx(uint64(m.Repeat))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStartIntervalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IntervalId != 0 {
		n += 1 + sovTx(uint64(m.IntervalId))
	}
	return n
}

func (m *MsgPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMakeProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMakeProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetValidators) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGetValidators) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGetValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, s := range m.Validators {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgIsProposer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgIsProposerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsProposer {
		n += 2
	}
	return n
}

func (m *MsgSetCurrentNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetCurrentNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGetCurrentNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGetCurrentNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentNode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgGrpcSendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGrpcSendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGrpcSendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGrpcSendRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGrpcSendRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGrpcSendRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGrpcReceiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGrpcReceiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGrpcReceiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGrpcReceiveRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGrpcReceiveRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGrpcReceiveRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartIntervalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartIntervalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartIntervalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeat", wireType)
			}
			m.Repeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Repeat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args[:0], dAtA[iNdEx:postIndex]...)
			if m.Args == nil {
				m.Args = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartIntervalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartIntervalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartIntervalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalId", wireType)
			}
			m.IntervalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntervalId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMakeProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMakeProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMakeProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMakeProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMakeProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMakeProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetValidators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetValidators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetValidators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetValidators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetValidators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetValidators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIsProposer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIsProposer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIsProposer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIsProposerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIsProposerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIsProposerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsProposer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsProposer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetCurrentNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetCurrentNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetCurrentNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetCurrentNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetCurrentNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetCurrentNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetCurrentNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetCurrentNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetCurrentNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetCurrentNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetCurrentNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetCurrentNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
