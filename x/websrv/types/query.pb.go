// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wasmx/websrv/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryContractByRouteRequest is the request type for the
// Query/ContractByRoute RPC method.
type QueryContractByRouteRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *QueryContractByRouteRequest) Reset()         { *m = QueryContractByRouteRequest{} }
func (m *QueryContractByRouteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryContractByRouteRequest) ProtoMessage()    {}
func (*QueryContractByRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2cce0602bed9396, []int{0}
}
func (m *QueryContractByRouteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractByRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractByRouteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractByRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractByRouteRequest.Merge(m, src)
}
func (m *QueryContractByRouteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractByRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractByRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractByRouteRequest proto.InternalMessageInfo

func (m *QueryContractByRouteRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// QueryContractByRouteResponse is the response type for the
// Query/ContractByRoute RPC method.
type QueryContractByRouteResponse struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryContractByRouteResponse) Reset()         { *m = QueryContractByRouteResponse{} }
func (m *QueryContractByRouteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryContractByRouteResponse) ProtoMessage()    {}
func (*QueryContractByRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2cce0602bed9396, []int{1}
}
func (m *QueryContractByRouteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractByRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractByRouteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractByRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractByRouteResponse.Merge(m, src)
}
func (m *QueryContractByRouteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractByRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractByRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractByRouteResponse proto.InternalMessageInfo

func (m *QueryContractByRouteResponse) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// QueryRouteByContractRequest is the request type for the
// Query/RouteByContract RPC method.
type QueryRouteByContractRequest struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryRouteByContractRequest) Reset()         { *m = QueryRouteByContractRequest{} }
func (m *QueryRouteByContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRouteByContractRequest) ProtoMessage()    {}
func (*QueryRouteByContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2cce0602bed9396, []int{2}
}
func (m *QueryRouteByContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRouteByContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRouteByContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRouteByContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRouteByContractRequest.Merge(m, src)
}
func (m *QueryRouteByContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRouteByContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRouteByContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRouteByContractRequest proto.InternalMessageInfo

func (m *QueryRouteByContractRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// QueryRouteByContractResponse is the response type for the
// Query/RouteByContract RPC method.
type QueryRouteByContractResponse struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *QueryRouteByContractResponse) Reset()         { *m = QueryRouteByContractResponse{} }
func (m *QueryRouteByContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRouteByContractResponse) ProtoMessage()    {}
func (*QueryRouteByContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2cce0602bed9396, []int{3}
}
func (m *QueryRouteByContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRouteByContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRouteByContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRouteByContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRouteByContractResponse.Merge(m, src)
}
func (m *QueryRouteByContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRouteByContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRouteByContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRouteByContractResponse proto.InternalMessageInfo

func (m *QueryRouteByContractResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// QueryHttpGetRequest is the request type for the
// Query/HttpGet RPC method.
type QueryHttpRequestGet struct {
	HttpRequest []byte `protobuf:"bytes,1,opt,name=http_request,json=httpRequest,proto3" json:"http_request,omitempty"`
}

func (m *QueryHttpRequestGet) Reset()         { *m = QueryHttpRequestGet{} }
func (m *QueryHttpRequestGet) String() string { return proto.CompactTextString(m) }
func (*QueryHttpRequestGet) ProtoMessage()    {}
func (*QueryHttpRequestGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2cce0602bed9396, []int{4}
}
func (m *QueryHttpRequestGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHttpRequestGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHttpRequestGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHttpRequestGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHttpRequestGet.Merge(m, src)
}
func (m *QueryHttpRequestGet) XXX_Size() int {
	return m.Size()
}
func (m *QueryHttpRequestGet) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHttpRequestGet.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHttpRequestGet proto.InternalMessageInfo

func (m *QueryHttpRequestGet) GetHttpRequest() []byte {
	if m != nil {
		return m.HttpRequest
	}
	return nil
}

// QueryHttpResponseGet is the response type for the
// Query/HttpGet RPC method.
type QueryHttpResponseGet struct {
	// HttpResponse data = 1;
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryHttpResponseGet) Reset()         { *m = QueryHttpResponseGet{} }
func (m *QueryHttpResponseGet) String() string { return proto.CompactTextString(m) }
func (*QueryHttpResponseGet) ProtoMessage()    {}
func (*QueryHttpResponseGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2cce0602bed9396, []int{5}
}
func (m *QueryHttpResponseGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHttpResponseGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHttpResponseGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHttpResponseGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHttpResponseGet.Merge(m, src)
}
func (m *QueryHttpResponseGet) XXX_Size() int {
	return m.Size()
}
func (m *QueryHttpResponseGet) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHttpResponseGet.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHttpResponseGet proto.InternalMessageInfo

func (m *QueryHttpResponseGet) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2cce0602bed9396, []int{6}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2cce0602bed9396, []int{7}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryContractByRouteRequest)(nil), "wasmx.websrv.QueryContractByRouteRequest")
	proto.RegisterType((*QueryContractByRouteResponse)(nil), "wasmx.websrv.QueryContractByRouteResponse")
	proto.RegisterType((*QueryRouteByContractRequest)(nil), "wasmx.websrv.QueryRouteByContractRequest")
	proto.RegisterType((*QueryRouteByContractResponse)(nil), "wasmx.websrv.QueryRouteByContractResponse")
	proto.RegisterType((*QueryHttpRequestGet)(nil), "wasmx.websrv.QueryHttpRequestGet")
	proto.RegisterType((*QueryHttpResponseGet)(nil), "wasmx.websrv.QueryHttpResponseGet")
	proto.RegisterType((*QueryParamsRequest)(nil), "wasmx.websrv.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "wasmx.websrv.QueryParamsResponse")
}

func init() { proto.RegisterFile("wasmx/websrv/query.proto", fileDescriptor_f2cce0602bed9396) }

var fileDescriptor_f2cce0602bed9396 = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x3d, 0x6f, 0x13, 0x31,
	0x18, 0xce, 0xa1, 0x10, 0x84, 0x1b, 0x29, 0xc8, 0x9c, 0x44, 0x7b, 0x94, 0x4b, 0x6b, 0x54, 0x89,
	0x06, 0x74, 0x56, 0x02, 0x03, 0x2b, 0x61, 0xa0, 0xdd, 0xe0, 0x46, 0x96, 0xca, 0x49, 0xac, 0x4b,
	0x24, 0x72, 0x76, 0xcf, 0x4e, 0x4a, 0x14, 0x65, 0xe1, 0x0f, 0x80, 0xc4, 0xce, 0xce, 0x3f, 0xe9,
	0x58, 0x89, 0x85, 0x09, 0xa1, 0x84, 0x1f, 0x82, 0xee, 0xb5, 0x2f, 0xe4, 0xc3, 0x45, 0xb0, 0x59,
	0x7e, 0x9f, 0xaf, 0xf7, 0xfc, 0xe8, 0xd0, 0xee, 0x05, 0x53, 0xc3, 0xf7, 0xf4, 0x82, 0x77, 0x54,
	0x36, 0xa6, 0xe7, 0x23, 0x9e, 0x4d, 0x22, 0x99, 0x09, 0x2d, 0x70, 0x15, 0x26, 0x91, 0x99, 0x04,
	0x7e, 0x22, 0x12, 0x01, 0x03, 0x9a, 0x9f, 0x0c, 0x26, 0xd8, 0x4f, 0x84, 0x48, 0xde, 0x71, 0xca,
	0xe4, 0x80, 0xb2, 0x34, 0x15, 0x9a, 0xe9, 0x81, 0x48, 0x95, 0x9d, 0x36, 0xba, 0x42, 0x0d, 0x85,
	0xa2, 0x1d, 0xa6, 0xb8, 0x91, 0xa6, 0xe3, 0x66, 0x87, 0x6b, 0xd6, 0xa4, 0x92, 0x25, 0x83, 0x14,
	0xc0, 0x16, 0xbb, 0xb7, 0x96, 0x43, 0xb2, 0x8c, 0x0d, 0xad, 0x0c, 0x69, 0xa2, 0xfb, 0x6f, 0x72,
	0xf2, 0x4b, 0x91, 0xea, 0x8c, 0x75, 0x75, 0x7b, 0x12, 0x8b, 0x91, 0xe6, 0x31, 0x3f, 0x1f, 0x71,
	0xa5, 0x31, 0x46, 0x65, 0xc9, 0x74, 0x7f, 0xd7, 0x3b, 0xf0, 0x1e, 0xdd, 0x8e, 0xe1, 0x4c, 0x4e,
	0xd1, 0xbe, 0x9b, 0xa2, 0xa4, 0x48, 0x15, 0xc7, 0xc7, 0xe8, 0x4e, 0xd7, 0x8e, 0xce, 0x58, 0xaf,
	0x97, 0x71, 0xa5, 0x2c, 0xbf, 0x56, 0xdc, 0xbf, 0x30, 0xd7, 0xe4, 0xc4, 0xba, 0x83, 0x40, 0x7b,
	0xa9, 0x58, 0xb8, 0xff, 0x87, 0x52, 0xcb, 0x86, 0xda, 0x52, 0xb2, 0xa1, 0x5c, 0x8b, 0x3c, 0x47,
	0x77, 0x81, 0x73, 0xa2, 0xb5, 0xb4, 0x96, 0xaf, 0xb8, 0xc6, 0x87, 0xa8, 0xda, 0xd7, 0x5a, 0x9e,
	0x65, 0xe6, 0x0a, 0x28, 0xd5, 0x78, 0xa7, 0xff, 0x07, 0x45, 0x1a, 0xc8, 0x5f, 0x61, 0x1a, 0x8b,
	0x9c, 0x8a, 0x51, 0xb9, 0xc7, 0x34, 0xb3, 0x14, 0x38, 0x13, 0x1f, 0x61, 0xc0, 0xbe, 0x86, 0xcf,
	0x5e, 0x28, 0x9c, 0x5a, 0xef, 0xe2, 0xd6, 0xc6, 0x6c, 0xa1, 0x8a, 0x79, 0x1e, 0x90, 0xd8, 0x69,
	0xf9, 0xd1, 0x6a, 0x51, 0x22, 0x83, 0x6e, 0x97, 0x2f, 0x7f, 0xd4, 0x4b, 0xb1, 0x45, 0xb6, 0xbe,
	0x96, 0xd1, 0x4d, 0xd0, 0xc2, 0x33, 0x74, 0x2b, 0x4f, 0x04, 0x4b, 0xac, 0x13, 0x1d, 0x7b, 0x06,
	0xe4, 0x5a, 0xc8, 0x72, 0x21, 0xf2, 0xf8, 0xc3, 0xb7, 0x5f, 0x9f, 0x6f, 0x1c, 0xe1, 0x87, 0x74,
	0xad, 0x42, 0xe3, 0x26, 0x4d, 0xb8, 0xa6, 0xd3, 0xd5, 0xef, 0x34, 0xc3, 0x1f, 0x3d, 0x54, 0xdb,
	0x28, 0x05, 0x3e, 0x76, 0x98, 0xb8, 0xbb, 0x16, 0x34, 0xfe, 0x05, 0x6a, 0xa2, 0x91, 0x23, 0xc8,
	0x55, 0xc7, 0x0f, 0xb6, 0x72, 0x65, 0x39, 0x8e, 0x4e, 0xf3, 0x07, 0x9e, 0xe1, 0x2f, 0x1e, 0xaa,
	0x6d, 0x34, 0xc2, 0x99, 0xc8, 0xdd, 0x3f, 0x67, 0xa2, 0x6b, 0x0a, 0x46, 0x9e, 0x41, 0xa2, 0x08,
	0x3f, 0xd9, 0x4a, 0x54, 0x54, 0x95, 0x4e, 0x37, 0xcb, 0x3c, 0xc3, 0x29, 0xaa, 0x98, 0x37, 0xc5,
	0x07, 0x0e, 0xaf, 0xb5, 0xca, 0x04, 0x87, 0x7f, 0x41, 0xd8, 0x10, 0x75, 0x08, 0xb1, 0x87, 0xef,
	0x6d, 0x85, 0x30, 0x5d, 0x69, 0x47, 0x97, 0xf3, 0xd0, 0xbb, 0x9a, 0x87, 0xde, 0xcf, 0x79, 0xe8,
	0x7d, 0x5a, 0x84, 0xa5, 0xab, 0x45, 0x58, 0xfa, 0xbe, 0x08, 0x4b, 0x6f, 0x7d, 0xc3, 0x58, 0x72,
	0xf4, 0x44, 0x72, 0xd5, 0xa9, 0xc0, 0x5f, 0xe2, 0xe9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07,
	0xf5, 0x59, 0x8a, 0xca, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// HttpGet makes a get request to the webserver
	HttpGet(ctx context.Context, in *QueryHttpRequestGet, opts ...grpc.CallOption) (*QueryHttpResponseGet, error)
	// ContractByRoute gets the contract controlling a given route
	ContractByRoute(ctx context.Context, in *QueryContractByRouteRequest, opts ...grpc.CallOption) (*QueryContractByRouteResponse, error)
	// RouteByContract gets the route controlled by a given contract
	RouteByContract(ctx context.Context, in *QueryRouteByContractRequest, opts ...grpc.CallOption) (*QueryRouteByContractResponse, error)
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) HttpGet(ctx context.Context, in *QueryHttpRequestGet, opts ...grpc.CallOption) (*QueryHttpResponseGet, error) {
	out := new(QueryHttpResponseGet)
	err := c.cc.Invoke(ctx, "/wasmx.websrv.Query/HttpGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractByRoute(ctx context.Context, in *QueryContractByRouteRequest, opts ...grpc.CallOption) (*QueryContractByRouteResponse, error) {
	out := new(QueryContractByRouteResponse)
	err := c.cc.Invoke(ctx, "/wasmx.websrv.Query/ContractByRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RouteByContract(ctx context.Context, in *QueryRouteByContractRequest, opts ...grpc.CallOption) (*QueryRouteByContractResponse, error) {
	out := new(QueryRouteByContractResponse)
	err := c.cc.Invoke(ctx, "/wasmx.websrv.Query/RouteByContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/wasmx.websrv.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// HttpGet makes a get request to the webserver
	HttpGet(context.Context, *QueryHttpRequestGet) (*QueryHttpResponseGet, error)
	// ContractByRoute gets the contract controlling a given route
	ContractByRoute(context.Context, *QueryContractByRouteRequest) (*QueryContractByRouteResponse, error)
	// RouteByContract gets the route controlled by a given contract
	RouteByContract(context.Context, *QueryRouteByContractRequest) (*QueryRouteByContractResponse, error)
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) HttpGet(ctx context.Context, req *QueryHttpRequestGet) (*QueryHttpResponseGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpGet not implemented")
}
func (*UnimplementedQueryServer) ContractByRoute(ctx context.Context, req *QueryContractByRouteRequest) (*QueryContractByRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractByRoute not implemented")
}
func (*UnimplementedQueryServer) RouteByContract(ctx context.Context, req *QueryRouteByContractRequest) (*QueryRouteByContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteByContract not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_HttpGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHttpRequestGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HttpGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasmx.websrv.Query/HttpGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HttpGet(ctx, req.(*QueryHttpRequestGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractByRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryContractByRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractByRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasmx.websrv.Query/ContractByRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractByRoute(ctx, req.(*QueryContractByRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RouteByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRouteByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RouteByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasmx.websrv.Query/RouteByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RouteByContract(ctx, req.(*QueryRouteByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasmx.websrv.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wasmx.websrv.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HttpGet",
			Handler:    _Query_HttpGet_Handler,
		},
		{
			MethodName: "ContractByRoute",
			Handler:    _Query_ContractByRoute_Handler,
		},
		{
			MethodName: "RouteByContract",
			Handler:    _Query_RouteByContract_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wasmx/websrv/query.proto",
}

func (m *QueryContractByRouteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractByRouteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractByRouteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractByRouteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractByRouteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractByRouteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRouteByContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRouteByContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRouteByContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRouteByContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRouteByContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRouteByContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHttpRequestGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHttpRequestGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHttpRequestGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HttpRequest) > 0 {
		i -= len(m.HttpRequest)
		copy(dAtA[i:], m.HttpRequest)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.HttpRequest)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHttpResponseGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHttpResponseGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHttpResponseGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryContractByRouteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryContractByRouteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRouteByContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRouteByContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHttpRequestGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HttpRequest)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHttpResponseGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryContractByRouteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractByRouteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractByRouteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractByRouteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractByRouteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractByRouteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRouteByContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRouteByContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRouteByContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRouteByContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRouteByContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRouteByContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHttpRequestGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHttpRequestGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHttpRequestGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRequest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpRequest = append(m.HttpRequest[:0], dAtA[iNdEx:postIndex]...)
			if m.HttpRequest == nil {
				m.HttpRequest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHttpResponseGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHttpResponseGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHttpResponseGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
