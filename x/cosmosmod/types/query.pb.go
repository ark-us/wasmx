// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/cosmosmod/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("mythos/cosmosmod/v1/query.proto", fileDescriptor_5d14a81fc6ecaa74) }

var fileDescriptor_5d14a81fc6ecaa74 = []byte{
	// 769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x77, 0x44, 0x0b, 0x0e, 0x28, 0xf8, 0xb6, 0x28, 0x6e, 0x6b, 0x94, 0xd2, 0x83, 0x6d,
	0x31, 0xe3, 0xb6, 0xda, 0x3f, 0x07, 0xb5, 0x5b, 0x7b, 0xb0, 0x54, 0xb4, 0x2d, 0xd8, 0x83, 0x28,
	0xcb, 0x6c, 0x37, 0xcd, 0x06, 0x77, 0x33, 0xdb, 0x4c, 0xba, 0x58, 0x4a, 0x2f, 0x1e, 0xc4, 0x93,
	0x08, 0xde, 0xfd, 0x04, 0x1e, 0x7a, 0xf4, 0x13, 0x48, 0x0f, 0x22, 0x05, 0x11, 0xf4, 0xa6, 0x5d,
	0xc1, 0x2f, 0x21, 0x22, 0x49, 0xde, 0x64, 0x52, 0xba, 0x9b, 0x26, 0x5b, 0xa1, 0x94, 0x9d, 0x9d,
	0xe7, 0x99, 0xf7, 0xf9, 0xbd, 0xc9, 0x4b, 0x36, 0xf4, 0x72, 0x7d, 0xd3, 0xad, 0x0a, 0xc9, 0x56,
	0x85, 0xac, 0x7b, 0x7f, 0x15, 0xd6, 0x2c, 0xb0, 0xf5, 0x0d, 0xc3, 0xd9, 0xd4, 0x1b, 0x8e, 0x70,
	0x05, 0xf4, 0x06, 0x02, 0x3d, 0x12, 0xe8, 0xcd, 0x42, 0xbe, 0xcf, 0x14, 0xa6, 0xf0, 0xf7, 0x99,
	0xf7, 0x29, 0x90, 0xe6, 0x07, 0x4c, 0x21, 0xcc, 0x9a, 0xc1, 0x78, 0xc3, 0x62, 0xdc, 0xb6, 0x85,
	0xcb, 0x5d, 0x4b, 0xd8, 0x12, 0x77, 0x2f, 0x06, 0x27, 0x94, 0x02, 0x5b, 0xb0, 0xc0, 0xad, 0x0b,
	0xc1, 0x8a, 0xd5, 0xa5, 0xe9, 0x95, 0xaf, 0x4b, 0x13, 0x37, 0x46, 0x70, 0xa3, 0xcc, 0xa5, 0x11,
	0xa4, 0x62, 0xcd, 0x42, 0xd9, 0x70, 0x79, 0x81, 0x35, 0xb8, 0x69, 0xd9, 0x7e, 0x01, 0xd4, 0x9e,
	0xe3, 0x75, 0xcb, 0x16, 0xcc, 0xff, 0x8f, 0x5f, 0x0d, 0xa1, 0x5d, 0xba, 0xfc, 0x99, 0x65, 0x9b,
	0x91, 0x17, 0xd7, 0xa8, 0x1a, 0xec, 0xa0, 0x8a, 0x75, 0x21, 0xdf, 0x8f, 0x9a, 0x30, 0x43, 0x7c,
	0x73, 0x6c, 0xe7, 0x3c, 0x3d, 0xb5, 0xe4, 0xad, 0xe1, 0x1d, 0xa1, 0x74, 0x85, 0xd7, 0xac, 0x0a,
	0x77, 0x85, 0x23, 0x41, 0xc7, 0xae, 0xe9, 0x61, 0x41, 0x3c, 0x5a, 0xf7, 0xd5, 0x4a, 0xb8, 0x6c,
	0xac, 0x6f, 0x18, 0xd2, 0xcd, 0xb3, 0xd4, 0x7a, 0xd9, 0x10, 0xb6, 0x34, 0x06, 0xd9, 0xab, 0xdf,
	0x3b, 0x23, 0xe4, 0xc5, 0x97, 0x5f, 0x6f, 0x4f, 0x0c, 0xc1, 0x20, 0xeb, 0x00, 0xd2, 0x54, 0x89,
	0xde, 0x13, 0x7a, 0x3a, 0x3a, 0x07, 0xae, 0xa5, 0xab, 0x17, 0xc6, 0xd3, 0xd3, 0xca, 0x31, 0xdd,
	0x8c, 0x4a, 0x77, 0x13, 0xc6, 0x8f, 0x4e, 0xc7, 0xb6, 0xa2, 0xcf, 0x25, 0x5e, 0xa9, 0x38, 0xdb,
	0xf0, 0x9d, 0xd0, 0xbe, 0xe8, 0xdc, 0x39, 0xa3, 0x66, 0x98, 0xc1, 0x2d, 0x05, 0x53, 0xe9, 0xa2,
	0xc4, 0x2c, 0x21, 0xc4, 0x74, 0x17, 0x4e, 0xe4, 0xb9, 0xaf, 0x78, 0x8a, 0x70, 0xa7, 0x0b, 0x1e,
	0x56, 0x89, 0x21, 0xfc, 0x25, 0xf4, 0x52, 0x54, 0xee, 0x91, 0x5d, 0x16, 0x76, 0xc5, 0xb2, 0xcd,
	0x38, 0x64, 0x31, 0x5d, 0xd4, 0x76, 0xde, 0x90, 0x76, 0xf6, 0x38, 0x47, 0x20, 0xf6, 0x8a, 0xc2,
	0x5e, 0x80, 0xf9, 0x6e, 0xb0, 0x37, 0xc2, 0xe3, 0x4b, 0xf1, 0x06, 0x7c, 0x22, 0x94, 0xaa, 0x7a,
	0x47, 0x0c, 0x8b, 0x12, 0xa6, 0x1b, 0x96, 0xb8, 0x1e, 0x39, 0x9e, 0x2a, 0x8e, 0x65, 0x58, 0x3c,
	0xe6, 0xe5, 0x63, 0x5b, 0xb8, 0x88, 0xee, 0xd5, 0x3f, 0x84, 0xf6, 0xb6, 0xe9, 0x23, 0x4c, 0x26,
	0xe6, 0x6c, 0xe3, 0x08, 0x01, 0xa7, 0xb2, 0x1b, 0x91, 0xd4, 0x51, 0xa4, 0x26, 0x18, 0xff, 0x9b,
	0xb4, 0xed, 0xe5, 0x84, 0xcf, 0x84, 0xf6, 0xcd, 0x85, 0xc2, 0xf4, 0xa3, 0xda, 0xce, 0x92, 0x6e,
	0x54, 0xdb, 0x3b, 0xb1, 0x03, 0x45, 0xd5, 0x81, 0x09, 0xb8, 0xd1, 0xa9, 0x03, 0x89, 0xd7, 0xd3,
	0x9b, 0xcf, 0xa8, 0x46, 0x17, 0xf3, 0x99, 0xe8, 0x4d, 0x37, 0x9f, 0x47, 0x1c, 0x91, 0x69, 0x3e,
	0x23, 0xbc, 0x94, 0x17, 0x54, 0xc2, 0x47, 0x42, 0xcf, 0x2c, 0x1b, 0xf1, 0x6f, 0x0a, 0x89, 0x69,
	0x0f, 0x68, 0x43, 0xc0, 0xb1, 0x2c, 0x16, 0x04, 0x7a, 0xa0, 0x80, 0xee, 0x42, 0xb1, 0x1b, 0x20,
	0xe7, 0x40, 0xec, 0xaf, 0x84, 0xf6, 0x46, 0xad, 0x8c, 0x3d, 0x9e, 0x27, 0xd3, 0x35, 0xff, 0xf0,
	0x73, 0x7a, 0x2a, 0xbb, 0x11, 0xd1, 0x16, 0x14, 0xda, 0x0c, 0xdc, 0xee, 0x06, 0x2d, 0xf6, 0x30,
	0x6f, 0x11, 0x0a, 0x87, 0x8b, 0xc1, 0x44, 0xc6, 0x74, 0x21, 0xd5, 0x64, 0x66, 0x1f, 0x42, 0x3d,
	0x51, 0x50, 0x4b, 0xf0, 0xf0, 0x78, 0x50, 0x87, 0x7f, 0x03, 0x7c, 0x20, 0xf4, 0xec, 0x3d, 0x4b,
	0xba, 0xc2, 0xb1, 0x56, 0x79, 0x6d, 0xde, 0x5e, 0x13, 0x90, 0x7c, 0x53, 0x1d, 0x14, 0x87, 0x74,
	0xe3, 0x99, 0x3c, 0x48, 0x76, 0x4b, 0x91, 0x8d, 0xc1, 0xf5, 0x4e, 0x64, 0xd5, 0xc8, 0x5c, 0xb2,
	0xec, 0x35, 0xc1, 0xb6, 0xaa, 0x86, 0x65, 0x56, 0xdd, 0x6d, 0x78, 0x49, 0xe8, 0xc9, 0x45, 0x21,
	0x6a, 0x70, 0x35, 0xb1, 0xb8, 0x27, 0x09, 0x63, 0x0e, 0xa7, 0x50, 0x62, 0xb8, 0x61, 0x15, 0x4e,
	0x83, 0x81, 0x4e, 0xe1, 0x1a, 0x5e, 0xfd, 0xd7, 0x84, 0xf6, 0x2c, 0x72, 0x87, 0xd7, 0x25, 0x8c,
	0x24, 0x17, 0xf0, 0x45, 0x61, 0x98, 0xd1, 0x54, 0x5a, 0x8c, 0x33, 0xaa, 0xe2, 0x5c, 0x01, 0xad,
	0x63, 0x1c, 0xdf, 0x34, 0x3b, 0xbd, 0xfb, 0x53, 0xcb, 0xed, 0xee, 0x6b, 0x64, 0x6f, 0x5f, 0x23,
	0x3f, 0xf6, 0x35, 0xf2, 0xa6, 0xa5, 0xe5, 0xf6, 0x5a, 0x5a, 0xee, 0x5b, 0x4b, 0xcb, 0x3d, 0xee,
	0xc7, 0x97, 0x92, 0x66, 0x81, 0x3d, 0x8f, 0xbd, 0x99, 0xb8, 0x9b, 0x0d, 0x43, 0x96, 0x7b, 0xfc,
	0x1f, 0xdd, 0xe3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x34, 0xc1, 0x55, 0x49, 0xba, 0x0c, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Validators queries all validators that match the given status.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Validators(ctx context.Context, in *types.QueryValidatorsRequest, opts ...grpc.CallOption) (*types.QueryValidatorsResponse, error)
	// Validator queries validator info for given validator address.
	Validator(ctx context.Context, in *types.QueryValidatorRequest, opts ...grpc.CallOption) (*types.QueryValidatorResponse, error)
	// ValidatorDelegations queries delegate info for given validator.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	ValidatorDelegations(ctx context.Context, in *types.QueryValidatorDelegationsRequest, opts ...grpc.CallOption) (*types.QueryValidatorDelegationsResponse, error)
	// ValidatorUnbondingDelegations queries unbonding delegations of a validator.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	ValidatorUnbondingDelegations(ctx context.Context, in *types.QueryValidatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*types.QueryValidatorUnbondingDelegationsResponse, error)
	// Delegation queries delegate info for given validator delegator pair.
	Delegation(ctx context.Context, in *types.QueryDelegationRequest, opts ...grpc.CallOption) (*types.QueryDelegationResponse, error)
	// UnbondingDelegation queries unbonding info for given validator delegator
	// pair.
	UnbondingDelegation(ctx context.Context, in *types.QueryUnbondingDelegationRequest, opts ...grpc.CallOption) (*types.QueryUnbondingDelegationResponse, error)
	// DelegatorDelegations queries all delegations of a given delegator address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	DelegatorDelegations(ctx context.Context, in *types.QueryDelegatorDelegationsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorDelegationsResponse, error)
	// DelegatorUnbondingDelegations queries all unbonding delegations of a given
	// delegator address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	DelegatorUnbondingDelegations(ctx context.Context, in *types.QueryDelegatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorUnbondingDelegationsResponse, error)
	// Redelegations queries redelegations of given address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Redelegations(ctx context.Context, in *types.QueryRedelegationsRequest, opts ...grpc.CallOption) (*types.QueryRedelegationsResponse, error)
	// DelegatorValidators queries all validators info for given delegator
	// address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	DelegatorValidators(ctx context.Context, in *types.QueryDelegatorValidatorsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorValidatorsResponse, error)
	// DelegatorValidator queries validator info for given delegator validator
	// pair.
	DelegatorValidator(ctx context.Context, in *types.QueryDelegatorValidatorRequest, opts ...grpc.CallOption) (*types.QueryDelegatorValidatorResponse, error)
	// HistoricalInfo queries the historical info for given height.
	HistoricalInfo(ctx context.Context, in *types.QueryHistoricalInfoRequest, opts ...grpc.CallOption) (*types.QueryHistoricalInfoResponse, error)
	// Pool queries the pool info.
	Pool(ctx context.Context, in *types.QueryPoolRequest, opts ...grpc.CallOption) (*types.QueryPoolResponse, error)
	// Parameters queries the staking parameters.
	Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Validators(ctx context.Context, in *types.QueryValidatorsRequest, opts ...grpc.CallOption) (*types.QueryValidatorsResponse, error) {
	out := new(types.QueryValidatorsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/Validators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validator(ctx context.Context, in *types.QueryValidatorRequest, opts ...grpc.CallOption) (*types.QueryValidatorResponse, error) {
	out := new(types.QueryValidatorResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/Validator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorDelegations(ctx context.Context, in *types.QueryValidatorDelegationsRequest, opts ...grpc.CallOption) (*types.QueryValidatorDelegationsResponse, error) {
	out := new(types.QueryValidatorDelegationsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/ValidatorDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorUnbondingDelegations(ctx context.Context, in *types.QueryValidatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*types.QueryValidatorUnbondingDelegationsResponse, error) {
	out := new(types.QueryValidatorUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/ValidatorUnbondingDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Delegation(ctx context.Context, in *types.QueryDelegationRequest, opts ...grpc.CallOption) (*types.QueryDelegationResponse, error) {
	out := new(types.QueryDelegationResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/Delegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnbondingDelegation(ctx context.Context, in *types.QueryUnbondingDelegationRequest, opts ...grpc.CallOption) (*types.QueryUnbondingDelegationResponse, error) {
	out := new(types.QueryUnbondingDelegationResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/UnbondingDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorDelegations(ctx context.Context, in *types.QueryDelegatorDelegationsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorDelegationsResponse, error) {
	out := new(types.QueryDelegatorDelegationsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/DelegatorDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorUnbondingDelegations(ctx context.Context, in *types.QueryDelegatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorUnbondingDelegationsResponse, error) {
	out := new(types.QueryDelegatorUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/DelegatorUnbondingDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Redelegations(ctx context.Context, in *types.QueryRedelegationsRequest, opts ...grpc.CallOption) (*types.QueryRedelegationsResponse, error) {
	out := new(types.QueryRedelegationsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/Redelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorValidators(ctx context.Context, in *types.QueryDelegatorValidatorsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorValidatorsResponse, error) {
	out := new(types.QueryDelegatorValidatorsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/DelegatorValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorValidator(ctx context.Context, in *types.QueryDelegatorValidatorRequest, opts ...grpc.CallOption) (*types.QueryDelegatorValidatorResponse, error) {
	out := new(types.QueryDelegatorValidatorResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/DelegatorValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoricalInfo(ctx context.Context, in *types.QueryHistoricalInfoRequest, opts ...grpc.CallOption) (*types.QueryHistoricalInfoResponse, error) {
	out := new(types.QueryHistoricalInfoResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/HistoricalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *types.QueryPoolRequest, opts ...grpc.CallOption) (*types.QueryPoolResponse, error) {
	out := new(types.QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	out := new(types.QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Validators queries all validators that match the given status.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Validators(context.Context, *types.QueryValidatorsRequest) (*types.QueryValidatorsResponse, error)
	// Validator queries validator info for given validator address.
	Validator(context.Context, *types.QueryValidatorRequest) (*types.QueryValidatorResponse, error)
	// ValidatorDelegations queries delegate info for given validator.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	ValidatorDelegations(context.Context, *types.QueryValidatorDelegationsRequest) (*types.QueryValidatorDelegationsResponse, error)
	// ValidatorUnbondingDelegations queries unbonding delegations of a validator.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	ValidatorUnbondingDelegations(context.Context, *types.QueryValidatorUnbondingDelegationsRequest) (*types.QueryValidatorUnbondingDelegationsResponse, error)
	// Delegation queries delegate info for given validator delegator pair.
	Delegation(context.Context, *types.QueryDelegationRequest) (*types.QueryDelegationResponse, error)
	// UnbondingDelegation queries unbonding info for given validator delegator
	// pair.
	UnbondingDelegation(context.Context, *types.QueryUnbondingDelegationRequest) (*types.QueryUnbondingDelegationResponse, error)
	// DelegatorDelegations queries all delegations of a given delegator address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	DelegatorDelegations(context.Context, *types.QueryDelegatorDelegationsRequest) (*types.QueryDelegatorDelegationsResponse, error)
	// DelegatorUnbondingDelegations queries all unbonding delegations of a given
	// delegator address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	DelegatorUnbondingDelegations(context.Context, *types.QueryDelegatorUnbondingDelegationsRequest) (*types.QueryDelegatorUnbondingDelegationsResponse, error)
	// Redelegations queries redelegations of given address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Redelegations(context.Context, *types.QueryRedelegationsRequest) (*types.QueryRedelegationsResponse, error)
	// DelegatorValidators queries all validators info for given delegator
	// address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	DelegatorValidators(context.Context, *types.QueryDelegatorValidatorsRequest) (*types.QueryDelegatorValidatorsResponse, error)
	// DelegatorValidator queries validator info for given delegator validator
	// pair.
	DelegatorValidator(context.Context, *types.QueryDelegatorValidatorRequest) (*types.QueryDelegatorValidatorResponse, error)
	// HistoricalInfo queries the historical info for given height.
	HistoricalInfo(context.Context, *types.QueryHistoricalInfoRequest) (*types.QueryHistoricalInfoResponse, error)
	// Pool queries the pool info.
	Pool(context.Context, *types.QueryPoolRequest) (*types.QueryPoolResponse, error)
	// Parameters queries the staking parameters.
	Params(context.Context, *types.QueryParamsRequest) (*types.QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Validators(ctx context.Context, req *types.QueryValidatorsRequest) (*types.QueryValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (*UnimplementedQueryServer) Validator(ctx context.Context, req *types.QueryValidatorRequest) (*types.QueryValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validator not implemented")
}
func (*UnimplementedQueryServer) ValidatorDelegations(ctx context.Context, req *types.QueryValidatorDelegationsRequest) (*types.QueryValidatorDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorDelegations not implemented")
}
func (*UnimplementedQueryServer) ValidatorUnbondingDelegations(ctx context.Context, req *types.QueryValidatorUnbondingDelegationsRequest) (*types.QueryValidatorUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorUnbondingDelegations not implemented")
}
func (*UnimplementedQueryServer) Delegation(ctx context.Context, req *types.QueryDelegationRequest) (*types.QueryDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegation not implemented")
}
func (*UnimplementedQueryServer) UnbondingDelegation(ctx context.Context, req *types.QueryUnbondingDelegationRequest) (*types.QueryUnbondingDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbondingDelegation not implemented")
}
func (*UnimplementedQueryServer) DelegatorDelegations(ctx context.Context, req *types.QueryDelegatorDelegationsRequest) (*types.QueryDelegatorDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorDelegations not implemented")
}
func (*UnimplementedQueryServer) DelegatorUnbondingDelegations(ctx context.Context, req *types.QueryDelegatorUnbondingDelegationsRequest) (*types.QueryDelegatorUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorUnbondingDelegations not implemented")
}
func (*UnimplementedQueryServer) Redelegations(ctx context.Context, req *types.QueryRedelegationsRequest) (*types.QueryRedelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redelegations not implemented")
}
func (*UnimplementedQueryServer) DelegatorValidators(ctx context.Context, req *types.QueryDelegatorValidatorsRequest) (*types.QueryDelegatorValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorValidators not implemented")
}
func (*UnimplementedQueryServer) DelegatorValidator(ctx context.Context, req *types.QueryDelegatorValidatorRequest) (*types.QueryDelegatorValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorValidator not implemented")
}
func (*UnimplementedQueryServer) HistoricalInfo(ctx context.Context, req *types.QueryHistoricalInfoRequest) (*types.QueryHistoricalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalInfo not implemented")
}
func (*UnimplementedQueryServer) Pool(ctx context.Context, req *types.QueryPoolRequest) (*types.QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *types.QueryParamsRequest) (*types.QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/Validators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validators(ctx, req.(*types.QueryValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/Validator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validator(ctx, req.(*types.QueryValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryValidatorDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/ValidatorDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorDelegations(ctx, req.(*types.QueryValidatorDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryValidatorUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/ValidatorUnbondingDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorUnbondingDelegations(ctx, req.(*types.QueryValidatorUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Delegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Delegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/Delegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Delegation(ctx, req.(*types.QueryDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnbondingDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryUnbondingDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnbondingDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/UnbondingDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnbondingDelegation(ctx, req.(*types.QueryUnbondingDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDelegatorDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/DelegatorDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorDelegations(ctx, req.(*types.QueryDelegatorDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDelegatorUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/DelegatorUnbondingDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorUnbondingDelegations(ctx, req.(*types.QueryDelegatorUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Redelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryRedelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Redelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/Redelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Redelegations(ctx, req.(*types.QueryRedelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDelegatorValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/DelegatorValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorValidators(ctx, req.(*types.QueryDelegatorValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDelegatorValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/DelegatorValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorValidator(ctx, req.(*types.QueryDelegatorValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoricalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryHistoricalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoricalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/HistoricalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoricalInfo(ctx, req.(*types.QueryHistoricalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*types.QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*types.QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mythos.cosmosmod.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validators",
			Handler:    _Query_Validators_Handler,
		},
		{
			MethodName: "Validator",
			Handler:    _Query_Validator_Handler,
		},
		{
			MethodName: "ValidatorDelegations",
			Handler:    _Query_ValidatorDelegations_Handler,
		},
		{
			MethodName: "ValidatorUnbondingDelegations",
			Handler:    _Query_ValidatorUnbondingDelegations_Handler,
		},
		{
			MethodName: "Delegation",
			Handler:    _Query_Delegation_Handler,
		},
		{
			MethodName: "UnbondingDelegation",
			Handler:    _Query_UnbondingDelegation_Handler,
		},
		{
			MethodName: "DelegatorDelegations",
			Handler:    _Query_DelegatorDelegations_Handler,
		},
		{
			MethodName: "DelegatorUnbondingDelegations",
			Handler:    _Query_DelegatorUnbondingDelegations_Handler,
		},
		{
			MethodName: "Redelegations",
			Handler:    _Query_Redelegations_Handler,
		},
		{
			MethodName: "DelegatorValidators",
			Handler:    _Query_DelegatorValidators_Handler,
		},
		{
			MethodName: "DelegatorValidator",
			Handler:    _Query_DelegatorValidator_Handler,
		},
		{
			MethodName: "HistoricalInfo",
			Handler:    _Query_HistoricalInfo_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mythos/cosmosmod/v1/query.proto",
}
