// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/cosmosmod/v1/bank_query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("mythos/cosmosmod/v1/bank_query.proto", fileDescriptor_662bfd597db59dc3)
}

var fileDescriptor_662bfd597db59dc3 = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0x1e, 0xaa, 0x4e, 0xb0, 0xd0, 0x51, 0x28, 0xa6, 0xba, 0xa2, 0x16, 0xfb, 0xc3,
	0xba, 0xd3, 0x6d, 0x45, 0xac, 0xa8, 0x60, 0x50, 0x3c, 0x49, 0xd5, 0x7a, 0xf2, 0xb2, 0xcc, 0x76,
	0xc7, 0x35, 0x74, 0x77, 0x66, 0x9b, 0xd9, 0x46, 0x97, 0xd2, 0x8b, 0x20, 0x78, 0x14, 0xec, 0x49,
	0x10, 0xc4, 0x83, 0x17, 0x2f, 0x9e, 0x3c, 0xf9, 0x07, 0xf4, 0x58, 0xf0, 0xa0, 0x47, 0x6d, 0x04,
	0xff, 0x0d, 0xd9, 0xd9, 0xd9, 0x1f, 0x89, 0x9b, 0x74, 0x2a, 0x84, 0x90, 0xd9, 0xf7, 0xfd, 0xbe,
	0xf7, 0x79, 0x2f, 0x33, 0xc9, 0xc0, 0xc9, 0x20, 0x8e, 0x9e, 0x72, 0x81, 0x57, 0xb9, 0x08, 0x92,
	0x97, 0x8b, 0x3b, 0x16, 0x76, 0x08, 0x5b, 0xb3, 0xd7, 0x37, 0x68, 0x3b, 0x36, 0xc3, 0x36, 0x8f,
	0x38, 0x3a, 0x9e, 0xaa, 0xcc, 0x5c, 0x65, 0x76, 0xac, 0xc6, 0x09, 0x8f, 0x7b, 0x5c, 0xc6, 0x71,
	0xf2, 0x29, 0x95, 0x36, 0x4e, 0x79, 0x9c, 0x7b, 0x3e, 0xc5, 0x24, 0x6c, 0x61, 0xc2, 0x18, 0x8f,
	0x48, 0xd4, 0xe2, 0x4c, 0xa8, 0xe8, 0xc9, 0x34, 0x83, 0x9d, 0xda, 0xd2, 0x85, 0x0a, 0x8d, 0xa7,
	0x2b, 0x1c, 0x08, 0x2f, 0x61, 0x08, 0x84, 0xa7, 0x02, 0xb3, 0x2a, 0xe0, 0x10, 0x41, 0xb1, 0xa4,
	0xc2, 0x1d, 0xcb, 0xa1, 0x11, 0xb1, 0x70, 0x48, 0xbc, 0x16, 0x93, 0x05, 0x94, 0x76, 0x8c, 0x04,
	0x2d, 0xc6, 0xb1, 0x7c, 0x57, 0x8f, 0x8c, 0xdc, 0xce, 0xd6, 0x72, 0x63, 0xb2, 0x50, 0xf1, 0x33,
	0x55, 0xf1, 0x52, 0xf3, 0x8d, 0x09, 0x25, 0xc8, 0x4a, 0x97, 0x83, 0x0b, 0x5f, 0x46, 0xe1, 0xd1,
	0x07, 0xc9, 0xba, 0x49, 0xd8, 0x1a, 0x7a, 0x07, 0xe0, 0xe1, 0x26, 0xf1, 0x09, 0x5b, 0xa5, 0x68,
	0x5a, 0x4d, 0xcb, 0x94, 0xb5, 0x54, 0x62, 0x53, 0x69, 0xa5, 0xe4, 0x21, 0x5d, 0xdf, 0xa0, 0x22,
	0x6a, 0xcc, 0x68, 0x28, 0x45, 0xc8, 0x99, 0xa0, 0xe7, 0x6e, 0xbc, 0xfa, 0xf3, 0x79, 0x16, 0xbc,
	0xf8, 0xf6, 0xfb, 0xcd, 0xa1, 0x05, 0x34, 0x8f, 0xab, 0x5b, 0x93, 0x16, 0x81, 0x37, 0x89, 0xeb,
	0xb6, 0xa9, 0x10, 0x5b, 0xd8, 0x89, 0x6d, 0x97, 0x32, 0x1e, 0xa0, 0xf7, 0x00, 0xd6, 0x6f, 0xf9,
	0xbe, 0xca, 0x2a, 0xd0, 0xdc, 0xe0, 0xca, 0x25, 0x59, 0xc6, 0x79, 0x49, 0x53, 0xad, 0x58, 0x2f,
	0x17, 0xac, 0x33, 0x68, 0x4a, 0x93, 0x15, 0x7d, 0x05, 0x70, 0x6c, 0x25, 0xa4, 0xcc, 0x25, 0x8e,
	0x4f, 0x73, 0xd0, 0x85, 0xc1, 0xa5, 0xff, 0x11, 0x67, 0xb8, 0x8b, 0x07, 0xf2, 0x28, 0xe8, 0x9b,
	0x05, 0xf4, 0x22, 0xb2, 0x2a, 0xa1, 0x45, 0x66, 0xb6, 0x2b, 0xf0, 0xbf, 0x03, 0x38, 0xde, 0x9f,
	0xbd, 0x19, 0xdf, 0x96, 0xd3, 0xbf, 0xaa, 0x0f, 0xa4, 0x2c, 0x59, 0x2b, 0x4b, 0xff, 0xe1, 0x54,
	0x0d, 0xdd, 0x2d, 0x1a, 0xba, 0x8e, 0xae, 0x1d, 0xb8, 0xa1, 0x62, 0xef, 0x6c, 0x03, 0x58, 0x7f,
	0xc4, 0x23, 0xe2, 0xaf, 0x6c, 0x84, 0xa1, 0x1f, 0x0f, 0xdb, 0x3b, 0x25, 0x99, 0xc6, 0xde, 0xe9,
	0x51, 0x2b, 0xea, 0xe9, 0x82, 0xfa, 0x34, 0x9a, 0xa8, 0xa6, 0x4e, 0x31, 0xb6, 0x01, 0x3c, 0x92,
	0x9a, 0x97, 0x9f, 0xa0, 0x21, 0x27, 0x29, 0xd3, 0x64, 0x40, 0xb3, 0x3a, 0x52, 0x45, 0x63, 0x15,
	0x34, 0x17, 0xd0, 0xe4, 0x10, 0x9a, 0x62, 0x5a, 0x2f, 0x01, 0x1c, 0xb9, 0x4f, 0xda, 0x24, 0x10,
	0x68, 0x6a, 0x70, 0xa5, 0x54, 0x91, 0x21, 0x4d, 0xef, 0x2f, 0xd4, 0x1f, 0x4f, 0x98, 0x16, 0xff,
	0x04, 0xe0, 0x31, 0xb9, 0x21, 0xee, 0xd1, 0x88, 0xb8, 0x24, 0x22, 0xc8, 0x1c, 0x5c, 0xa5, 0x47,
	0x98, 0x51, 0x61, 0x6d, 0xbd, 0x82, 0x5b, 0x2a, 0xe0, 0x4c, 0x34, 0x57, 0x09, 0x27, 0x67, 0x24,
	0xec, 0x40, 0x59, 0xf1, 0xa6, 0x7c, 0xb0, 0x85, 0x3e, 0x02, 0x38, 0x2a, 0x93, 0x8a, 0x1c, 0x77,
	0xbf, 0xf2, 0xa2, 0x9f, 0x77, 0x5e, 0xdf, 0xa0, 0xff, 0xf5, 0xf6, 0x01, 0xa3, 0x0f, 0x00, 0xd6,
	0x65, 0xb6, 0xe5, 0x67, 0x8c, 0xb6, 0x87, 0xfe, 0x90, 0x96, 0x64, 0x1a, 0x87, 0xa1, 0x47, 0xad,
	0xf8, 0xae, 0x14, 0x7c, 0x17, 0xd1, 0xcc, 0x60, 0x3e, 0x9b, 0x4b, 0x5f, 0x3e, 0xcd, 0xb7, 0x00,
	0xd6, 0x57, 0x28, 0x73, 0xef, 0xb0, 0xe4, 0x70, 0xbb, 0xc3, 0x20, 0x4b, 0x32, 0x0d, 0xc8, 0x1e,
	0xb5, 0x82, 0x34, 0x0b, 0xc8, 0xf3, 0xe8, 0x6c, 0xf5, 0x19, 0xa1, 0xcc, 0xb5, 0x69, 0xea, 0x6b,
	0x2e, 0xed, 0xfc, 0x32, 0x6a, 0x3b, 0x7b, 0x06, 0xd8, 0xdd, 0x33, 0xc0, 0xcf, 0x3d, 0x03, 0xbc,
	0xee, 0x1a, 0xb5, 0xdd, 0xae, 0x51, 0xfb, 0xd1, 0x35, 0x6a, 0x8f, 0x27, 0xd4, 0xb5, 0xa4, 0x63,
	0xe1, 0xe7, 0xa5, 0xbb, 0x49, 0x14, 0x87, 0x54, 0x38, 0x23, 0xf2, 0xaf, 0x77, 0xf1, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x3f, 0x8b, 0x32, 0x76, 0xbc, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryBankClient is the client API for QueryBank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryBankClient interface {
	// Balance queries the balance of a single coin for a single account.
	Balance(ctx context.Context, in *types.QueryBalanceRequest, opts ...grpc.CallOption) (*types.QueryBalanceResponse, error)
	// AllBalances queries the balance of all coins for a single account.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	AllBalances(ctx context.Context, in *types.QueryAllBalancesRequest, opts ...grpc.CallOption) (*types.QueryAllBalancesResponse, error)
	// SpendableBalances queries the spendable balance of all coins for a single
	// account.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	//
	// Since: cosmos-sdk 0.46
	SpendableBalances(ctx context.Context, in *types.QuerySpendableBalancesRequest, opts ...grpc.CallOption) (*types.QuerySpendableBalancesResponse, error)
	// SpendableBalanceByDenom queries the spendable balance of a single denom for
	// a single account.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	//
	// Since: cosmos-sdk 0.47
	SpendableBalanceByDenom(ctx context.Context, in *types.QuerySpendableBalanceByDenomRequest, opts ...grpc.CallOption) (*types.QuerySpendableBalanceByDenomResponse, error)
	// TotalSupply queries the total supply of all coins.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	TotalSupply(ctx context.Context, in *types.QueryTotalSupplyRequest, opts ...grpc.CallOption) (*types.QueryTotalSupplyResponse, error)
	// SupplyOf queries the supply of a single coin.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	SupplyOf(ctx context.Context, in *types.QuerySupplyOfRequest, opts ...grpc.CallOption) (*types.QuerySupplyOfResponse, error)
	// Params queries the parameters of x/bank module.
	Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error)
	// DenomMetadata queries the client metadata of a given coin denomination.
	DenomMetadata(ctx context.Context, in *types.QueryDenomMetadataRequest, opts ...grpc.CallOption) (*types.QueryDenomMetadataResponse, error)
	// DenomsMetadata queries the client metadata for all registered coin
	// denominations.
	DenomsMetadata(ctx context.Context, in *types.QueryDenomsMetadataRequest, opts ...grpc.CallOption) (*types.QueryDenomsMetadataResponse, error)
	// DenomOwners queries for all account addresses that own a particular token
	// denomination.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	//
	// Since: cosmos-sdk 0.46
	DenomOwners(ctx context.Context, in *types.QueryDenomOwnersRequest, opts ...grpc.CallOption) (*types.QueryDenomOwnersResponse, error)
	// SendEnabled queries for SendEnabled entries.
	//
	// This query only returns denominations that have specific SendEnabled settings.
	// Any denomination that does not have a specific setting will use the default
	// params.default_send_enabled, and will not be returned by this query.
	//
	// Since: cosmos-sdk 0.47
	SendEnabled(ctx context.Context, in *types.QuerySendEnabledRequest, opts ...grpc.CallOption) (*types.QuerySendEnabledResponse, error)
}

type queryBankClient struct {
	cc grpc1.ClientConn
}

func NewQueryBankClient(cc grpc1.ClientConn) QueryBankClient {
	return &queryBankClient{cc}
}

func (c *queryBankClient) Balance(ctx context.Context, in *types.QueryBalanceRequest, opts ...grpc.CallOption) (*types.QueryBalanceResponse, error) {
	out := new(types.QueryBalanceResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryBank/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBankClient) AllBalances(ctx context.Context, in *types.QueryAllBalancesRequest, opts ...grpc.CallOption) (*types.QueryAllBalancesResponse, error) {
	out := new(types.QueryAllBalancesResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryBank/AllBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBankClient) SpendableBalances(ctx context.Context, in *types.QuerySpendableBalancesRequest, opts ...grpc.CallOption) (*types.QuerySpendableBalancesResponse, error) {
	out := new(types.QuerySpendableBalancesResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryBank/SpendableBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBankClient) SpendableBalanceByDenom(ctx context.Context, in *types.QuerySpendableBalanceByDenomRequest, opts ...grpc.CallOption) (*types.QuerySpendableBalanceByDenomResponse, error) {
	out := new(types.QuerySpendableBalanceByDenomResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryBank/SpendableBalanceByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBankClient) TotalSupply(ctx context.Context, in *types.QueryTotalSupplyRequest, opts ...grpc.CallOption) (*types.QueryTotalSupplyResponse, error) {
	out := new(types.QueryTotalSupplyResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryBank/TotalSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBankClient) SupplyOf(ctx context.Context, in *types.QuerySupplyOfRequest, opts ...grpc.CallOption) (*types.QuerySupplyOfResponse, error) {
	out := new(types.QuerySupplyOfResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryBank/SupplyOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBankClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	out := new(types.QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryBank/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBankClient) DenomMetadata(ctx context.Context, in *types.QueryDenomMetadataRequest, opts ...grpc.CallOption) (*types.QueryDenomMetadataResponse, error) {
	out := new(types.QueryDenomMetadataResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryBank/DenomMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBankClient) DenomsMetadata(ctx context.Context, in *types.QueryDenomsMetadataRequest, opts ...grpc.CallOption) (*types.QueryDenomsMetadataResponse, error) {
	out := new(types.QueryDenomsMetadataResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryBank/DenomsMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBankClient) DenomOwners(ctx context.Context, in *types.QueryDenomOwnersRequest, opts ...grpc.CallOption) (*types.QueryDenomOwnersResponse, error) {
	out := new(types.QueryDenomOwnersResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryBank/DenomOwners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBankClient) SendEnabled(ctx context.Context, in *types.QuerySendEnabledRequest, opts ...grpc.CallOption) (*types.QuerySendEnabledResponse, error) {
	out := new(types.QuerySendEnabledResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryBank/SendEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryBankServer is the server API for QueryBank service.
type QueryBankServer interface {
	// Balance queries the balance of a single coin for a single account.
	Balance(context.Context, *types.QueryBalanceRequest) (*types.QueryBalanceResponse, error)
	// AllBalances queries the balance of all coins for a single account.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	AllBalances(context.Context, *types.QueryAllBalancesRequest) (*types.QueryAllBalancesResponse, error)
	// SpendableBalances queries the spendable balance of all coins for a single
	// account.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	//
	// Since: cosmos-sdk 0.46
	SpendableBalances(context.Context, *types.QuerySpendableBalancesRequest) (*types.QuerySpendableBalancesResponse, error)
	// SpendableBalanceByDenom queries the spendable balance of a single denom for
	// a single account.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	//
	// Since: cosmos-sdk 0.47
	SpendableBalanceByDenom(context.Context, *types.QuerySpendableBalanceByDenomRequest) (*types.QuerySpendableBalanceByDenomResponse, error)
	// TotalSupply queries the total supply of all coins.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	TotalSupply(context.Context, *types.QueryTotalSupplyRequest) (*types.QueryTotalSupplyResponse, error)
	// SupplyOf queries the supply of a single coin.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	SupplyOf(context.Context, *types.QuerySupplyOfRequest) (*types.QuerySupplyOfResponse, error)
	// Params queries the parameters of x/bank module.
	Params(context.Context, *types.QueryParamsRequest) (*types.QueryParamsResponse, error)
	// DenomMetadata queries the client metadata of a given coin denomination.
	DenomMetadata(context.Context, *types.QueryDenomMetadataRequest) (*types.QueryDenomMetadataResponse, error)
	// DenomsMetadata queries the client metadata for all registered coin
	// denominations.
	DenomsMetadata(context.Context, *types.QueryDenomsMetadataRequest) (*types.QueryDenomsMetadataResponse, error)
	// DenomOwners queries for all account addresses that own a particular token
	// denomination.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	//
	// Since: cosmos-sdk 0.46
	DenomOwners(context.Context, *types.QueryDenomOwnersRequest) (*types.QueryDenomOwnersResponse, error)
	// SendEnabled queries for SendEnabled entries.
	//
	// This query only returns denominations that have specific SendEnabled settings.
	// Any denomination that does not have a specific setting will use the default
	// params.default_send_enabled, and will not be returned by this query.
	//
	// Since: cosmos-sdk 0.47
	SendEnabled(context.Context, *types.QuerySendEnabledRequest) (*types.QuerySendEnabledResponse, error)
}

// UnimplementedQueryBankServer can be embedded to have forward compatible implementations.
type UnimplementedQueryBankServer struct {
}

func (*UnimplementedQueryBankServer) Balance(ctx context.Context, req *types.QueryBalanceRequest) (*types.QueryBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (*UnimplementedQueryBankServer) AllBalances(ctx context.Context, req *types.QueryAllBalancesRequest) (*types.QueryAllBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBalances not implemented")
}
func (*UnimplementedQueryBankServer) SpendableBalances(ctx context.Context, req *types.QuerySpendableBalancesRequest) (*types.QuerySpendableBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpendableBalances not implemented")
}
func (*UnimplementedQueryBankServer) SpendableBalanceByDenom(ctx context.Context, req *types.QuerySpendableBalanceByDenomRequest) (*types.QuerySpendableBalanceByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpendableBalanceByDenom not implemented")
}
func (*UnimplementedQueryBankServer) TotalSupply(ctx context.Context, req *types.QueryTotalSupplyRequest) (*types.QueryTotalSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSupply not implemented")
}
func (*UnimplementedQueryBankServer) SupplyOf(ctx context.Context, req *types.QuerySupplyOfRequest) (*types.QuerySupplyOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyOf not implemented")
}
func (*UnimplementedQueryBankServer) Params(ctx context.Context, req *types.QueryParamsRequest) (*types.QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryBankServer) DenomMetadata(ctx context.Context, req *types.QueryDenomMetadataRequest) (*types.QueryDenomMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomMetadata not implemented")
}
func (*UnimplementedQueryBankServer) DenomsMetadata(ctx context.Context, req *types.QueryDenomsMetadataRequest) (*types.QueryDenomsMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomsMetadata not implemented")
}
func (*UnimplementedQueryBankServer) DenomOwners(ctx context.Context, req *types.QueryDenomOwnersRequest) (*types.QueryDenomOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomOwners not implemented")
}
func (*UnimplementedQueryBankServer) SendEnabled(ctx context.Context, req *types.QuerySendEnabledRequest) (*types.QuerySendEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEnabled not implemented")
}

func RegisterQueryBankServer(s grpc1.Server, srv QueryBankServer) {
	s.RegisterService(&_QueryBank_serviceDesc, srv)
}

func _QueryBank_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBankServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryBank/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBankServer).Balance(ctx, req.(*types.QueryBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBank_AllBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryAllBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBankServer).AllBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryBank/AllBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBankServer).AllBalances(ctx, req.(*types.QueryAllBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBank_SpendableBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QuerySpendableBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBankServer).SpendableBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryBank/SpendableBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBankServer).SpendableBalances(ctx, req.(*types.QuerySpendableBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBank_SpendableBalanceByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QuerySpendableBalanceByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBankServer).SpendableBalanceByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryBank/SpendableBalanceByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBankServer).SpendableBalanceByDenom(ctx, req.(*types.QuerySpendableBalanceByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBank_TotalSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryTotalSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBankServer).TotalSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryBank/TotalSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBankServer).TotalSupply(ctx, req.(*types.QueryTotalSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBank_SupplyOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QuerySupplyOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBankServer).SupplyOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryBank/SupplyOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBankServer).SupplyOf(ctx, req.(*types.QuerySupplyOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBank_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBankServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryBank/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBankServer).Params(ctx, req.(*types.QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBank_DenomMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDenomMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBankServer).DenomMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryBank/DenomMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBankServer).DenomMetadata(ctx, req.(*types.QueryDenomMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBank_DenomsMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDenomsMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBankServer).DenomsMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryBank/DenomsMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBankServer).DenomsMetadata(ctx, req.(*types.QueryDenomsMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBank_DenomOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDenomOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBankServer).DenomOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryBank/DenomOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBankServer).DenomOwners(ctx, req.(*types.QueryDenomOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBank_SendEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QuerySendEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBankServer).SendEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryBank/SendEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBankServer).SendEnabled(ctx, req.(*types.QuerySendEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryBank_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mythos.cosmosmod.v1.QueryBank",
	HandlerType: (*QueryBankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Balance",
			Handler:    _QueryBank_Balance_Handler,
		},
		{
			MethodName: "AllBalances",
			Handler:    _QueryBank_AllBalances_Handler,
		},
		{
			MethodName: "SpendableBalances",
			Handler:    _QueryBank_SpendableBalances_Handler,
		},
		{
			MethodName: "SpendableBalanceByDenom",
			Handler:    _QueryBank_SpendableBalanceByDenom_Handler,
		},
		{
			MethodName: "TotalSupply",
			Handler:    _QueryBank_TotalSupply_Handler,
		},
		{
			MethodName: "SupplyOf",
			Handler:    _QueryBank_SupplyOf_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _QueryBank_Params_Handler,
		},
		{
			MethodName: "DenomMetadata",
			Handler:    _QueryBank_DenomMetadata_Handler,
		},
		{
			MethodName: "DenomsMetadata",
			Handler:    _QueryBank_DenomsMetadata_Handler,
		},
		{
			MethodName: "DenomOwners",
			Handler:    _QueryBank_DenomOwners_Handler,
		},
		{
			MethodName: "SendEnabled",
			Handler:    _QueryBank_SendEnabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mythos/cosmosmod/v1/bank_query.proto",
}
