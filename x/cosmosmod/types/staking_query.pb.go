// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/cosmosmod/v1/staking_query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("mythos/cosmosmod/v1/staking_query.proto", fileDescriptor_68b9a317c6856f24)
}

var fileDescriptor_68b9a317c6856f24 = []byte{
	// 777 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x4f, 0x6b, 0xd4, 0x4e,
	0x18, 0xc7, 0x77, 0x7e, 0xfc, 0x28, 0x38, 0xa8, 0xe0, 0xd3, 0xa2, 0xb8, 0xad, 0x41, 0x4a, 0x41,
	0xdb, 0x62, 0xc6, 0x6d, 0xb5, 0x7f, 0x0e, 0x6a, 0xb7, 0xf6, 0x60, 0xa9, 0x68, 0x5b, 0xb1, 0x07,
	0x51, 0x96, 0xd9, 0x6e, 0x9a, 0x0d, 0xee, 0x66, 0xb6, 0x99, 0x74, 0xb1, 0x94, 0x5e, 0x3c, 0x88,
	0x27, 0x11, 0xbc, 0xfb, 0x0a, 0x3c, 0x78, 0xd3, 0x57, 0x20, 0x3d, 0x88, 0x14, 0x44, 0xd0, 0x9b,
	0x76, 0x05, 0xdf, 0x84, 0x88, 0x24, 0x79, 0x92, 0x49, 0xe9, 0x6e, 0x9a, 0x6c, 0x85, 0x52, 0x76,
	0x76, 0xbe, 0xdf, 0x79, 0xbe, 0x9f, 0x27, 0x79, 0xc8, 0x86, 0x5e, 0xa8, 0x6f, 0xba, 0x55, 0x21,
	0xd9, 0xaa, 0x90, 0x75, 0xef, 0xaf, 0xc2, 0x9a, 0x05, 0x26, 0x5d, 0xfe, 0xd8, 0xb2, 0xcd, 0xd2,
	0xfa, 0x86, 0xe1, 0x6c, 0xea, 0x0d, 0x47, 0xb8, 0x02, 0x7a, 0x03, 0xa1, 0x1e, 0x09, 0xf5, 0x66,
	0x21, 0xdf, 0x67, 0x0a, 0x53, 0xf8, 0xfb, 0xcc, 0xfb, 0x14, 0x48, 0xf3, 0x03, 0xa6, 0x10, 0x66,
	0xcd, 0x60, 0xbc, 0x61, 0x31, 0x6e, 0xdb, 0xc2, 0xe5, 0xae, 0x25, 0x6c, 0x89, 0xbb, 0x67, 0x83,
	0x13, 0x4a, 0x81, 0x2d, 0x58, 0xe0, 0xd6, 0x99, 0x60, 0xc5, 0xea, 0xd2, 0xf4, 0x62, 0xd4, 0xa5,
	0x89, 0x1b, 0x23, 0xb8, 0x51, 0xe6, 0xd2, 0x60, 0x7e, 0x2a, 0xd6, 0x2c, 0x94, 0x0d, 0x97, 0x17,
	0x58, 0x83, 0x9b, 0x96, 0xed, 0x17, 0x40, 0xed, 0x29, 0x5e, 0xb7, 0x6c, 0xc1, 0xfc, 0xff, 0xf8,
	0xd5, 0x10, 0xda, 0x91, 0x2b, 0xf2, 0xe2, 0x1a, 0x55, 0x83, 0x1d, 0x54, 0xb1, 0x2e, 0xe4, 0xfb,
	0x51, 0x13, 0x66, 0x88, 0x6f, 0x8e, 0xbd, 0x3b, 0x4d, 0x8f, 0x2f, 0x79, 0xeb, 0x7b, 0xc1, 0x09,
	0xf0, 0x9a, 0x50, 0xba, 0xc2, 0x6b, 0x56, 0x85, 0xbb, 0xc2, 0x91, 0xa0, 0x63, 0xf3, 0xf4, 0xb0,
	0x2e, 0x56, 0xd0, 0x7d, 0x93, 0x12, 0x2e, 0x1b, 0xeb, 0x1b, 0x86, 0x74, 0xf3, 0x2c, 0xb5, 0x5e,
	0x36, 0x84, 0x2d, 0x8d, 0x41, 0xf6, 0xfc, 0xd7, 0xdb, 0x11, 0xf2, 0xf4, 0xf3, 0xcf, 0x57, 0xff,
	0x0d, 0xc1, 0x20, 0xeb, 0xc0, 0xd3, 0x54, 0x89, 0xde, 0x10, 0x7a, 0x2c, 0x3a, 0x07, 0x2e, 0xa5,
	0xab, 0x17, 0xc6, 0xd3, 0xd3, 0xca, 0x31, 0xdd, 0x8c, 0x4a, 0x77, 0x15, 0xc6, 0x0f, 0x4f, 0xc7,
	0xb6, 0xa2, 0xcf, 0x25, 0x5e, 0xa9, 0x38, 0xdb, 0xf0, 0x8d, 0xd0, 0xbe, 0xe8, 0xdc, 0x39, 0xa3,
	0x66, 0x98, 0xc1, 0x9d, 0x05, 0x53, 0xe9, 0xa2, 0xc4, 0x2c, 0x21, 0xc4, 0x74, 0x17, 0x4e, 0xe4,
	0xb9, 0xad, 0x78, 0x8a, 0x70, 0xa3, 0x0b, 0x1e, 0x56, 0x89, 0x21, 0xfc, 0x21, 0xf4, 0x5c, 0x54,
	0xee, 0xbe, 0x5d, 0x16, 0x76, 0xc5, 0xb2, 0xcd, 0x38, 0x64, 0x31, 0x5d, 0xd4, 0x76, 0xde, 0x90,
	0x76, 0xf6, 0x28, 0x47, 0x20, 0xf6, 0x8a, 0xc2, 0x5e, 0x80, 0xf9, 0x6e, 0xb0, 0x37, 0xc2, 0xe3,
	0x4b, 0xf1, 0x06, 0x7c, 0x24, 0x94, 0xaa, 0x7a, 0x87, 0x0c, 0x8b, 0x12, 0xa6, 0x1b, 0x96, 0xb8,
	0x1e, 0x39, 0x1e, 0x29, 0x8e, 0x65, 0x58, 0x3c, 0xe2, 0xe5, 0x63, 0x5b, 0xb8, 0x88, 0xee, 0xd5,
	0xdf, 0x84, 0xf6, 0xb6, 0xe9, 0x23, 0x4c, 0x26, 0xe6, 0x6c, 0xe3, 0x08, 0x01, 0xa7, 0xb2, 0x1b,
	0x91, 0xd4, 0x51, 0xa4, 0x26, 0x18, 0xff, 0x9a, 0xb4, 0xed, 0xe5, 0x84, 0x4f, 0x84, 0xf6, 0xcd,
	0x85, 0xc2, 0xf4, 0xa3, 0xda, 0xce, 0x92, 0x6e, 0x54, 0xdb, 0x3b, 0xb1, 0x03, 0x45, 0xd5, 0x81,
	0x09, 0xb8, 0xd2, 0xa9, 0x03, 0x89, 0xd7, 0xd3, 0x9b, 0xcf, 0xa8, 0x46, 0x17, 0xf3, 0x99, 0xe8,
	0x4d, 0x37, 0x9f, 0x87, 0x1c, 0x91, 0x69, 0x3e, 0x23, 0xbc, 0x94, 0x17, 0x54, 0xc2, 0x07, 0x42,
	0x4f, 0x2c, 0x1b, 0xf1, 0x6f, 0x0a, 0x89, 0x69, 0xf7, 0x69, 0x43, 0xc0, 0xb1, 0x2c, 0x16, 0x04,
	0xba, 0xa3, 0x80, 0x6e, 0x42, 0xb1, 0x1b, 0x20, 0x67, 0x5f, 0xec, 0x2f, 0x84, 0xf6, 0x46, 0xad,
	0x8c, 0x3d, 0x9e, 0x27, 0xd3, 0x35, 0xff, 0xe0, 0x73, 0x7a, 0x2a, 0xbb, 0x11, 0xd1, 0x16, 0x14,
	0xda, 0x0c, 0x5c, 0xef, 0x06, 0x2d, 0xf6, 0x30, 0x6f, 0x11, 0x0a, 0x07, 0x8b, 0xc1, 0x44, 0xc6,
	0x74, 0x21, 0xd5, 0x64, 0x66, 0x1f, 0x42, 0x3d, 0x54, 0x50, 0x4b, 0x70, 0xf7, 0x68, 0x50, 0x07,
	0x7f, 0x03, 0xbc, 0x27, 0xf4, 0xe4, 0x2d, 0x4b, 0xba, 0xc2, 0xb1, 0x56, 0x79, 0x6d, 0xde, 0x5e,
	0x13, 0x90, 0x7c, 0x53, 0xed, 0x17, 0x87, 0x74, 0xe3, 0x99, 0x3c, 0x48, 0x76, 0x4d, 0x91, 0x8d,
	0xc1, 0xe5, 0x4e, 0x64, 0xd5, 0xc8, 0x5c, 0xb2, 0xec, 0x35, 0xc1, 0xb6, 0xaa, 0x86, 0x65, 0x56,
	0xdd, 0x6d, 0x78, 0x46, 0xe8, 0xff, 0x8b, 0x42, 0xd4, 0xe0, 0x62, 0x62, 0x71, 0x4f, 0x12, 0xc6,
	0x1c, 0x4e, 0xa1, 0xc4, 0x70, 0xc3, 0x2a, 0x9c, 0x06, 0x03, 0x9d, 0xc2, 0x35, 0xbc, 0xfa, 0x2f,
	0x08, 0xed, 0x59, 0xe4, 0x0e, 0xaf, 0x4b, 0x18, 0x49, 0x2e, 0xe0, 0x8b, 0xc2, 0x30, 0xa3, 0xa9,
	0xb4, 0x18, 0x67, 0x54, 0xc5, 0x39, 0x0f, 0x5a, 0xc7, 0x38, 0xbe, 0x69, 0x76, 0x7a, 0xe7, 0x87,
	0x96, 0xdb, 0xd9, 0xd3, 0xc8, 0xee, 0x9e, 0x46, 0xbe, 0xef, 0x69, 0xe4, 0x65, 0x4b, 0xcb, 0xed,
	0xb6, 0xb4, 0xdc, 0xd7, 0x96, 0x96, 0x7b, 0xd0, 0x8f, 0xef, 0x28, 0xcd, 0x02, 0x7b, 0x12, 0x7b,
	0x51, 0x71, 0x37, 0x1b, 0x86, 0x2c, 0xf7, 0xf8, 0xbf, 0xbd, 0xc7, 0xff, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x45, 0xce, 0x44, 0xaa, 0xc9, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryStakingClient is the client API for QueryStaking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryStakingClient interface {
	// Validators queries all validators that match the given status.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Validators(ctx context.Context, in *types.QueryValidatorsRequest, opts ...grpc.CallOption) (*types.QueryValidatorsResponse, error)
	// Validator queries validator info for given validator address.
	Validator(ctx context.Context, in *types.QueryValidatorRequest, opts ...grpc.CallOption) (*types.QueryValidatorResponse, error)
	// ValidatorDelegations queries delegate info for given validator.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	ValidatorDelegations(ctx context.Context, in *types.QueryValidatorDelegationsRequest, opts ...grpc.CallOption) (*types.QueryValidatorDelegationsResponse, error)
	// ValidatorUnbondingDelegations queries unbonding delegations of a validator.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	ValidatorUnbondingDelegations(ctx context.Context, in *types.QueryValidatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*types.QueryValidatorUnbondingDelegationsResponse, error)
	// Delegation queries delegate info for given validator delegator pair.
	Delegation(ctx context.Context, in *types.QueryDelegationRequest, opts ...grpc.CallOption) (*types.QueryDelegationResponse, error)
	// UnbondingDelegation queries unbonding info for given validator delegator
	// pair.
	UnbondingDelegation(ctx context.Context, in *types.QueryUnbondingDelegationRequest, opts ...grpc.CallOption) (*types.QueryUnbondingDelegationResponse, error)
	// DelegatorDelegations queries all delegations of a given delegator address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	DelegatorDelegations(ctx context.Context, in *types.QueryDelegatorDelegationsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorDelegationsResponse, error)
	// DelegatorUnbondingDelegations queries all unbonding delegations of a given
	// delegator address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	DelegatorUnbondingDelegations(ctx context.Context, in *types.QueryDelegatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorUnbondingDelegationsResponse, error)
	// Redelegations queries redelegations of given address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Redelegations(ctx context.Context, in *types.QueryRedelegationsRequest, opts ...grpc.CallOption) (*types.QueryRedelegationsResponse, error)
	// DelegatorValidators queries all validators info for given delegator
	// address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	DelegatorValidators(ctx context.Context, in *types.QueryDelegatorValidatorsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorValidatorsResponse, error)
	// DelegatorValidator queries validator info for given delegator validator
	// pair.
	DelegatorValidator(ctx context.Context, in *types.QueryDelegatorValidatorRequest, opts ...grpc.CallOption) (*types.QueryDelegatorValidatorResponse, error)
	// HistoricalInfo queries the historical info for given height.
	HistoricalInfo(ctx context.Context, in *types.QueryHistoricalInfoRequest, opts ...grpc.CallOption) (*types.QueryHistoricalInfoResponse, error)
	// Pool queries the pool info.
	Pool(ctx context.Context, in *types.QueryPoolRequest, opts ...grpc.CallOption) (*types.QueryPoolResponse, error)
	// Parameters queries the staking parameters.
	Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error)
}

type queryStakingClient struct {
	cc grpc1.ClientConn
}

func NewQueryStakingClient(cc grpc1.ClientConn) QueryStakingClient {
	return &queryStakingClient{cc}
}

func (c *queryStakingClient) Validators(ctx context.Context, in *types.QueryValidatorsRequest, opts ...grpc.CallOption) (*types.QueryValidatorsResponse, error) {
	out := new(types.QueryValidatorsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/Validators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) Validator(ctx context.Context, in *types.QueryValidatorRequest, opts ...grpc.CallOption) (*types.QueryValidatorResponse, error) {
	out := new(types.QueryValidatorResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/Validator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) ValidatorDelegations(ctx context.Context, in *types.QueryValidatorDelegationsRequest, opts ...grpc.CallOption) (*types.QueryValidatorDelegationsResponse, error) {
	out := new(types.QueryValidatorDelegationsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/ValidatorDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) ValidatorUnbondingDelegations(ctx context.Context, in *types.QueryValidatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*types.QueryValidatorUnbondingDelegationsResponse, error) {
	out := new(types.QueryValidatorUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/ValidatorUnbondingDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) Delegation(ctx context.Context, in *types.QueryDelegationRequest, opts ...grpc.CallOption) (*types.QueryDelegationResponse, error) {
	out := new(types.QueryDelegationResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/Delegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) UnbondingDelegation(ctx context.Context, in *types.QueryUnbondingDelegationRequest, opts ...grpc.CallOption) (*types.QueryUnbondingDelegationResponse, error) {
	out := new(types.QueryUnbondingDelegationResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/UnbondingDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) DelegatorDelegations(ctx context.Context, in *types.QueryDelegatorDelegationsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorDelegationsResponse, error) {
	out := new(types.QueryDelegatorDelegationsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/DelegatorDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) DelegatorUnbondingDelegations(ctx context.Context, in *types.QueryDelegatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorUnbondingDelegationsResponse, error) {
	out := new(types.QueryDelegatorUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/DelegatorUnbondingDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) Redelegations(ctx context.Context, in *types.QueryRedelegationsRequest, opts ...grpc.CallOption) (*types.QueryRedelegationsResponse, error) {
	out := new(types.QueryRedelegationsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/Redelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) DelegatorValidators(ctx context.Context, in *types.QueryDelegatorValidatorsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorValidatorsResponse, error) {
	out := new(types.QueryDelegatorValidatorsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/DelegatorValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) DelegatorValidator(ctx context.Context, in *types.QueryDelegatorValidatorRequest, opts ...grpc.CallOption) (*types.QueryDelegatorValidatorResponse, error) {
	out := new(types.QueryDelegatorValidatorResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/DelegatorValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) HistoricalInfo(ctx context.Context, in *types.QueryHistoricalInfoRequest, opts ...grpc.CallOption) (*types.QueryHistoricalInfoResponse, error) {
	out := new(types.QueryHistoricalInfoResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/HistoricalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) Pool(ctx context.Context, in *types.QueryPoolRequest, opts ...grpc.CallOption) (*types.QueryPoolResponse, error) {
	out := new(types.QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakingClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	out := new(types.QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryStaking/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryStakingServer is the server API for QueryStaking service.
type QueryStakingServer interface {
	// Validators queries all validators that match the given status.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Validators(context.Context, *types.QueryValidatorsRequest) (*types.QueryValidatorsResponse, error)
	// Validator queries validator info for given validator address.
	Validator(context.Context, *types.QueryValidatorRequest) (*types.QueryValidatorResponse, error)
	// ValidatorDelegations queries delegate info for given validator.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	ValidatorDelegations(context.Context, *types.QueryValidatorDelegationsRequest) (*types.QueryValidatorDelegationsResponse, error)
	// ValidatorUnbondingDelegations queries unbonding delegations of a validator.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	ValidatorUnbondingDelegations(context.Context, *types.QueryValidatorUnbondingDelegationsRequest) (*types.QueryValidatorUnbondingDelegationsResponse, error)
	// Delegation queries delegate info for given validator delegator pair.
	Delegation(context.Context, *types.QueryDelegationRequest) (*types.QueryDelegationResponse, error)
	// UnbondingDelegation queries unbonding info for given validator delegator
	// pair.
	UnbondingDelegation(context.Context, *types.QueryUnbondingDelegationRequest) (*types.QueryUnbondingDelegationResponse, error)
	// DelegatorDelegations queries all delegations of a given delegator address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	DelegatorDelegations(context.Context, *types.QueryDelegatorDelegationsRequest) (*types.QueryDelegatorDelegationsResponse, error)
	// DelegatorUnbondingDelegations queries all unbonding delegations of a given
	// delegator address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	DelegatorUnbondingDelegations(context.Context, *types.QueryDelegatorUnbondingDelegationsRequest) (*types.QueryDelegatorUnbondingDelegationsResponse, error)
	// Redelegations queries redelegations of given address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Redelegations(context.Context, *types.QueryRedelegationsRequest) (*types.QueryRedelegationsResponse, error)
	// DelegatorValidators queries all validators info for given delegator
	// address.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	DelegatorValidators(context.Context, *types.QueryDelegatorValidatorsRequest) (*types.QueryDelegatorValidatorsResponse, error)
	// DelegatorValidator queries validator info for given delegator validator
	// pair.
	DelegatorValidator(context.Context, *types.QueryDelegatorValidatorRequest) (*types.QueryDelegatorValidatorResponse, error)
	// HistoricalInfo queries the historical info for given height.
	HistoricalInfo(context.Context, *types.QueryHistoricalInfoRequest) (*types.QueryHistoricalInfoResponse, error)
	// Pool queries the pool info.
	Pool(context.Context, *types.QueryPoolRequest) (*types.QueryPoolResponse, error)
	// Parameters queries the staking parameters.
	Params(context.Context, *types.QueryParamsRequest) (*types.QueryParamsResponse, error)
}

// UnimplementedQueryStakingServer can be embedded to have forward compatible implementations.
type UnimplementedQueryStakingServer struct {
}

func (*UnimplementedQueryStakingServer) Validators(ctx context.Context, req *types.QueryValidatorsRequest) (*types.QueryValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (*UnimplementedQueryStakingServer) Validator(ctx context.Context, req *types.QueryValidatorRequest) (*types.QueryValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validator not implemented")
}
func (*UnimplementedQueryStakingServer) ValidatorDelegations(ctx context.Context, req *types.QueryValidatorDelegationsRequest) (*types.QueryValidatorDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorDelegations not implemented")
}
func (*UnimplementedQueryStakingServer) ValidatorUnbondingDelegations(ctx context.Context, req *types.QueryValidatorUnbondingDelegationsRequest) (*types.QueryValidatorUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorUnbondingDelegations not implemented")
}
func (*UnimplementedQueryStakingServer) Delegation(ctx context.Context, req *types.QueryDelegationRequest) (*types.QueryDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegation not implemented")
}
func (*UnimplementedQueryStakingServer) UnbondingDelegation(ctx context.Context, req *types.QueryUnbondingDelegationRequest) (*types.QueryUnbondingDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbondingDelegation not implemented")
}
func (*UnimplementedQueryStakingServer) DelegatorDelegations(ctx context.Context, req *types.QueryDelegatorDelegationsRequest) (*types.QueryDelegatorDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorDelegations not implemented")
}
func (*UnimplementedQueryStakingServer) DelegatorUnbondingDelegations(ctx context.Context, req *types.QueryDelegatorUnbondingDelegationsRequest) (*types.QueryDelegatorUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorUnbondingDelegations not implemented")
}
func (*UnimplementedQueryStakingServer) Redelegations(ctx context.Context, req *types.QueryRedelegationsRequest) (*types.QueryRedelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redelegations not implemented")
}
func (*UnimplementedQueryStakingServer) DelegatorValidators(ctx context.Context, req *types.QueryDelegatorValidatorsRequest) (*types.QueryDelegatorValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorValidators not implemented")
}
func (*UnimplementedQueryStakingServer) DelegatorValidator(ctx context.Context, req *types.QueryDelegatorValidatorRequest) (*types.QueryDelegatorValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorValidator not implemented")
}
func (*UnimplementedQueryStakingServer) HistoricalInfo(ctx context.Context, req *types.QueryHistoricalInfoRequest) (*types.QueryHistoricalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalInfo not implemented")
}
func (*UnimplementedQueryStakingServer) Pool(ctx context.Context, req *types.QueryPoolRequest) (*types.QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryStakingServer) Params(ctx context.Context, req *types.QueryParamsRequest) (*types.QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryStakingServer(s grpc1.Server, srv QueryStakingServer) {
	s.RegisterService(&_QueryStaking_serviceDesc, srv)
}

func _QueryStaking_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/Validators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).Validators(ctx, req.(*types.QueryValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_Validator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).Validator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/Validator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).Validator(ctx, req.(*types.QueryValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_ValidatorDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryValidatorDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).ValidatorDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/ValidatorDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).ValidatorDelegations(ctx, req.(*types.QueryValidatorDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_ValidatorUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryValidatorUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).ValidatorUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/ValidatorUnbondingDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).ValidatorUnbondingDelegations(ctx, req.(*types.QueryValidatorUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_Delegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).Delegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/Delegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).Delegation(ctx, req.(*types.QueryDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_UnbondingDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryUnbondingDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).UnbondingDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/UnbondingDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).UnbondingDelegation(ctx, req.(*types.QueryUnbondingDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_DelegatorDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDelegatorDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).DelegatorDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/DelegatorDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).DelegatorDelegations(ctx, req.(*types.QueryDelegatorDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_DelegatorUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDelegatorUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).DelegatorUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/DelegatorUnbondingDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).DelegatorUnbondingDelegations(ctx, req.(*types.QueryDelegatorUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_Redelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryRedelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).Redelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/Redelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).Redelegations(ctx, req.(*types.QueryRedelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_DelegatorValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDelegatorValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).DelegatorValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/DelegatorValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).DelegatorValidators(ctx, req.(*types.QueryDelegatorValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_DelegatorValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDelegatorValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).DelegatorValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/DelegatorValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).DelegatorValidator(ctx, req.(*types.QueryDelegatorValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_HistoricalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryHistoricalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).HistoricalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/HistoricalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).HistoricalInfo(ctx, req.(*types.QueryHistoricalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).Pool(ctx, req.(*types.QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStaking_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakingServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryStaking/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakingServer).Params(ctx, req.(*types.QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryStaking_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mythos.cosmosmod.v1.QueryStaking",
	HandlerType: (*QueryStakingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validators",
			Handler:    _QueryStaking_Validators_Handler,
		},
		{
			MethodName: "Validator",
			Handler:    _QueryStaking_Validator_Handler,
		},
		{
			MethodName: "ValidatorDelegations",
			Handler:    _QueryStaking_ValidatorDelegations_Handler,
		},
		{
			MethodName: "ValidatorUnbondingDelegations",
			Handler:    _QueryStaking_ValidatorUnbondingDelegations_Handler,
		},
		{
			MethodName: "Delegation",
			Handler:    _QueryStaking_Delegation_Handler,
		},
		{
			MethodName: "UnbondingDelegation",
			Handler:    _QueryStaking_UnbondingDelegation_Handler,
		},
		{
			MethodName: "DelegatorDelegations",
			Handler:    _QueryStaking_DelegatorDelegations_Handler,
		},
		{
			MethodName: "DelegatorUnbondingDelegations",
			Handler:    _QueryStaking_DelegatorUnbondingDelegations_Handler,
		},
		{
			MethodName: "Redelegations",
			Handler:    _QueryStaking_Redelegations_Handler,
		},
		{
			MethodName: "DelegatorValidators",
			Handler:    _QueryStaking_DelegatorValidators_Handler,
		},
		{
			MethodName: "DelegatorValidator",
			Handler:    _QueryStaking_DelegatorValidator_Handler,
		},
		{
			MethodName: "HistoricalInfo",
			Handler:    _QueryStaking_HistoricalInfo_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _QueryStaking_Pool_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _QueryStaking_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mythos/cosmosmod/v1/staking_query.proto",
}
