// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/cosmosmod/v1/bank_tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("mythos/cosmosmod/v1/bank_tx.proto", fileDescriptor_68b0c2e0300f9a48) }

var fileDescriptor_68b0c2e0300f9a48 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcc, 0xad, 0x2c, 0xc9,
	0xc8, 0x2f, 0xd6, 0x4f, 0xce, 0x2f, 0xce, 0x05, 0xa1, 0x14, 0xfd, 0x32, 0x43, 0xfd, 0xa4, 0xc4,
	0xbc, 0xec, 0xf8, 0x92, 0x0a, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x61, 0x88, 0x12, 0x3d,
	0xb8, 0x12, 0xbd, 0x32, 0x43, 0x29, 0x91, 0xf4, 0xfc, 0xf4, 0x7c, 0xb0, 0xbc, 0x3e, 0x88, 0x05,
	0x51, 0x2a, 0x25, 0x09, 0x51, 0x13, 0x0f, 0x91, 0x80, 0x70, 0xa0, 0x52, 0xe2, 0x10, 0x9e, 0x7e,
	0x6e, 0x71, 0x3a, 0xc8, 0x8a, 0xdc, 0xe2, 0x74, 0xa8, 0x84, 0x60, 0x62, 0x6e, 0x66, 0x5e, 0xbe,
	0x3e, 0x98, 0x84, 0x0a, 0xc9, 0x40, 0xd5, 0x82, 0xdc, 0xa1, 0x5f, 0x66, 0x98, 0x94, 0x5a, 0x92,
	0x68, 0xa8, 0x0f, 0x73, 0x8f, 0x51, 0x2b, 0x33, 0x17, 0xbb, 0x6f, 0x71, 0xba, 0x53, 0x62, 0x5e,
	0xb6, 0x90, 0x17, 0x17, 0x4b, 0x70, 0x6a, 0x5e, 0x8a, 0x90, 0x0c, 0xd4, 0x75, 0x7a, 0x20, 0x2d,
	0x7a, 0x50, 0x2d, 0x7a, 0xbe, 0xc5, 0xe9, 0x20, 0x59, 0x29, 0x15, 0x7c, 0xb2, 0x41, 0xa9, 0xc5,
	0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x91, 0x5c, 0x9c, 0xbe, 0xa5, 0x39, 0x25, 0x99, 0x60, 0x03,
	0x15, 0x71, 0x69, 0x81, 0x2b, 0x91, 0xd2, 0x24, 0xa8, 0x04, 0x6e, 0x74, 0x12, 0x17, 0x4f, 0x68,
	0x41, 0x4a, 0x62, 0x49, 0x6a, 0x40, 0x62, 0x51, 0x62, 0x6e, 0xb1, 0x10, 0x4e, 0x07, 0x21, 0xab,
	0x92, 0xd2, 0x21, 0x46, 0x15, 0xdc, 0x8e, 0x0c, 0x2e, 0xbe, 0xe0, 0xd4, 0x12, 0x90, 0xb5, 0xae,
	0x79, 0x89, 0x49, 0x39, 0xa9, 0x29, 0x42, 0x6a, 0xb8, 0xbd, 0x8d, 0xac, 0x4e, 0x4a, 0x8f, 0x38,
	0x75, 0x30, 0x9b, 0xa4, 0x58, 0x1b, 0x9e, 0x6f, 0xd0, 0x62, 0x74, 0xb2, 0x3c, 0xf1, 0x50, 0x8e,
	0xe1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58,
	0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xa4, 0xa1, 0x09, 0xab, 0xcc,
	0x50, 0xbf, 0x02, 0x29, 0x75, 0x95, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x63, 0xd2, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x19, 0x3f, 0x96, 0x7e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgBankClient is the client API for MsgBank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgBankClient interface {
	// Send defines a method for sending coins from one account to another account.
	Send(ctx context.Context, in *types.MsgSend, opts ...grpc.CallOption) (*types.MsgSendResponse, error)
	// MultiSend defines a method for sending coins from some accounts to other accounts.
	MultiSend(ctx context.Context, in *types.MsgMultiSend, opts ...grpc.CallOption) (*types.MsgMultiSendResponse, error)
	// UpdateParams defines a governance operation for updating the x/bank module parameters.
	// The authority is defined in the keeper.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *types.MsgUpdateParams, opts ...grpc.CallOption) (*types.MsgUpdateParamsResponse, error)
	// SetSendEnabled is a governance operation for setting the SendEnabled flag
	// on any number of Denoms. Only the entries to add or update should be
	// included. Entries that already exist in the store, but that aren't
	// included in this message, will be left unchanged.
	//
	// Since: cosmos-sdk 0.47
	SetSendEnabled(ctx context.Context, in *types.MsgSetSendEnabled, opts ...grpc.CallOption) (*types.MsgSetSendEnabledResponse, error)
}

type msgBankClient struct {
	cc grpc1.ClientConn
}

func NewMsgBankClient(cc grpc1.ClientConn) MsgBankClient {
	return &msgBankClient{cc}
}

func (c *msgBankClient) Send(ctx context.Context, in *types.MsgSend, opts ...grpc.CallOption) (*types.MsgSendResponse, error) {
	out := new(types.MsgSendResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.MsgBank/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgBankClient) MultiSend(ctx context.Context, in *types.MsgMultiSend, opts ...grpc.CallOption) (*types.MsgMultiSendResponse, error) {
	out := new(types.MsgMultiSendResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.MsgBank/MultiSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgBankClient) UpdateParams(ctx context.Context, in *types.MsgUpdateParams, opts ...grpc.CallOption) (*types.MsgUpdateParamsResponse, error) {
	out := new(types.MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.MsgBank/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgBankClient) SetSendEnabled(ctx context.Context, in *types.MsgSetSendEnabled, opts ...grpc.CallOption) (*types.MsgSetSendEnabledResponse, error) {
	out := new(types.MsgSetSendEnabledResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.MsgBank/SetSendEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgBankServer is the server API for MsgBank service.
type MsgBankServer interface {
	// Send defines a method for sending coins from one account to another account.
	Send(context.Context, *types.MsgSend) (*types.MsgSendResponse, error)
	// MultiSend defines a method for sending coins from some accounts to other accounts.
	MultiSend(context.Context, *types.MsgMultiSend) (*types.MsgMultiSendResponse, error)
	// UpdateParams defines a governance operation for updating the x/bank module parameters.
	// The authority is defined in the keeper.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *types.MsgUpdateParams) (*types.MsgUpdateParamsResponse, error)
	// SetSendEnabled is a governance operation for setting the SendEnabled flag
	// on any number of Denoms. Only the entries to add or update should be
	// included. Entries that already exist in the store, but that aren't
	// included in this message, will be left unchanged.
	//
	// Since: cosmos-sdk 0.47
	SetSendEnabled(context.Context, *types.MsgSetSendEnabled) (*types.MsgSetSendEnabledResponse, error)
}

// UnimplementedMsgBankServer can be embedded to have forward compatible implementations.
type UnimplementedMsgBankServer struct {
}

func (*UnimplementedMsgBankServer) Send(ctx context.Context, req *types.MsgSend) (*types.MsgSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedMsgBankServer) MultiSend(ctx context.Context, req *types.MsgMultiSend) (*types.MsgMultiSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiSend not implemented")
}
func (*UnimplementedMsgBankServer) UpdateParams(ctx context.Context, req *types.MsgUpdateParams) (*types.MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgBankServer) SetSendEnabled(ctx context.Context, req *types.MsgSetSendEnabled) (*types.MsgSetSendEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSendEnabled not implemented")
}

func RegisterMsgBankServer(s grpc1.Server, srv MsgBankServer) {
	s.RegisterService(&_MsgBank_serviceDesc, srv)
}

func _MsgBank_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgBankServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.MsgBank/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgBankServer).Send(ctx, req.(*types.MsgSend))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgBank_MultiSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgMultiSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgBankServer).MultiSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.MsgBank/MultiSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgBankServer).MultiSend(ctx, req.(*types.MsgMultiSend))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgBank_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgBankServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.MsgBank/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgBankServer).UpdateParams(ctx, req.(*types.MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgBank_SetSendEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgSetSendEnabled)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgBankServer).SetSendEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.MsgBank/SetSendEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgBankServer).SetSendEnabled(ctx, req.(*types.MsgSetSendEnabled))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgBank_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mythos.cosmosmod.v1.MsgBank",
	HandlerType: (*MsgBankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MsgBank_Send_Handler,
		},
		{
			MethodName: "MultiSend",
			Handler:    _MsgBank_MultiSend_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _MsgBank_UpdateParams_Handler,
		},
		{
			MethodName: "SetSendEnabled",
			Handler:    _MsgBank_SetSendEnabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mythos/cosmosmod/v1/bank_tx.proto",
}
