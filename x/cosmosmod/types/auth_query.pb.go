// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/cosmosmod/v1/auth_query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("mythos/cosmosmod/v1/auth_query.proto", fileDescriptor_a2ddd5ce271e6104)
}

var fileDescriptor_a2ddd5ce271e6104 = []byte{
	// 630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0x87, 0x3b, 0x1e, 0x56, 0x1d, 0x17, 0xc1, 0xd9, 0x05, 0xb1, 0x75, 0xb3, 0xa0, 0x8b, 0xdb,
	0xd6, 0xdd, 0x8c, 0xd9, 0x56, 0xd0, 0x63, 0x8b, 0x97, 0x3d, 0x28, 0xab, 0xee, 0xc9, 0x4b, 0x98,
	0x36, 0xd3, 0x34, 0xb0, 0xc9, 0x74, 0x33, 0x93, 0xb2, 0xa1, 0xf4, 0x22, 0x08, 0x7b, 0x11, 0x04,
	0xfd, 0x08, 0xe2, 0x79, 0x3d, 0x78, 0xf3, 0x03, 0xec, 0x71, 0xc1, 0x8b, 0x47, 0x6d, 0x05, 0x3f,
	0x80, 0x5f, 0x40, 0x92, 0x99, 0x34, 0xed, 0xd2, 0x3f, 0x29, 0x94, 0xd2, 0x64, 0x9e, 0xdf, 0xfb,
	0x3e, 0x69, 0xde, 0x49, 0xe0, 0x96, 0x1b, 0x8a, 0x36, 0xe3, 0xb8, 0xc9, 0xb8, 0x1b, 0x7d, 0x2c,
	0xdc, 0x35, 0x30, 0x09, 0x44, 0xdb, 0x3c, 0x0e, 0xa8, 0x1f, 0xea, 0x1d, 0x9f, 0x09, 0x86, 0xd6,
	0x24, 0xa5, 0x8f, 0x28, 0xbd, 0x6b, 0xe4, 0xd7, 0x6d, 0x66, 0xb3, 0x78, 0x1d, 0x47, 0xbf, 0x24,
	0x9a, 0xbf, 0x6b, 0x33, 0x66, 0x1f, 0x51, 0x4c, 0x3a, 0x0e, 0x26, 0x9e, 0xc7, 0x04, 0x11, 0x0e,
	0xf3, 0xb8, 0x5a, 0xbd, 0x23, 0x2b, 0x98, 0x32, 0x26, 0x0f, 0xd4, 0xd2, 0x6d, 0x79, 0x84, 0x5d,
	0x6e, 0x47, 0x0e, 0x2e, 0xb7, 0xd5, 0xc2, 0x2d, 0xe2, 0x3a, 0x1e, 0xc3, 0xf1, 0xb7, 0x3a, 0x55,
	0x50, 0x6c, 0xec, 0x18, 0xd1, 0x63, 0xb2, 0xf9, 0x4d, 0xb5, 0x18, 0x5d, 0x05, 0xee, 0x1a, 0x0d,
	0x2a, 0xc8, 0x04, 0xb0, 0xf7, 0x6f, 0x15, 0x5e, 0x7f, 0x19, 0x1d, 0xd7, 0x02, 0xd1, 0x46, 0xef,
	0x01, 0xbc, 0x56, 0x6b, 0x36, 0x59, 0xe0, 0x09, 0x8e, 0x4a, 0xea, 0x12, 0xf5, 0x28, 0xac, 0xab,
	0xb0, 0x2e, 0x61, 0xc5, 0xbc, 0xa2, 0xc7, 0x01, 0xe5, 0x22, 0x5f, 0xce, 0x82, 0xf2, 0x0e, 0xf3,
	0x38, 0xbd, 0x57, 0x3e, 0xfd, 0x7b, 0x56, 0x06, 0x6f, 0x7f, 0xfc, 0xf9, 0x78, 0x65, 0x13, 0x6d,
	0xe0, 0x69, 0x82, 0x24, 0x51, 0xf8, 0x04, 0xe0, 0x55, 0x55, 0x00, 0x15, 0x17, 0xf6, 0x48, 0x6c,
	0x4a, 0x19, 0x48, 0x25, 0x53, 0x4d, 0x65, 0x4a, 0x68, 0x7b, 0xae, 0x0c, 0xee, 0x11, 0xcb, 0xf2,
	0x29, 0xe7, 0x7d, 0xf4, 0x0d, 0x40, 0xa4, 0x2a, 0xd5, 0xe4, 0xb9, 0x7a, 0xb8, 0xff, 0x0c, 0x55,
	0x16, 0xf6, 0x1d, 0xa3, 0x13, 0xd9, 0xea, 0x72, 0xa1, 0x25, 0xbc, 0x65, 0xcc, 0x6c, 0x84, 0xa6,
	0x63, 0xe1, 0x9e, 0x63, 0xf5, 0xd1, 0x3b, 0x00, 0x57, 0x0e, 0x88, 0x4f, 0x5c, 0x8e, 0xb6, 0x67,
	0xb7, 0x95, 0x44, 0xe2, 0x57, 0x5c, 0x0c, 0x2a, 0xa7, 0x62, 0xea, 0xb4, 0x81, 0x0a, 0x53, 0x9d,
	0x3a, 0xb2, 0xf9, 0x17, 0x00, 0x6f, 0x3e, 0x67, 0x56, 0x70, 0x44, 0x47, 0xc3, 0x86, 0x67, 0xb7,
	0x99, 0x24, 0x13, 0xaf, 0x47, 0xd9, 0x03, 0xca, 0xcf, 0x48, 0xfd, 0x1e, 0xa0, 0xad, 0xa9, 0x7e,
	0x6e, 0x9c, 0x34, 0x47, 0xf3, 0xf7, 0x1d, 0xc0, 0xb5, 0x89, 0x6a, 0xf5, 0xf0, 0x05, 0x71, 0x29,
	0xaa, 0x66, 0x6c, 0x2e, 0xf1, 0x44, 0xf9, 0xf1, 0x92, 0x29, 0xe5, 0xfd, 0x24, 0xf5, 0xde, 0x45,
	0x0f, 0xb3, 0x78, 0xe3, 0x9e, 0x47, 0x5c, 0xda, 0x47, 0xa7, 0x00, 0xae, 0xd6, 0x69, 0xb3, 0x5d,
	0xd9, 0x3b, 0xf0, 0x69, 0xcb, 0x39, 0x99, 0xb1, 0x87, 0xc6, 0x91, 0xf9, 0x7b, 0x68, 0x92, 0x54,
	0x7e, 0xf7, 0xe7, 0xde, 0xf2, 0x46, 0x1c, 0x41, 0x67, 0x00, 0xae, 0x8f, 0x06, 0x59, 0x50, 0x7e,
	0xc8, 0x5e, 0x0b, 0xdf, 0xf1, 0x6c, 0x34, 0xfd, 0x3e, 0x4e, 0x43, 0x13, 0x35, 0x63, 0x89, 0x84,
	0x52, 0xac, 0xcc, 0xfd, 0xf7, 0xa4, 0xe2, 0x68, 0x7f, 0x9b, 0x8d, 0xa8, 0x46, 0x1f, 0x7d, 0x4d,
	0x95, 0x65, 0xb9, 0x43, 0x16, 0x57, 0x9f, 0xaf, 0x3c, 0x81, 0x66, 0x52, 0xbe, 0x94, 0x48, 0x76,
	0x78, 0xac, 0xac, 0xa3, 0x9d, 0x4c, 0xca, 0x3c, 0xae, 0xd1, 0x47, 0x9f, 0x01, 0xbc, 0xa1, 0xa6,
	0x68, 0xdf, 0x6b, 0x31, 0xb4, 0xb3, 0xf0, 0xe9, 0x12, 0x61, 0x89, 0xe6, 0x6e, 0x46, 0x3a, 0xfb,
	0x60, 0xaa, 0x89, 0x34, 0x1d, 0xaf, 0xc5, 0xd2, 0x07, 0x68, 0xfd, 0xe9, 0xf9, 0x6f, 0x2d, 0x77,
	0x3e, 0xd0, 0xc0, 0xc5, 0x40, 0x03, 0xbf, 0x06, 0x1a, 0xf8, 0x30, 0xd4, 0x72, 0x17, 0x43, 0x2d,
	0xf7, 0x73, 0xa8, 0xe5, 0xde, 0x14, 0xd4, 0x7b, 0xb8, 0x6b, 0xe0, 0x93, 0xb1, 0x97, 0xb1, 0x08,
	0x3b, 0x94, 0x37, 0x56, 0xe2, 0xf7, 0x56, 0xe5, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x9c,
	0x37, 0xe4, 0xad, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryAuthClient is the client API for QueryAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryAuthClient interface {
	// Accounts returns all the existing accounts.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	//
	// Since: cosmos-sdk 0.43
	Accounts(ctx context.Context, in *types.QueryAccountsRequest, opts ...grpc.CallOption) (*types.QueryAccountsResponse, error)
	// Account returns account details based on address.
	Account(ctx context.Context, in *types.QueryAccountRequest, opts ...grpc.CallOption) (*types.QueryAccountResponse, error)
	// AccountAddressByID returns account address based on account number.
	//
	// Since: cosmos-sdk 0.46.2
	AccountAddressByID(ctx context.Context, in *types.QueryAccountAddressByIDRequest, opts ...grpc.CallOption) (*types.QueryAccountAddressByIDResponse, error)
	// Params queries all parameters.
	Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error)
	// ModuleAccounts returns all the existing module accounts.
	//
	// Since: cosmos-sdk 0.46
	ModuleAccounts(ctx context.Context, in *types.QueryModuleAccountsRequest, opts ...grpc.CallOption) (*types.QueryModuleAccountsResponse, error)
	// ModuleAccountByName returns the module account info by module name
	ModuleAccountByName(ctx context.Context, in *types.QueryModuleAccountByNameRequest, opts ...grpc.CallOption) (*types.QueryModuleAccountByNameResponse, error)
	// Bech32Prefix queries bech32Prefix
	//
	// Since: cosmos-sdk 0.46
	Bech32Prefix(ctx context.Context, in *types.Bech32PrefixRequest, opts ...grpc.CallOption) (*types.Bech32PrefixResponse, error)
	// AddressBytesToString converts Account Address bytes to string
	//
	// Since: cosmos-sdk 0.46
	AddressBytesToString(ctx context.Context, in *types.AddressBytesToStringRequest, opts ...grpc.CallOption) (*types.AddressBytesToStringResponse, error)
	// AddressStringToBytes converts Address string to bytes
	//
	// Since: cosmos-sdk 0.46
	AddressStringToBytes(ctx context.Context, in *types.AddressStringToBytesRequest, opts ...grpc.CallOption) (*types.AddressStringToBytesResponse, error)
	// AccountInfo queries account info which is common to all account types.
	//
	// Since: cosmos-sdk 0.47
	AccountInfo(ctx context.Context, in *types.QueryAccountInfoRequest, opts ...grpc.CallOption) (*types.QueryAccountInfoResponse, error)
}

type queryAuthClient struct {
	cc grpc1.ClientConn
}

func NewQueryAuthClient(cc grpc1.ClientConn) QueryAuthClient {
	return &queryAuthClient{cc}
}

func (c *queryAuthClient) Accounts(ctx context.Context, in *types.QueryAccountsRequest, opts ...grpc.CallOption) (*types.QueryAccountsResponse, error) {
	out := new(types.QueryAccountsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryAuth/Accounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAuthClient) Account(ctx context.Context, in *types.QueryAccountRequest, opts ...grpc.CallOption) (*types.QueryAccountResponse, error) {
	out := new(types.QueryAccountResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryAuth/Account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAuthClient) AccountAddressByID(ctx context.Context, in *types.QueryAccountAddressByIDRequest, opts ...grpc.CallOption) (*types.QueryAccountAddressByIDResponse, error) {
	out := new(types.QueryAccountAddressByIDResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryAuth/AccountAddressByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAuthClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	out := new(types.QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryAuth/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAuthClient) ModuleAccounts(ctx context.Context, in *types.QueryModuleAccountsRequest, opts ...grpc.CallOption) (*types.QueryModuleAccountsResponse, error) {
	out := new(types.QueryModuleAccountsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryAuth/ModuleAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAuthClient) ModuleAccountByName(ctx context.Context, in *types.QueryModuleAccountByNameRequest, opts ...grpc.CallOption) (*types.QueryModuleAccountByNameResponse, error) {
	out := new(types.QueryModuleAccountByNameResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryAuth/ModuleAccountByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAuthClient) Bech32Prefix(ctx context.Context, in *types.Bech32PrefixRequest, opts ...grpc.CallOption) (*types.Bech32PrefixResponse, error) {
	out := new(types.Bech32PrefixResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryAuth/Bech32Prefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAuthClient) AddressBytesToString(ctx context.Context, in *types.AddressBytesToStringRequest, opts ...grpc.CallOption) (*types.AddressBytesToStringResponse, error) {
	out := new(types.AddressBytesToStringResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryAuth/AddressBytesToString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAuthClient) AddressStringToBytes(ctx context.Context, in *types.AddressStringToBytesRequest, opts ...grpc.CallOption) (*types.AddressStringToBytesResponse, error) {
	out := new(types.AddressStringToBytesResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryAuth/AddressStringToBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAuthClient) AccountInfo(ctx context.Context, in *types.QueryAccountInfoRequest, opts ...grpc.CallOption) (*types.QueryAccountInfoResponse, error) {
	out := new(types.QueryAccountInfoResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryAuth/AccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryAuthServer is the server API for QueryAuth service.
type QueryAuthServer interface {
	// Accounts returns all the existing accounts.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	//
	// Since: cosmos-sdk 0.43
	Accounts(context.Context, *types.QueryAccountsRequest) (*types.QueryAccountsResponse, error)
	// Account returns account details based on address.
	Account(context.Context, *types.QueryAccountRequest) (*types.QueryAccountResponse, error)
	// AccountAddressByID returns account address based on account number.
	//
	// Since: cosmos-sdk 0.46.2
	AccountAddressByID(context.Context, *types.QueryAccountAddressByIDRequest) (*types.QueryAccountAddressByIDResponse, error)
	// Params queries all parameters.
	Params(context.Context, *types.QueryParamsRequest) (*types.QueryParamsResponse, error)
	// ModuleAccounts returns all the existing module accounts.
	//
	// Since: cosmos-sdk 0.46
	ModuleAccounts(context.Context, *types.QueryModuleAccountsRequest) (*types.QueryModuleAccountsResponse, error)
	// ModuleAccountByName returns the module account info by module name
	ModuleAccountByName(context.Context, *types.QueryModuleAccountByNameRequest) (*types.QueryModuleAccountByNameResponse, error)
	// Bech32Prefix queries bech32Prefix
	//
	// Since: cosmos-sdk 0.46
	Bech32Prefix(context.Context, *types.Bech32PrefixRequest) (*types.Bech32PrefixResponse, error)
	// AddressBytesToString converts Account Address bytes to string
	//
	// Since: cosmos-sdk 0.46
	AddressBytesToString(context.Context, *types.AddressBytesToStringRequest) (*types.AddressBytesToStringResponse, error)
	// AddressStringToBytes converts Address string to bytes
	//
	// Since: cosmos-sdk 0.46
	AddressStringToBytes(context.Context, *types.AddressStringToBytesRequest) (*types.AddressStringToBytesResponse, error)
	// AccountInfo queries account info which is common to all account types.
	//
	// Since: cosmos-sdk 0.47
	AccountInfo(context.Context, *types.QueryAccountInfoRequest) (*types.QueryAccountInfoResponse, error)
}

// UnimplementedQueryAuthServer can be embedded to have forward compatible implementations.
type UnimplementedQueryAuthServer struct {
}

func (*UnimplementedQueryAuthServer) Accounts(ctx context.Context, req *types.QueryAccountsRequest) (*types.QueryAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accounts not implemented")
}
func (*UnimplementedQueryAuthServer) Account(ctx context.Context, req *types.QueryAccountRequest) (*types.QueryAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (*UnimplementedQueryAuthServer) AccountAddressByID(ctx context.Context, req *types.QueryAccountAddressByIDRequest) (*types.QueryAccountAddressByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAddressByID not implemented")
}
func (*UnimplementedQueryAuthServer) Params(ctx context.Context, req *types.QueryParamsRequest) (*types.QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryAuthServer) ModuleAccounts(ctx context.Context, req *types.QueryModuleAccountsRequest) (*types.QueryModuleAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleAccounts not implemented")
}
func (*UnimplementedQueryAuthServer) ModuleAccountByName(ctx context.Context, req *types.QueryModuleAccountByNameRequest) (*types.QueryModuleAccountByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleAccountByName not implemented")
}
func (*UnimplementedQueryAuthServer) Bech32Prefix(ctx context.Context, req *types.Bech32PrefixRequest) (*types.Bech32PrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bech32Prefix not implemented")
}
func (*UnimplementedQueryAuthServer) AddressBytesToString(ctx context.Context, req *types.AddressBytesToStringRequest) (*types.AddressBytesToStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressBytesToString not implemented")
}
func (*UnimplementedQueryAuthServer) AddressStringToBytes(ctx context.Context, req *types.AddressStringToBytesRequest) (*types.AddressStringToBytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressStringToBytes not implemented")
}
func (*UnimplementedQueryAuthServer) AccountInfo(ctx context.Context, req *types.QueryAccountInfoRequest) (*types.QueryAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInfo not implemented")
}

func RegisterQueryAuthServer(s grpc1.Server, srv QueryAuthServer) {
	s.RegisterService(&_QueryAuth_serviceDesc, srv)
}

func _QueryAuth_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAuthServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryAuth/Accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAuthServer).Accounts(ctx, req.(*types.QueryAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAuth_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAuthServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryAuth/Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAuthServer).Account(ctx, req.(*types.QueryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAuth_AccountAddressByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryAccountAddressByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAuthServer).AccountAddressByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryAuth/AccountAddressByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAuthServer).AccountAddressByID(ctx, req.(*types.QueryAccountAddressByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAuth_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAuthServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryAuth/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAuthServer).Params(ctx, req.(*types.QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAuth_ModuleAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryModuleAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAuthServer).ModuleAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryAuth/ModuleAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAuthServer).ModuleAccounts(ctx, req.(*types.QueryModuleAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAuth_ModuleAccountByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryModuleAccountByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAuthServer).ModuleAccountByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryAuth/ModuleAccountByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAuthServer).ModuleAccountByName(ctx, req.(*types.QueryModuleAccountByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAuth_Bech32Prefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Bech32PrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAuthServer).Bech32Prefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryAuth/Bech32Prefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAuthServer).Bech32Prefix(ctx, req.(*types.Bech32PrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAuth_AddressBytesToString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.AddressBytesToStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAuthServer).AddressBytesToString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryAuth/AddressBytesToString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAuthServer).AddressBytesToString(ctx, req.(*types.AddressBytesToStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAuth_AddressStringToBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.AddressStringToBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAuthServer).AddressStringToBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryAuth/AddressStringToBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAuthServer).AddressStringToBytes(ctx, req.(*types.AddressStringToBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAuth_AccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAuthServer).AccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryAuth/AccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAuthServer).AccountInfo(ctx, req.(*types.QueryAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mythos.cosmosmod.v1.QueryAuth",
	HandlerType: (*QueryAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Accounts",
			Handler:    _QueryAuth_Accounts_Handler,
		},
		{
			MethodName: "Account",
			Handler:    _QueryAuth_Account_Handler,
		},
		{
			MethodName: "AccountAddressByID",
			Handler:    _QueryAuth_AccountAddressByID_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _QueryAuth_Params_Handler,
		},
		{
			MethodName: "ModuleAccounts",
			Handler:    _QueryAuth_ModuleAccounts_Handler,
		},
		{
			MethodName: "ModuleAccountByName",
			Handler:    _QueryAuth_ModuleAccountByName_Handler,
		},
		{
			MethodName: "Bech32Prefix",
			Handler:    _QueryAuth_Bech32Prefix_Handler,
		},
		{
			MethodName: "AddressBytesToString",
			Handler:    _QueryAuth_AddressBytesToString_Handler,
		},
		{
			MethodName: "AddressStringToBytes",
			Handler:    _QueryAuth_AddressStringToBytes_Handler,
		},
		{
			MethodName: "AccountInfo",
			Handler:    _QueryAuth_AccountInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mythos/cosmosmod/v1/auth_query.proto",
}
