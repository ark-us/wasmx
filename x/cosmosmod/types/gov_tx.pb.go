// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/cosmosmod/v1/gov_tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	v1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("mythos/cosmosmod/v1/gov_tx.proto", fileDescriptor_978362013277d780) }

var fileDescriptor_978362013277d780 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc8, 0xad, 0x2c, 0xc9,
	0xc8, 0x2f, 0xd6, 0x4f, 0xce, 0x2f, 0xce, 0x05, 0xa1, 0x14, 0xfd, 0x32, 0x43, 0xfd, 0xf4, 0xfc,
	0xb2, 0xf8, 0x92, 0x0a, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x61, 0x88, 0x0a, 0x3d, 0xb8,
	0x0a, 0xbd, 0x32, 0x43, 0x29, 0x91, 0xf4, 0xfc, 0xf4, 0x7c, 0xb0, 0xbc, 0x3e, 0x88, 0x05, 0x51,
	0x2a, 0x25, 0x09, 0x51, 0x13, 0x0f, 0x91, 0x80, 0x70, 0xa0, 0x52, 0xe2, 0x10, 0x9e, 0x7e, 0x6e,
	0x71, 0x3a, 0xc8, 0x86, 0xdc, 0xe2, 0x74, 0xa8, 0x84, 0x60, 0x62, 0x6e, 0x66, 0x5e, 0xbe, 0x3e,
	0x98, 0x84, 0x0a, 0x89, 0x41, 0xd5, 0xa6, 0xe7, 0x97, 0x81, 0xd4, 0xc2, 0x5c, 0x62, 0x74, 0x8e,
	0x89, 0x8b, 0xcd, 0xb7, 0x38, 0xdd, 0x3d, 0xbf, 0x4c, 0x28, 0x86, 0x8b, 0x2f, 0xb8, 0x34, 0x29,
	0x37, 0xb3, 0x24, 0xa0, 0x28, 0xbf, 0x20, 0xbf, 0x38, 0x31, 0x47, 0x48, 0x01, 0xea, 0x40, 0xbd,
	0xf4, 0xfc, 0x32, 0xbd, 0x32, 0x43, 0x3d, 0xdf, 0xe2, 0x74, 0x54, 0x15, 0x52, 0x1a, 0x84, 0x54,
	0x04, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0xd9, 0x71, 0xb1, 0x84, 0xe5, 0x97, 0xa4,
	0x0a, 0x89, 0x61, 0xea, 0x00, 0x89, 0x4b, 0xc9, 0x61, 0x17, 0x87, 0xeb, 0x0f, 0xe3, 0xe2, 0x01,
	0xf1, 0xc3, 0x53, 0x33, 0xd3, 0x33, 0x4a, 0x52, 0x53, 0x84, 0x70, 0xa8, 0x87, 0xc9, 0x4b, 0xa9,
	0xe1, 0x97, 0x87, 0x9b, 0xeb, 0xce, 0xc5, 0xee, 0x92, 0x5a, 0x90, 0x5f, 0x9c, 0x59, 0x22, 0x24,
	0x89, 0xa9, 0x05, 0x2a, 0x25, 0xa5, 0x88, 0x53, 0x0a, 0x66, 0x90, 0x14, 0x6b, 0xc3, 0xf3, 0x0d,
	0x5a, 0x8c, 0x4e, 0x96, 0x27, 0x1e, 0xca, 0x31, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c,
	0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1,
	0x1c, 0x43, 0x94, 0x34, 0x34, 0x69, 0x94, 0x19, 0xea, 0x57, 0x20, 0xa5, 0x8f, 0x92, 0xca, 0x82,
	0xd4, 0xe2, 0x24, 0x36, 0x70, 0x94, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x45, 0x7f, 0xc5,
	0x89, 0x40, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgGovClient is the client API for MsgGov service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgGovClient interface {
	// SubmitProposal defines a method to create new proposal given a content.
	SubmitProposal(ctx context.Context, in *v1.MsgSubmitProposal, opts ...grpc.CallOption) (*v1.MsgSubmitProposalResponse, error)
	// Vote defines a method to add a vote on a specific proposal.
	Vote(ctx context.Context, in *v1.MsgVote, opts ...grpc.CallOption) (*v1.MsgVoteResponse, error)
	// VoteWeighted defines a method to add a weighted vote on a specific proposal.
	//
	// Since: cosmos-sdk 0.43
	VoteWeighted(ctx context.Context, in *v1.MsgVoteWeighted, opts ...grpc.CallOption) (*v1.MsgVoteWeightedResponse, error)
	// Deposit defines a method to add deposit on a specific proposal.
	Deposit(ctx context.Context, in *v1.MsgDeposit, opts ...grpc.CallOption) (*v1.MsgDepositResponse, error)
}

type msgGovClient struct {
	cc grpc1.ClientConn
}

func NewMsgGovClient(cc grpc1.ClientConn) MsgGovClient {
	return &msgGovClient{cc}
}

func (c *msgGovClient) SubmitProposal(ctx context.Context, in *v1.MsgSubmitProposal, opts ...grpc.CallOption) (*v1.MsgSubmitProposalResponse, error) {
	out := new(v1.MsgSubmitProposalResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.MsgGov/SubmitProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgGovClient) Vote(ctx context.Context, in *v1.MsgVote, opts ...grpc.CallOption) (*v1.MsgVoteResponse, error) {
	out := new(v1.MsgVoteResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.MsgGov/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgGovClient) VoteWeighted(ctx context.Context, in *v1.MsgVoteWeighted, opts ...grpc.CallOption) (*v1.MsgVoteWeightedResponse, error) {
	out := new(v1.MsgVoteWeightedResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.MsgGov/VoteWeighted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgGovClient) Deposit(ctx context.Context, in *v1.MsgDeposit, opts ...grpc.CallOption) (*v1.MsgDepositResponse, error) {
	out := new(v1.MsgDepositResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.MsgGov/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgGovServer is the server API for MsgGov service.
type MsgGovServer interface {
	// SubmitProposal defines a method to create new proposal given a content.
	SubmitProposal(context.Context, *v1.MsgSubmitProposal) (*v1.MsgSubmitProposalResponse, error)
	// Vote defines a method to add a vote on a specific proposal.
	Vote(context.Context, *v1.MsgVote) (*v1.MsgVoteResponse, error)
	// VoteWeighted defines a method to add a weighted vote on a specific proposal.
	//
	// Since: cosmos-sdk 0.43
	VoteWeighted(context.Context, *v1.MsgVoteWeighted) (*v1.MsgVoteWeightedResponse, error)
	// Deposit defines a method to add deposit on a specific proposal.
	Deposit(context.Context, *v1.MsgDeposit) (*v1.MsgDepositResponse, error)
}

// UnimplementedMsgGovServer can be embedded to have forward compatible implementations.
type UnimplementedMsgGovServer struct {
}

func (*UnimplementedMsgGovServer) SubmitProposal(ctx context.Context, req *v1.MsgSubmitProposal) (*v1.MsgSubmitProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProposal not implemented")
}
func (*UnimplementedMsgGovServer) Vote(ctx context.Context, req *v1.MsgVote) (*v1.MsgVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedMsgGovServer) VoteWeighted(ctx context.Context, req *v1.MsgVoteWeighted) (*v1.MsgVoteWeightedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWeighted not implemented")
}
func (*UnimplementedMsgGovServer) Deposit(ctx context.Context, req *v1.MsgDeposit) (*v1.MsgDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}

func RegisterMsgGovServer(s grpc1.Server, srv MsgGovServer) {
	s.RegisterService(&_MsgGov_serviceDesc, srv)
}

func _MsgGov_SubmitProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.MsgSubmitProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgGovServer).SubmitProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.MsgGov/SubmitProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgGovServer).SubmitProposal(ctx, req.(*v1.MsgSubmitProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgGov_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.MsgVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgGovServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.MsgGov/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgGovServer).Vote(ctx, req.(*v1.MsgVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgGov_VoteWeighted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.MsgVoteWeighted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgGovServer).VoteWeighted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.MsgGov/VoteWeighted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgGovServer).VoteWeighted(ctx, req.(*v1.MsgVoteWeighted))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgGov_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.MsgDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgGovServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.MsgGov/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgGovServer).Deposit(ctx, req.(*v1.MsgDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgGov_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mythos.cosmosmod.v1.MsgGov",
	HandlerType: (*MsgGovServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitProposal",
			Handler:    _MsgGov_SubmitProposal_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _MsgGov_Vote_Handler,
		},
		{
			MethodName: "VoteWeighted",
			Handler:    _MsgGov_VoteWeighted_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _MsgGov_Deposit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mythos/cosmosmod/v1/gov_tx.proto",
}
