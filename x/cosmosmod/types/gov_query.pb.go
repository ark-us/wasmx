// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/cosmosmod/v1/gov_query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	v1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("mythos/cosmosmod/v1/gov_query.proto", fileDescriptor_2d2f98d017b8cfd9)
}

var fileDescriptor_2d2f98d017b8cfd9 = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6b, 0x13, 0x41,
	0x14, 0xc6, 0xb3, 0xa2, 0x35, 0x8e, 0x27, 0x9f, 0x82, 0x9a, 0xca, 0x5a, 0x1b, 0x5b, 0x45, 0x65,
	0x87, 0xd5, 0xa2, 0x88, 0x7a, 0x51, 0xc1, 0x6b, 0x2d, 0xe2, 0xc1, 0x4b, 0x98, 0x98, 0x61, 0x5d,
	0xd8, 0xdd, 0xb7, 0xdd, 0x37, 0x59, 0x8c, 0x31, 0x97, 0x82, 0x78, 0x13, 0x41, 0xc1, 0x7f, 0xa9,
	0xc7, 0x82, 0x17, 0x2f, 0x82, 0x26, 0xfe, 0x21, 0x32, 0xb3, 0x33, 0x35, 0x2d, 0xc9, 0xb6, 0x15,
	0x42, 0x76, 0x86, 0xef, 0xdb, 0xef, 0xfb, 0xbd, 0x4d, 0x76, 0x58, 0x3b, 0x1d, 0xa8, 0x37, 0x48,
	0xfc, 0x35, 0x52, 0xaa, 0x3f, 0x3d, 0x5e, 0x86, 0x3c, 0xc2, 0xb2, 0xb3, 0xd9, 0x97, 0xc5, 0x20,
	0xc8, 0x0b, 0x54, 0x08, 0x67, 0x2b, 0x53, 0xb0, 0x6b, 0x0a, 0xca, 0xb0, 0x75, 0x2e, 0xc2, 0x08,
	0x8d, 0xce, 0xf5, 0xaa, 0xb2, 0xb6, 0x2e, 0x45, 0x88, 0x51, 0x22, 0xb9, 0xc8, 0x63, 0x2e, 0xb2,
	0x0c, 0x95, 0x50, 0x31, 0x66, 0x64, 0xd5, 0x8b, 0x55, 0x42, 0xa7, 0xba, 0xad, 0xda, 0x58, 0xe9,
	0x7c, 0xb5, 0xe3, 0x29, 0x45, 0x1a, 0x21, 0xa5, 0xc8, 0x0a, 0x37, 0xac, 0xd0, 0x15, 0x24, 0xb9,
	0xa1, 0xe2, 0x65, 0xd8, 0x95, 0x4a, 0x84, 0x3c, 0x17, 0x51, 0x9c, 0x99, 0x02, 0xeb, 0x3d, 0x23,
	0xd2, 0x38, 0x43, 0x6e, 0xbe, 0xf7, 0xe5, 0x46, 0x58, 0xda, 0xd1, 0xf6, 0xb2, 0x38, 0x61, 0x6a,
	0xde, 0xd6, 0xa2, 0x95, 0x5c, 0xdb, 0xb4, 0x78, 0xfb, 0x67, 0x93, 0x35, 0x9f, 0xeb, 0xfd, 0x33,
	0x2c, 0xe1, 0x83, 0xc7, 0x9a, 0xeb, 0x05, 0xe6, 0x48, 0x22, 0x81, 0xb6, 0x7d, 0x40, 0x81, 0x2e,
	0x29, 0xc3, 0xc0, 0xb8, 0x9c, 0xba, 0x21, 0x37, 0xfb, 0x92, 0x54, 0xeb, 0x6a, 0xbd, 0x89, 0x72,
	0xcc, 0x48, 0x2e, 0x07, 0x5b, 0xdf, 0xff, 0x7c, 0x39, 0x76, 0x1d, 0x56, 0xf9, 0x5e, 0xca, 0xdc,
	0x1a, 0x89, 0x0f, 0xdd, 0xb2, 0x13, 0xf7, 0x46, 0xf0, 0x8e, 0x9d, 0x72, 0x19, 0x04, 0xb5, 0x15,
	0xe4, 0x40, 0x56, 0x0e, 0x70, 0x59, 0x92, 0x25, 0x43, 0xd2, 0x82, 0x0b, 0xf3, 0x48, 0xe0, 0xa3,
	0xc7, 0x8e, 0xbf, 0x44, 0x25, 0xe1, 0xf2, 0xac, 0x44, 0xad, 0xb8, 0xca, 0xa5, 0xf9, 0x06, 0xdb,
	0xf6, 0xd0, 0xb4, 0xdd, 0x85, 0xb5, 0xc3, 0xcd, 0xcd, 0x4b, 0x54, 0x92, 0xf8, 0x50, 0x5f, 0x8a,
	0x11, 0x6c, 0x79, 0xec, 0x84, 0x8e, 0x23, 0x98, 0xdb, 0xb4, 0x3b, 0xfe, 0x95, 0x1a, 0x87, 0x85,
	0x59, 0x33, 0x30, 0x01, 0xdc, 0x3a, 0x0a, 0x0c, 0xbc, 0x67, 0x0b, 0xeb, 0xa2, 0x10, 0x29, 0xc1,
	0xcc, 0x8a, 0x4a, 0x73, 0x14, 0xcb, 0x75, 0x16, 0x8b, 0x71, 0xd3, 0x60, 0xac, 0x40, 0x7b, 0x3f,
	0x86, 0xb1, 0xf1, 0x61, 0x75, 0xed, 0xa8, 0x41, 0x2e, 0x47, 0xf0, 0xcd, 0x63, 0x27, 0x9f, 0xca,
	0x1c, 0x29, 0x56, 0x30, 0x33, 0xdc, 0x8a, 0x0e, 0xa0, 0x5d, 0xeb, 0xb1, 0x04, 0x4f, 0x0c, 0xc1,
	0x23, 0x78, 0x70, 0xc8, 0x07, 0xd1, 0xab, 0xee, 0x27, 0x3e, 0xb4, 0x2b, 0x2c, 0x46, 0xf0, 0xc9,
	0x63, 0x4d, 0x1b, 0x4c, 0x50, 0x57, 0x4b, 0xb5, 0xaf, 0xca, 0x3f, 0x93, 0x85, 0xbb, 0x67, 0xe0,
	0x42, 0xe0, 0x47, 0x84, 0x83, 0xaf, 0x1e, 0x3b, 0xfd, 0x42, 0x24, 0xc9, 0x60, 0x43, 0x52, 0x3f,
	0x51, 0xb0, 0x3a, 0xab, 0x6e, 0xca, 0xe0, 0xb0, 0xae, 0x1d, 0xe8, 0xfb, 0xcf, 0xff, 0x8f, 0xd2,
	0x19, 0x8f, 0xef, 0x6f, 0xff, 0xf6, 0x1b, 0xdb, 0x63, 0xdf, 0xdb, 0x19, 0xfb, 0xde, 0xaf, 0xb1,
	0xef, 0x7d, 0x9e, 0xf8, 0x8d, 0x9d, 0x89, 0xdf, 0xf8, 0x31, 0xf1, 0x1b, 0xaf, 0x16, 0xed, 0x79,
	0x5d, 0x86, 0xfc, 0xed, 0xd4, 0xa1, 0xad, 0x7f, 0x7c, 0xea, 0x2e, 0x98, 0x13, 0xea, 0xce, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x59, 0x64, 0xe6, 0x52, 0xd5, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryGovClient is the client API for QueryGov service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryGovClient interface {
	// Proposal queries proposal details based on ProposalID.
	Proposal(ctx context.Context, in *v1.QueryProposalRequest, opts ...grpc.CallOption) (*v1.QueryProposalResponse, error)
	// Proposals queries all proposals based on given status.
	Proposals(ctx context.Context, in *v1.QueryProposalsRequest, opts ...grpc.CallOption) (*v1.QueryProposalsResponse, error)
	// Vote queries voted information based on proposalID, voterAddr.
	Vote(ctx context.Context, in *v1.QueryVoteRequest, opts ...grpc.CallOption) (*v1.QueryVoteResponse, error)
	// Votes queries votes of a given proposal.
	Votes(ctx context.Context, in *v1.QueryVotesRequest, opts ...grpc.CallOption) (*v1.QueryVotesResponse, error)
	// Params queries all parameters of the gov module.
	Params(ctx context.Context, in *v1.QueryParamsRequest, opts ...grpc.CallOption) (*v1.QueryParamsResponse, error)
	// Deposit queries single deposit information based on proposalID, depositor address.
	Deposit(ctx context.Context, in *v1.QueryDepositRequest, opts ...grpc.CallOption) (*v1.QueryDepositResponse, error)
	// Deposits queries all deposits of a single proposal.
	Deposits(ctx context.Context, in *v1.QueryDepositsRequest, opts ...grpc.CallOption) (*v1.QueryDepositsResponse, error)
	// TallyResult queries the tally of a proposal vote.
	TallyResult(ctx context.Context, in *v1.QueryTallyResultRequest, opts ...grpc.CallOption) (*v1.QueryTallyResultResponse, error)
}

type queryGovClient struct {
	cc grpc1.ClientConn
}

func NewQueryGovClient(cc grpc1.ClientConn) QueryGovClient {
	return &queryGovClient{cc}
}

func (c *queryGovClient) Proposal(ctx context.Context, in *v1.QueryProposalRequest, opts ...grpc.CallOption) (*v1.QueryProposalResponse, error) {
	out := new(v1.QueryProposalResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Proposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) Proposals(ctx context.Context, in *v1.QueryProposalsRequest, opts ...grpc.CallOption) (*v1.QueryProposalsResponse, error) {
	out := new(v1.QueryProposalsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Proposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) Vote(ctx context.Context, in *v1.QueryVoteRequest, opts ...grpc.CallOption) (*v1.QueryVoteResponse, error) {
	out := new(v1.QueryVoteResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) Votes(ctx context.Context, in *v1.QueryVotesRequest, opts ...grpc.CallOption) (*v1.QueryVotesResponse, error) {
	out := new(v1.QueryVotesResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Votes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) Params(ctx context.Context, in *v1.QueryParamsRequest, opts ...grpc.CallOption) (*v1.QueryParamsResponse, error) {
	out := new(v1.QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) Deposit(ctx context.Context, in *v1.QueryDepositRequest, opts ...grpc.CallOption) (*v1.QueryDepositResponse, error) {
	out := new(v1.QueryDepositResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) Deposits(ctx context.Context, in *v1.QueryDepositsRequest, opts ...grpc.CallOption) (*v1.QueryDepositsResponse, error) {
	out := new(v1.QueryDepositsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Deposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) TallyResult(ctx context.Context, in *v1.QueryTallyResultRequest, opts ...grpc.CallOption) (*v1.QueryTallyResultResponse, error) {
	out := new(v1.QueryTallyResultResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/TallyResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryGovServer is the server API for QueryGov service.
type QueryGovServer interface {
	// Proposal queries proposal details based on ProposalID.
	Proposal(context.Context, *v1.QueryProposalRequest) (*v1.QueryProposalResponse, error)
	// Proposals queries all proposals based on given status.
	Proposals(context.Context, *v1.QueryProposalsRequest) (*v1.QueryProposalsResponse, error)
	// Vote queries voted information based on proposalID, voterAddr.
	Vote(context.Context, *v1.QueryVoteRequest) (*v1.QueryVoteResponse, error)
	// Votes queries votes of a given proposal.
	Votes(context.Context, *v1.QueryVotesRequest) (*v1.QueryVotesResponse, error)
	// Params queries all parameters of the gov module.
	Params(context.Context, *v1.QueryParamsRequest) (*v1.QueryParamsResponse, error)
	// Deposit queries single deposit information based on proposalID, depositor address.
	Deposit(context.Context, *v1.QueryDepositRequest) (*v1.QueryDepositResponse, error)
	// Deposits queries all deposits of a single proposal.
	Deposits(context.Context, *v1.QueryDepositsRequest) (*v1.QueryDepositsResponse, error)
	// TallyResult queries the tally of a proposal vote.
	TallyResult(context.Context, *v1.QueryTallyResultRequest) (*v1.QueryTallyResultResponse, error)
}

// UnimplementedQueryGovServer can be embedded to have forward compatible implementations.
type UnimplementedQueryGovServer struct {
}

func (*UnimplementedQueryGovServer) Proposal(ctx context.Context, req *v1.QueryProposalRequest) (*v1.QueryProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposal not implemented")
}
func (*UnimplementedQueryGovServer) Proposals(ctx context.Context, req *v1.QueryProposalsRequest) (*v1.QueryProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposals not implemented")
}
func (*UnimplementedQueryGovServer) Vote(ctx context.Context, req *v1.QueryVoteRequest) (*v1.QueryVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedQueryGovServer) Votes(ctx context.Context, req *v1.QueryVotesRequest) (*v1.QueryVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Votes not implemented")
}
func (*UnimplementedQueryGovServer) Params(ctx context.Context, req *v1.QueryParamsRequest) (*v1.QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryGovServer) Deposit(ctx context.Context, req *v1.QueryDepositRequest) (*v1.QueryDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedQueryGovServer) Deposits(ctx context.Context, req *v1.QueryDepositsRequest) (*v1.QueryDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposits not implemented")
}
func (*UnimplementedQueryGovServer) TallyResult(ctx context.Context, req *v1.QueryTallyResultRequest) (*v1.QueryTallyResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TallyResult not implemented")
}

func RegisterQueryGovServer(s grpc1.Server, srv QueryGovServer) {
	s.RegisterService(&_QueryGov_serviceDesc, srv)
}

func _QueryGov_Proposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Proposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Proposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Proposal(ctx, req.(*v1.QueryProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_Proposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Proposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Proposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Proposals(ctx, req.(*v1.QueryProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Vote(ctx, req.(*v1.QueryVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_Votes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Votes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Votes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Votes(ctx, req.(*v1.QueryVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Params(ctx, req.(*v1.QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Deposit(ctx, req.(*v1.QueryDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_Deposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Deposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Deposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Deposits(ctx, req.(*v1.QueryDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_TallyResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryTallyResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).TallyResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/TallyResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).TallyResult(ctx, req.(*v1.QueryTallyResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryGov_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mythos.cosmosmod.v1.QueryGov",
	HandlerType: (*QueryGovServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Proposal",
			Handler:    _QueryGov_Proposal_Handler,
		},
		{
			MethodName: "Proposals",
			Handler:    _QueryGov_Proposals_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _QueryGov_Vote_Handler,
		},
		{
			MethodName: "Votes",
			Handler:    _QueryGov_Votes_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _QueryGov_Params_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _QueryGov_Deposit_Handler,
		},
		{
			MethodName: "Deposits",
			Handler:    _QueryGov_Deposits_Handler,
		},
		{
			MethodName: "TallyResult",
			Handler:    _QueryGov_TallyResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mythos/cosmosmod/v1/gov_query.proto",
}
