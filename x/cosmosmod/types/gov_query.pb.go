// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mythos/cosmosmod/v1/gov_query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	v1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params *GovParams `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d2f98d017b8cfd9, []int{0}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsResponse)(nil), "mythos.cosmosmod.v1.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("mythos/cosmosmod/v1/gov_query.proto", fileDescriptor_2d2f98d017b8cfd9)
}

var fileDescriptor_2d2f98d017b8cfd9 = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6b, 0x13, 0x41,
	0x18, 0xc5, 0xb3, 0x52, 0x63, 0x9c, 0x9e, 0xfc, 0x2a, 0x58, 0x53, 0x5d, 0x63, 0x62, 0x6b, 0x51,
	0xd9, 0x61, 0x6b, 0xa9, 0x88, 0x7a, 0x51, 0xa1, 0x27, 0xa1, 0x06, 0xf1, 0xe0, 0x25, 0x6c, 0xcc,
	0xb0, 0x2e, 0x64, 0x77, 0xb6, 0xfb, 0x4d, 0x16, 0x63, 0xcc, 0xa5, 0x20, 0xde, 0x44, 0x50, 0xf0,
	0x5f, 0xea, 0xb1, 0xe0, 0xc5, 0x8b, 0xa0, 0x89, 0x7f, 0x88, 0xec, 0xcc, 0xb7, 0x35, 0x29, 0xc9,
	0xb6, 0x15, 0x4a, 0x77, 0x36, 0xef, 0xcd, 0x7b, 0xbf, 0x99, 0x4c, 0x86, 0x35, 0xc2, 0xbe, 0x7a,
	0x23, 0x91, 0xbf, 0x96, 0x18, 0x66, 0x7f, 0x1d, 0x9e, 0xba, 0xdc, 0x97, 0x69, 0x6b, 0xb7, 0x27,
	0x92, 0xbe, 0x13, 0x27, 0x52, 0x49, 0x58, 0x32, 0x26, 0xe7, 0xd0, 0xe4, 0xa4, 0x6e, 0xf5, 0xa2,
	0x2f, 0x7d, 0xa9, 0x75, 0x9e, 0x8d, 0x8c, 0xb5, 0x7a, 0xc5, 0x97, 0xd2, 0xef, 0x0a, 0xee, 0xc5,
	0x01, 0xf7, 0xa2, 0x48, 0x2a, 0x4f, 0x05, 0x32, 0x42, 0x52, 0x2f, 0x9b, 0x84, 0x96, 0x99, 0x66,
	0x5e, 0x48, 0xba, 0x64, 0xde, 0x78, 0x88, 0x7e, 0x86, 0x10, 0xa2, 0x4f, 0xc2, 0x2d, 0x12, 0xda,
	0x1e, 0x0a, 0xae, 0xa9, 0x78, 0xea, 0xb6, 0x85, 0xf2, 0x5c, 0x1e, 0x7b, 0x7e, 0x10, 0xe9, 0x02,
	0xf2, 0x5e, 0xf0, 0xc2, 0x20, 0x92, 0x5c, 0xff, 0x3f, 0x92, 0xeb, 0xcb, 0x94, 0x96, 0x36, 0xcd,
	0x92, 0x0b, 0x13, 0xeb, 0xad, 0xae, 0x90, 0x94, 0xb7, 0x4d, 0x89, 0x57, 0xe7, 0xec, 0x98, 0x91,
	0xeb, 0xcf, 0xd8, 0xd2, 0xf3, 0xcc, 0xbd, 0xe3, 0x25, 0x5e, 0x88, 0x4d, 0x81, 0xb1, 0x8c, 0x50,
	0xc0, 0x16, 0x2b, 0xc7, 0xfa, 0x93, 0xe5, 0x85, 0x9a, 0xb5, 0xbe, 0xb8, 0x61, 0x3b, 0x33, 0xf6,
	0xd4, 0xd9, 0x96, 0x29, 0xcd, 0x23, 0xf7, 0xc6, 0xcf, 0x0a, 0xab, 0xe8, 0xbc, 0x6d, 0x99, 0xc2,
	0x07, 0x8b, 0x55, 0x76, 0x12, 0x19, 0x4b, 0xf4, 0xba, 0xd0, 0xa0, 0xa9, 0x4e, 0xd6, 0x9d, 0xba,
	0x8e, 0x69, 0x25, 0xb5, 0x29, 0x76, 0x7b, 0x02, 0x55, 0xf5, 0x46, 0xb1, 0xc9, 0xc0, 0xd5, 0x9d,
	0xbd, 0xef, 0x7f, 0xbe, 0x9c, 0x59, 0x87, 0x35, 0x3e, 0xbd, 0x27, 0x31, 0x19, 0x91, 0x0f, 0xf2,
	0x61, 0x2b, 0xe8, 0x0c, 0xe1, 0x1d, 0x3b, 0x9f, 0x67, 0x20, 0x14, 0x56, 0x60, 0x0e, 0xb2, 0x7a,
	0x8c, 0x8b, 0x48, 0x6a, 0x9a, 0xa4, 0x0a, 0xcb, 0xf3, 0x48, 0xe0, 0xa3, 0xc5, 0x16, 0x5e, 0x4a,
	0x25, 0xe0, 0xda, 0xac, 0xc4, 0x4c, 0xc9, 0x2b, 0x6b, 0xf3, 0x0d, 0xd4, 0xf6, 0x50, 0xb7, 0x6d,
	0xc1, 0xe6, 0xc9, 0xd6, 0xcd, 0x53, 0xa9, 0x04, 0xf2, 0x41, 0xf6, 0x48, 0x86, 0xb0, 0x67, 0xb1,
	0xb3, 0x59, 0x1c, 0xc2, 0xdc, 0xa6, 0xc3, 0xe5, 0x5f, 0x2f, 0x70, 0x10, 0xcc, 0xa6, 0x86, 0x71,
	0xe0, 0xce, 0x69, 0x60, 0xe0, 0x3d, 0x2b, 0x9b, 0x13, 0x03, 0x33, 0x2b, 0xf2, 0x53, 0x68, 0x28,
	0xea, 0x45, 0x16, 0xc2, 0xb8, 0xad, 0x31, 0x56, 0xa1, 0x71, 0x14, 0x43, 0xdb, 0xf8, 0xc0, 0x3c,
	0x5b, 0xaa, 0x1f, 0x8b, 0x21, 0x7c, 0xb3, 0xd8, 0xb9, 0xa7, 0x22, 0x96, 0x18, 0x28, 0x98, 0x19,
	0x4e, 0x62, 0x0e, 0xd0, 0x28, 0xf4, 0x10, 0xc1, 0x13, 0x4d, 0xf0, 0x08, 0x1e, 0x9c, 0x70, 0x23,
	0x3a, 0x66, 0x3e, 0xf2, 0x01, 0x8d, 0x64, 0x32, 0x84, 0x4f, 0x16, 0xab, 0x50, 0x30, 0x42, 0x51,
	0x2d, 0x16, 0xfe, 0x54, 0xfe, 0x99, 0x08, 0xee, 0x9e, 0x86, 0x73, 0x81, 0x9f, 0x12, 0x0e, 0xbe,
	0x5a, 0x6c, 0xf1, 0x85, 0xd7, 0xed, 0xf6, 0x9b, 0x02, 0x7b, 0x5d, 0x05, 0x6b, 0xb3, 0xea, 0x26,
	0x0c, 0x39, 0xd6, 0xcd, 0x63, 0x7d, 0xff, 0x79, 0x7e, 0x54, 0x96, 0xf1, 0xf8, 0xfe, 0xfe, 0x6f,
	0xbb, 0xb4, 0x3f, 0xb2, 0xad, 0x83, 0x91, 0x6d, 0xfd, 0x1a, 0xd9, 0xd6, 0xe7, 0xb1, 0x5d, 0x3a,
	0x18, 0xdb, 0xa5, 0x1f, 0x63, 0xbb, 0xf4, 0x6a, 0x85, 0xee, 0xba, 0xd4, 0xe5, 0x6f, 0x27, 0x2e,
	0xbc, 0xec, 0xcb, 0xc7, 0x76, 0x59, 0x5f, 0x78, 0x77, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x93,
	0xcd, 0x85, 0x55, 0x43, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryGovClient is the client API for QueryGov service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryGovClient interface {
	// Proposal queries proposal details based on ProposalID.
	Proposal(ctx context.Context, in *v1.QueryProposalRequest, opts ...grpc.CallOption) (*v1.QueryProposalResponse, error)
	// Proposals queries all proposals based on given status.
	Proposals(ctx context.Context, in *v1.QueryProposalsRequest, opts ...grpc.CallOption) (*v1.QueryProposalsResponse, error)
	// Vote queries voted information based on proposalID, voterAddr.
	Vote(ctx context.Context, in *v1.QueryVoteRequest, opts ...grpc.CallOption) (*v1.QueryVoteResponse, error)
	// Votes queries votes of a given proposal.
	Votes(ctx context.Context, in *v1.QueryVotesRequest, opts ...grpc.CallOption) (*v1.QueryVotesResponse, error)
	// Params queries all parameters of the gov module.
	Params(ctx context.Context, in *v1.QueryParamsRequest, opts ...grpc.CallOption) (*v1.QueryParamsResponse, error)
	// Deposit queries single deposit information based on proposalID, depositor address.
	Deposit(ctx context.Context, in *v1.QueryDepositRequest, opts ...grpc.CallOption) (*v1.QueryDepositResponse, error)
	// Deposits queries all deposits of a single proposal.
	Deposits(ctx context.Context, in *v1.QueryDepositsRequest, opts ...grpc.CallOption) (*v1.QueryDepositsResponse, error)
	// TallyResult queries the tally of a proposal vote.
	TallyResult(ctx context.Context, in *v1.QueryTallyResultRequest, opts ...grpc.CallOption) (*v1.QueryTallyResultResponse, error)
}

type queryGovClient struct {
	cc grpc1.ClientConn
}

func NewQueryGovClient(cc grpc1.ClientConn) QueryGovClient {
	return &queryGovClient{cc}
}

func (c *queryGovClient) Proposal(ctx context.Context, in *v1.QueryProposalRequest, opts ...grpc.CallOption) (*v1.QueryProposalResponse, error) {
	out := new(v1.QueryProposalResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Proposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) Proposals(ctx context.Context, in *v1.QueryProposalsRequest, opts ...grpc.CallOption) (*v1.QueryProposalsResponse, error) {
	out := new(v1.QueryProposalsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Proposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) Vote(ctx context.Context, in *v1.QueryVoteRequest, opts ...grpc.CallOption) (*v1.QueryVoteResponse, error) {
	out := new(v1.QueryVoteResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) Votes(ctx context.Context, in *v1.QueryVotesRequest, opts ...grpc.CallOption) (*v1.QueryVotesResponse, error) {
	out := new(v1.QueryVotesResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Votes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) Params(ctx context.Context, in *v1.QueryParamsRequest, opts ...grpc.CallOption) (*v1.QueryParamsResponse, error) {
	out := new(v1.QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) Deposit(ctx context.Context, in *v1.QueryDepositRequest, opts ...grpc.CallOption) (*v1.QueryDepositResponse, error) {
	out := new(v1.QueryDepositResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) Deposits(ctx context.Context, in *v1.QueryDepositsRequest, opts ...grpc.CallOption) (*v1.QueryDepositsResponse, error) {
	out := new(v1.QueryDepositsResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/Deposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryGovClient) TallyResult(ctx context.Context, in *v1.QueryTallyResultRequest, opts ...grpc.CallOption) (*v1.QueryTallyResultResponse, error) {
	out := new(v1.QueryTallyResultResponse)
	err := c.cc.Invoke(ctx, "/mythos.cosmosmod.v1.QueryGov/TallyResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryGovServer is the server API for QueryGov service.
type QueryGovServer interface {
	// Proposal queries proposal details based on ProposalID.
	Proposal(context.Context, *v1.QueryProposalRequest) (*v1.QueryProposalResponse, error)
	// Proposals queries all proposals based on given status.
	Proposals(context.Context, *v1.QueryProposalsRequest) (*v1.QueryProposalsResponse, error)
	// Vote queries voted information based on proposalID, voterAddr.
	Vote(context.Context, *v1.QueryVoteRequest) (*v1.QueryVoteResponse, error)
	// Votes queries votes of a given proposal.
	Votes(context.Context, *v1.QueryVotesRequest) (*v1.QueryVotesResponse, error)
	// Params queries all parameters of the gov module.
	Params(context.Context, *v1.QueryParamsRequest) (*v1.QueryParamsResponse, error)
	// Deposit queries single deposit information based on proposalID, depositor address.
	Deposit(context.Context, *v1.QueryDepositRequest) (*v1.QueryDepositResponse, error)
	// Deposits queries all deposits of a single proposal.
	Deposits(context.Context, *v1.QueryDepositsRequest) (*v1.QueryDepositsResponse, error)
	// TallyResult queries the tally of a proposal vote.
	TallyResult(context.Context, *v1.QueryTallyResultRequest) (*v1.QueryTallyResultResponse, error)
}

// UnimplementedQueryGovServer can be embedded to have forward compatible implementations.
type UnimplementedQueryGovServer struct {
}

func (*UnimplementedQueryGovServer) Proposal(ctx context.Context, req *v1.QueryProposalRequest) (*v1.QueryProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposal not implemented")
}
func (*UnimplementedQueryGovServer) Proposals(ctx context.Context, req *v1.QueryProposalsRequest) (*v1.QueryProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposals not implemented")
}
func (*UnimplementedQueryGovServer) Vote(ctx context.Context, req *v1.QueryVoteRequest) (*v1.QueryVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedQueryGovServer) Votes(ctx context.Context, req *v1.QueryVotesRequest) (*v1.QueryVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Votes not implemented")
}
func (*UnimplementedQueryGovServer) Params(ctx context.Context, req *v1.QueryParamsRequest) (*v1.QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryGovServer) Deposit(ctx context.Context, req *v1.QueryDepositRequest) (*v1.QueryDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedQueryGovServer) Deposits(ctx context.Context, req *v1.QueryDepositsRequest) (*v1.QueryDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposits not implemented")
}
func (*UnimplementedQueryGovServer) TallyResult(ctx context.Context, req *v1.QueryTallyResultRequest) (*v1.QueryTallyResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TallyResult not implemented")
}

func RegisterQueryGovServer(s grpc1.Server, srv QueryGovServer) {
	s.RegisterService(&_QueryGov_serviceDesc, srv)
}

func _QueryGov_Proposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Proposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Proposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Proposal(ctx, req.(*v1.QueryProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_Proposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Proposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Proposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Proposals(ctx, req.(*v1.QueryProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Vote(ctx, req.(*v1.QueryVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_Votes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Votes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Votes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Votes(ctx, req.(*v1.QueryVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Params(ctx, req.(*v1.QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Deposit(ctx, req.(*v1.QueryDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_Deposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).Deposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/Deposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).Deposits(ctx, req.(*v1.QueryDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryGov_TallyResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryTallyResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryGovServer).TallyResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythos.cosmosmod.v1.QueryGov/TallyResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryGovServer).TallyResult(ctx, req.(*v1.QueryTallyResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryGov_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mythos.cosmosmod.v1.QueryGov",
	HandlerType: (*QueryGovServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Proposal",
			Handler:    _QueryGov_Proposal_Handler,
		},
		{
			MethodName: "Proposals",
			Handler:    _QueryGov_Proposals_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _QueryGov_Vote_Handler,
		},
		{
			MethodName: "Votes",
			Handler:    _QueryGov_Votes_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _QueryGov_Params_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _QueryGov_Deposit_Handler,
		},
		{
			MethodName: "Deposits",
			Handler:    _QueryGov_Deposits_Handler,
		},
		{
			MethodName: "TallyResult",
			Handler:    _QueryGov_TallyResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mythos/cosmosmod/v1/gov_query.proto",
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func encodeVarintGovQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovGovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovGovQuery(uint64(l))
	}
	return n
}

func sovGovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGovQuery(x uint64) (n int) {
	return sovGovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &GovParams{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGovQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGovQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGovQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGovQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGovQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGovQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGovQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGovQuery = fmt.Errorf("proto: unexpected end of group")
)
