(do
(import "sdk")

(def! main (fn* (obj) (do
    (println "main" obj)
    (if (contains? obj "instantiate")
        (wasmx-finish b[])
    (if (contains? obj "LoggerInfo") (let* (
            params (get obj "LoggerInfo")
        )
        (do
            (logger-info (get params "a") [])
            (wasmx-finish b[])))
    (if (contains? obj "LoggerError") (let* (
            params (get obj "LoggerError")
        )
        (do
            (logger-error (get params "a") [])
            (wasmx-finish b[])))
    (if (contains? obj "LoggerDebug") (let* (
            params (get obj "LoggerDebug")
        )
        (do
            (logger-debug (get params "a") [])
            (wasmx-finish b[])))
    (if (contains? obj "getAddressByRole") (let* (
            params (get obj "getAddressByRole")
        )
        (wasmx-finish (string.encode (get-address-by-role (get params "a")))))
    (if (contains? obj "getRoleByAddress") (let* (
            params (get obj "getRoleByAddress")
        )
        (wasmx-finish (string.encode (get-role-by-address (get params "a")))))
    (if (contains? obj "emitCosmosEvents")
        (do
            (wasmx-emitCosmosEvents (string.encode (json-stringify (get obj "emitCosmosEvents"))))
            (wasmx-finish b[])
        )
    (if (contains? obj "MerkleHash") (let* (
            params (get obj "MerkleHash")
            val {"slices" (get params "a")}
        )
        (wasmx-finish (wasmx-MerkleHash (string.encode (json-stringify val)))))
    (if (contains? obj "ed25519Sign") (let* (
        params (get obj "ed25519Sign")
        msg (get params "msg")
        privkey (base64.decode (get params "privkey"))
        signed (wasmx-ed25519Sign privkey (string.encode msg))
    )
        (wasmx-finish signed))
    (if (contains? obj "ed25519Verify") (let* (
        params (get obj "ed25519Verify")
        msg (get params "msg")
        pubkey (base64.decode (get params "pubkey"))
        signature (base64.decode (get params "signature"))
        signed (wasmx-ed25519Verify pubkey signature (string.encode msg))
    )
        (wasmx-finish (string.encode (if signed "true" "false"))))
    (if (contains? obj "ed25519PubToHex") (let* (
        params (get obj "ed25519PubToHex")
        pubkey (base64.decode (get params "pubkey"))
    )
        (wasmx-finish (wasmx-ed25519PubToHex pubkey)))
    (if (contains? obj "getCurrentBlock")
        (wasmx-finish (wasmx-getCurrentBlock))
    (if (contains? obj "getBalance") (let* (
        params (get obj "getBalance")
        addr (get params "address")
        denom (get params "denom")
        calldata (json-stringify {"GetBalance" {"address" addr "denom" denom}})
        res (call-bank {"calldata" calldata "isQuery" true})
        balance (if (get res "success")
            (get (json-parse (get res "data")) "balance")
            {"denom" denom "amount" "0"})
    )
        (wasmx-finish (string.encode (json-stringify balance))))
    (if (contains? obj "getAccount") (let* (
        params (get obj "getAccount")
        addr (get params "a")
        calldata (json-stringify {"GetAccount" {"address" addr}})
        res (call-auth {"calldata" calldata "isQuery" true})
        account (if (get res "success")
            (get (json-parse (get res "data")) "account")
            {})
        accountInfo (string.decode (base64.decode (get account "value")))
    )
        (wasmx-finish (string.encode accountInfo)))
    (if (contains? obj "decodeCosmosTxToJson") (let* (
        params (get obj "decodeCosmosTxToJson")
        val (get params "value")
    )
        (wasmx-finish (wasmx-decodeCosmosTxToJson (base64.decode val))))
    (if (contains? obj "verifyCosmosTx") (let* (
        params (get obj "verifyCosmosTx")
        val (get params "value")
        verif (wasmx-verifyCosmosTx (base64.decode val))
    )
        (wasmx-finish (string.encode (if verif "true" "false"))))
    (if (contains? obj "call") (let* (
        params (get obj "call")
        val (get params "value")
    )
        (wasmx-finish (wasmx-call (string.encode (json-stringify val)))))
    (throw "function not found")
    )))))))))))))))))
)))
(main (json-parse (get-calldata)))
)
