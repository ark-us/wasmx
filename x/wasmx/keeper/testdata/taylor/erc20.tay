(do
(import "sdk")

(def! KEY_ALLOWANCE "allowance_")
(def! KEY_BALANCE "balance_")
(def! KEY_TOTAL_SUPPLY "totalSupply")
(def! KEY_ADMINS "admins")
(def! KEY_MINTERS "minters")
(def! KEY_INFO "info")
(def! get-info (fn* () (let* (
    v (load-string KEY_INFO)
)
    (if (= v "")
        {}
        (json-parse v)
    )
)))
(def! set-info (fn* (obj)
    (store-string KEY_INFO (pr-str obj))
))
(def! get-balance (fn* (owner)
    (load-u256 (string.encode (str KEY_BALANCE owner)))
))
(def! set-balance (fn* (owner value)
    (store-u256 (string.encode (str KEY_BALANCE owner)) value)
))
(def! get-supply (fn* ()
    (load-u256 (string.encode KEY_TOTAL_SUPPLY))
))
(def! set-supply (fn* (value)
    (store-u256 (string.encode KEY_TOTAL_SUPPLY) value)
))
(def! moveto (fn* (receiver value) (let* (
    dd (println "moveto" receiver value)
    b (get-balance receiver)
    dd (println "moveto balance" b)
  )
    (set-balance receiver (u256.add_m value b))
)))
(def! movefrom (fn* (source value) (let* (
    b (get-balance source)
)
    (if (>= b value)
        (set-balance source (u256.sub_m b value))
        (revert (str "insufficient balance for " source))
    )
)))

(def! mint (fn* () (let* (
        receiver (get-caller)
        amount u[0 0 0 1000]
    ) (do
    (println "mint" receiver)
    (moveto receiver amount)
    (set-supply (u256.add_m amount (get-supply)))
))))
(def! transfer (fn* (receiver value) (do
  (println "transfer" receiver (u256.to_hex value))
  (movefrom (get-caller) value)
  (moveto receiver value)
)))
(def! transferFrom (fn* (receiver value) (do
    ;; TODO
)))
(def! approve (fn* (spender value) (do
    ;; TODO
)))

(def! getName (fn* ()
    (string.encode (json-stringify {"name" (get (get-info) "name")}))
))
(def! getSymbol (fn* ()
    (string.encode (json-stringify {"symbol" (get (get-info) "symbol")}))
))
(def! getDecimals (fn* ()
    (string.encode (json-stringify {"decimals" (get (get-info) "decimals")}))
))
(def! balanceOf (fn* (owner) (let* (
    b (get-balance owner)
    ;; pp (println "balanceOf hex" (u256.to_hex b))
)
    (string.encode (json-stringify {"balance" b }))
    ;; (u256.to_hex b)
)))
(def! totalSupply (fn* ()
    (string.encode (json-stringify {"supply"
        (u256.to_hex (get-supply))
    }))
))
(def! allowance (fn* (spender) (do
    ;; TODO
)))
(def! instantiate (fn* (params) (let* (
        minters (get params "minters")
        name (get params "name")
        symbol (get params "symbol")
        decimals (get params "decimals")
        base_denom (get params "base_denom")
    )
    (do
        (set-info {"name" name "symbol" symbol "decimals" decimals})
        ;; TODO set minters, admins
    )
)))

(def! main (fn* (obj) (do
    (println "main" obj)
    (if (contains? obj "instantiate")
        (let* (params (get obj "instantiate"))
            (do (instantiate params) (wasmx-finish b[]) )
        )
    (if (contains? obj "mint")
        (let* (params (get obj "mint"))
            (do (mint) (wasmx-finish b[]) )
        )
    (if (contains? obj "transfer")
        (let* (params (get obj "transfer"))
            (transfer (get params "receiver") (u256.from_hex (get params "value"))))
    (if (contains? obj "balanceOf")
        (let* (params (get obj "balanceOf"))
            (wasmx-finish (balanceOf (get params "owner"))))
    (if (contains? obj "totalSupply")
        (wasmx-finish (totalSupply))
    (if (contains? obj "getName")
        (wasmx-finish (getName))
    (if (contains? obj "getSymbol")
        (wasmx-finish (getSymbol))
    (if (contains? obj "getDecimals")
        (wasmx-finish (getDecimals))
    (throw "function not found")))))))))
)))
(println "calldata" (get-calldata))
(main (json-parse (get-calldata)))
)
