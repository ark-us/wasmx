(do
(import "sdk")

;; returns a list of buffer objects
(def! storageLoadRange (fn* (startkeybz endkeybz reverse)
    (map (fn* (v) (base64.decode v))
        (json-parse (string-decode (wasmx-storageLoadRange (string.encode (json-stringify {"start_key" startkeybz "end_key" endkeybz "reverse" reverse})))))
    )
))

(def! storageLoadRangePairs (fn* (startkeybz endkeybz reverse) (let* (
    buf (wasmx-storageLoadRange (string.encode (json-stringify {"start_key" startkeybz "end_key" endkeybz "reverse" reverse})))
    resp (json-parse (string-decode buf))
    values
)
    (get resp "values") ;; StoragePair[] {key,value}
)))

(def! wasmxlog (fn* (typestr databuf topicsbufarr)
    (wasmx-log (string.encode (json-stringify {
        "type" typestr
        "data" databuf
        "topics" topicsbufarr
    })))
))

(def! main (fn* (obj) (do
    (println "main" obj)
    (if (contains? obj "instantiate")
        (wasmx-finish b[])
    (if (contains? obj "base64dec")
        (wasmx-finish (base64.decode (get (get obj "base64dec") "value")))
    (if (contains? obj "base64enc") (let* (
            val (get (get obj "base64enc") "value")
            encval (base64.encode (string.encode val))
        )
        (wasmx-finish (string.encode encval)))
    (if (contains? obj "bufferstringify") (let* (
        v {"somebuf" b[1 2 3 4 5]}
    )
        (wasmx-finish (string.encode (json-stringify v))))
    (if (contains? obj "uintstringify") (let* (
        v {"someu256" u[0 10 34 0]}
        p (println v)
    )
        (wasmx-finish (string.encode (json-stringify v))))
    (if (contains? obj "sha256") (let* (
            bval (get (get obj "sha256") "value")
            bufval (base64.decode bval)
        )
            (wasmx-finish (wasmx-keccak256 bufval)))
    (if (contains? obj "getChainId")
        (wasmx-finish (wasmx-getChainId))
    (if (contains? obj "getCaller") (let* (
        v (get-caller)
        p (println v)
    )
        (wasmx-finish (string.encode v)))
    (if (contains? obj "getAddress")
        (wasmx-finish (string.encode (get-address)))
    (if (contains? obj "storageStore") (let* (params (get obj "storageStore"))
        (do (wasmx-storageStore (base64.decode (get params "key")) (base64.decode (get params "value")))
            (wasmx-finish b[])))
    (if (contains? obj "storageLoad") (let* (params (get obj "storageLoad"))
            (wasmx-finish (wasmx-storageLoad (base64.decode (get params "key")) (base64.decode (get params "value")))))
    (if (contains? obj "storageLoadRange") (let* (params (get obj "storageLoadRange"))
        (wasmx-finish (string.encode
            (json-stringify (map (fn* (v) (base64.encode v))
                (storageLoadRange (get params "startkey") (get params "endkey") false)
            ))
        )))
    (if (contains? obj "storageLoadRangePairs") (let* (params (get obj "storageLoadRangePairs"))
        (wasmx-finish (string.encode
            (json-stringify (storageLoadRangePairs (get params "startkey") (get params "endkey") false))
        )))
    (if (contains? obj "log")
        (do (wasmxlog (json-parse (get params "log"))) (wasmx-finish b[]))
    (if (contains? obj "add") (let* (
            params (get obj "add")
            v (u256.add_m (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "sub") (let* (
            params (get obj "sub")
            v (u256.sub_m (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "mul") (let* (
            params (get obj "mul")
            v (u256.mul_m (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "div") (let* (
            params (get obj "div")
            v (u256.div (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "mod") (let* (
            params (get obj "mod")
            v (u256.mod (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "exp") (let* (
            params (get obj "exp")
            v (u256.exp (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "lt") (let* (
            params (get obj "lt")
            v (u256.lt (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (string.encode (if v "true" "false"))))
    (if (contains? obj "gt") (let* (
            params (get obj "gt")
            v (u256.gt (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (string.encode (if v "true" "false"))))
    (if (contains? obj "eq") (let* (
            params (get obj "eq")
            v (u256.eq (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (string.encode (if v "true" "false"))))
    (if (contains? obj "not") (let* (
            params (get obj "add")
            v (u256.add_m (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (throw "function not found")
    ))))))))))))))))))))))))
)))
(main (json-parse (get-calldata)))
)
