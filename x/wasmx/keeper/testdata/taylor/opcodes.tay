(do
(import "sdk")

(def! main (fn* (obj) (do
    (println "main" obj)
    (if (contains? obj "instantiate")
        (wasmx-finish b[])
    (if (contains? obj "base64dec")
        (wasmx-finish (base64.decode (get (get obj "base64dec") "value")))
    (if (contains? obj "base64enc") (let* (
            val (get (get obj "base64enc") "value")
            encval (base64.encode (string.encode val))
        )
        (wasmx-finish (string.encode encval)))
    (if (contains? obj "bufferstringify") (let* (
        v {"somebuf" b[1 2 3 4 5]}
    )
        (wasmx-finish (string.encode (json-stringify v))))
    (if (contains? obj "uintstringify") (let* (
        v {"someu256" u[0 10 34 0]}
        p (println v)
    )
        (wasmx-finish (string.encode (json-stringify v))))
    (if (contains? obj "sha256") (let* (
            bval (get (get obj "sha256") "value")
            bufval (base64.decode bval)
        )
            (wasmx-finish (wasmx-keccak256 bufval)))
    (if (contains? obj "getChainId")
        (wasmx-finish (wasmx-getChainId))
    (if (contains? obj "getCaller") (let* (
        v (get-caller)
        p (println v)
    )
        (wasmx-finish (string.encode v)))
    (if (contains? obj "getAddress")
        (wasmx-finish (string.encode (get-address)))
    (if (contains? obj "storageStore") (let* (params (get obj "storageStore"))
        (do (wasmx-storageStore (string.encode (get params "key")) (string.encode (get params "value")))
            (wasmx-finish b[])))
    (if (contains? obj "storageLoad") (let* (params (get obj "storageLoad"))
            (wasmx-finish (wasmx-storageLoad (string.encode (get params "key")))))
    (if (contains? obj "storageLoadRange") (let* (params (get obj "storageLoadRange"))
        (wasmx-finish (string.encode
            (json-stringify (map (fn* (v) (base64.encode v))
                (storageLoadRange (string.encode (get params "startkey")) (string.encode (get params "endkey")) false)
            ))
        )))
    (if (contains? obj "storageLoadRangePairs") (let* (params (get obj "storageLoadRangePairs"))
        (wasmx-finish (string.encode
            (json-stringify (storageLoadRangePairs (string.encode (get params "startkey")) (string.encode (get params "endkey")) false))
        )))
    (if (contains? obj "log")
        (do
            (wasmx-log (string.encode (json-stringify (get obj "log"))))
            (wasmx-finish b[])
        )
    (if (contains? obj "setFinishData")
        (do
            (wasmx-setFinishData (string.encode "hello"))
            (wasmx-finish (wasmx-getFinishData))
        )
    (if (contains? obj "revert") (do
        (wasmx-revert (string.encode "someerror")))
    (if (contains? obj "add") (let* (
            params (get obj "add")
            v (u256.add_m (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "sub") (let* (
            params (get obj "sub")
            v (u256.sub_m (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "mul") (let* (
            params (get obj "mul")
            v (u256.mul_m (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "div") (let* (
            params (get obj "div")
            v (u256.div (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "mod") (let* (
            params (get obj "mod")
            v (u256.mod (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "exp") (let* (
            params (get obj "exp")
            v (u256.exp (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "lt") (let* (
            params (get obj "lt")
            v (u256.lt (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (string.encode (if v "true" "false"))))
    (if (contains? obj "gt") (let* (
            params (get obj "gt")
            v (u256.gt (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (string.encode (if v "true" "false"))))
    (if (contains? obj "eq") (let* (
            params (get obj "eq")
            v (u256.eq (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (string.encode (if v "true" "false"))))
    (if (contains? obj "iszero") (let* (
            params (get obj "iszero")
            v (u256.iszero (u256.from_hex (get params "a")))
        )
        (wasmx-finish (string.encode (if v "true" "false"))))
    (if (contains? obj "not") (let* (
            params (get obj "not")
            v (u256.not (u256.from_hex (get params "a")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "and") (let* (
            params (get obj "and")
            v (u256.and (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "or") (let* (
            params (get obj "or")
            v (u256.or (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "xor") (let* (
            params (get obj "xor")
            v (u256.xor (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "shr") (let* (
            params (get obj "shr")
            v (u256.shr (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "shl") (let* (
            params (get obj "shl")
            v (u256.shl (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "sar") (let* (
            params (get obj "sar")
            v (u256.sar (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "sdiv") (let* (
            params (get obj "sdiv")
            v (u256.sdiv (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "sgt") (let* (
            params (get obj "sgt")
            v (u256.sgt (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "slt") (let* (
            params (get obj "slt")
            v (u256.slt (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "smod") (let* (
            params (get obj "smod")
            v (u256.smod (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "signextend") (let* (
            params (get obj "signextend")
            v (u256.signextend (u256.from_hex (get params "a")) (u256.from_hex (get params "b")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "addmod") (let* (
            params (get obj "addmod")
            v (u256.addmod (u256.from_hex (get params "a")) (u256.from_hex (get params "b")) (u256.from_hex (get params "c")))
        )
        (wasmx-finish (u256.encode v)))
    (if (contains? obj "mulmod") (let* (
            params (get obj "mulmod")
            v (u256.mulmod (u256.from_hex (get params "a")) (u256.from_hex (get params "b")) (u256.from_hex (get params "c")))
        )
        (wasmx-finish (u256.encode v)))

    (throw "function not found")
    ))))))))))))))))))))))))))))))))))))))))
)))
(main (json-parse (get-calldata)))
)
